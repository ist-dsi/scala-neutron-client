package pt.tecnico.dsi.openstack.neutron

import scala.util.Random
import cats.effect.IO
import org.scalatest.{Assertion, Succeeded}
import org.scalatest.OptionValues._
import pt.tecnico.dsi.openstack.neutron.models.Network
import pt.tecnico.dsi.openstack.neutron.models.Network.Segment
import pt.tecnico.dsi.openstack.neutron.services.Networks

final class NetworksSpec extends CrudSpec[Network, Network.Create, Network.Update]("network")
  with BulkCreateSpec[Network, Network.Create] {
  override val service: Networks[IO] = neutron.networks
  override val bulkService: Networks[IO] = neutron.networks
  
  override def createStub(name: String): Network.Create = Network.Create(
    name,
    "a description",
    segments = Some(List(Network.Segment("vxlan", segmentationId = Some(Random.between(100, 1000))))),
    projectId = Some(project.id),
  )
  override def compareCreate(create: Network.Create, model: Network): Assertion = {
    model.name shouldBe create.name
    model.description shouldBe create.description
    model.projectId shouldBe create.projectId.value
    
    model.segments.length shouldBe create.segments.map(_.size).getOrElse(0)
    // We assume the lists are in the same order
    (model.segments zip create.segments.value).map {
      case (Segment(existingType, existingPhysicalNetwork, existingSegmentationId), Segment(createType, createPhysicalNetwork, createSegmentationId)) =>
        existingType shouldBe createType
        existingPhysicalNetwork shouldBe createPhysicalNetwork
        createSegmentationId match {
          case Some(value) =>
            // The create explicitly set a segmentation id, so it must be the same
            existingSegmentationId.value shouldBe value
          case None =>
            // The segmentation id was generated by openstack
            existingSegmentationId should not be empty
        }
    } should contain only Succeeded // Scalatest flatten :P
  }
  
  override val updateStub: Network.Update = Network.Update(
    name = Some(randomName()),
    description = Some("a better and improved description"),
    portSecurityEnabled = Some(true),
    // The current plugin being used in the test infrastructure does not allow changing the segments
  )
  override def compareUpdate(update: Network.Update, model: Network): Assertion = {
    model.name shouldBe update.name.value
  }
  
  s"The ${name}s service" should {
    "list segmentation ids" in {
      service.listSegmentationIds.idempotently(_ should not be empty)
    }
  }
}