Index.PACKAGES = {"pt" : [], "pt.tecnico.dsi.openstack.neutron.services" : [{"name" : "pt.tecnico.dsi.openstack.neutron.services.BulkCreate", "trait" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/BulkCreate.html", "kind" : "trait", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/BulkCreate.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/BulkCreate.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (BulkCreate[F, Model, Create]) => Boolean, msg: => Any): BulkCreate[F, Model, Create]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/BulkCreate.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (BulkCreate[F, Model, Create]) => Boolean): BulkCreate[F, Model, Create]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/BulkCreate.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): BulkCreate[F, Model, Create]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/BulkCreate.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): BulkCreate[F, Model, Create]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/BulkCreate.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (BulkCreate[F, Model, Create], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/BulkCreate.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (BulkCreate[F, Model, Create], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/BulkCreate.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "create", "tail" : "(values: List[Create], extraHeaders: Header*): F[List[Model]]", "member" : "pt.tecnico.dsi.openstack.neutron.services.BulkCreate.create", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/BulkCreate.html#create(values:List[Create],extraHeaders:org.http4s.Header*):F[List[Model]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/BulkCreate.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/BulkCreate.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/BulkCreate.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/BulkCreate.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/BulkCreate.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/BulkCreate.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/BulkCreate.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/BulkCreate.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/BulkCreate.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/BulkCreate.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/BulkCreate.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/BulkCreate.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/BulkCreate.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/BulkCreate.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/BulkCreate.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/BulkCreate.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/BulkCreate.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/BulkCreate.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/BulkCreate.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "pt.tecnico.dsi.openstack.neutron.services.FloatingIps", "shortDescription" : "", "members_class" : [{"label" : "compareTo", "tail" : "(that: FloatingIps[F]): Int", "member" : "scala.math.Ordered.orderingToOrdered.compareTo", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/FloatingIps.html#compareTo(that:A):Int", "kind" : "def"}, {"label" : ">=", "tail" : "(that: FloatingIps[F]): Boolean", "member" : "scala.math.Ordered.orderingToOrdered.>=", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/FloatingIps.html#>=(that:A):Boolean", "kind" : "def"}, {"label" : "<=", "tail" : "(that: FloatingIps[F]): Boolean", "member" : "scala.math.Ordered.orderingToOrdered.<=", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/FloatingIps.html#<=(that:A):Boolean", "kind" : "def"}, {"label" : ">", "tail" : "(that: FloatingIps[F]): Boolean", "member" : "scala.math.Ordered.orderingToOrdered.>", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/FloatingIps.html#>(that:A):Boolean", "kind" : "def"}, {"label" : "<", "tail" : "(that: FloatingIps[F]): Boolean", "member" : "scala.math.Ordered.orderingToOrdered.<", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/FloatingIps.html#<(that:A):Boolean", "kind" : "def"}, {"label" : "compare", "tail" : "(that: FloatingIps[F]): Int", "member" : "scala.math.Ordered.orderingToOrdered.compare", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/FloatingIps.html#compare(that:A):Int", "kind" : "def"}, {"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/FloatingIps.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/FloatingIps.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (FloatingIps[F]) => Boolean, msg: => Any): FloatingIps[F]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/FloatingIps.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (FloatingIps[F]) => Boolean): FloatingIps[F]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/FloatingIps.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): FloatingIps[F]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/FloatingIps.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): FloatingIps[F]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/FloatingIps.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (FloatingIps[F], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/FloatingIps.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (FloatingIps[F], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/FloatingIps.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "createOrUpdate", "tail" : "(create: Create[IpAddress], keepExistingElements: Boolean, extraHeaders: Seq[Header])(resolveConflict: (FloatingIp[IpAddress], Create[IpAddress]) => F[FloatingIp[IpAddress]]): F[FloatingIp[IpAddress]]", "member" : "pt.tecnico.dsi.openstack.neutron.services.FloatingIps.createOrUpdate", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/FloatingIps.html#createOrUpdate(create:pt.tecnico.dsi.openstack.neutron.models.FloatingIp.Create[com.comcast.ip4s.IpAddress],keepExistingElements:Boolean,extraHeaders:Seq[org.http4s.Header])(resolveConflict:(pt.tecnico.dsi.openstack.neutron.models.FloatingIp[com.comcast.ip4s.IpAddress],pt.tecnico.dsi.openstack.neutron.models.FloatingIp.Create[com.comcast.ip4s.IpAddress])=>F[pt.tecnico.dsi.openstack.neutron.models.FloatingIp[com.comcast.ip4s.IpAddress]]):F[pt.tecnico.dsi.openstack.neutron.models.FloatingIp[com.comcast.ip4s.IpAddress]]", "kind" : "def"}, {"label" : "defaultResolveConflict", "tail" : "(existing: FloatingIp[IpAddress], create: Create[IpAddress], keepExistingElements: Boolean, extraHeaders: Seq[Header]): F[FloatingIp[IpAddress]]", "member" : "pt.tecnico.dsi.openstack.neutron.services.FloatingIps.defaultResolveConflict", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/FloatingIps.html#defaultResolveConflict(existing:pt.tecnico.dsi.openstack.neutron.models.FloatingIp[com.comcast.ip4s.IpAddress],create:pt.tecnico.dsi.openstack.neutron.models.FloatingIp.Create[com.comcast.ip4s.IpAddress],keepExistingElements:Boolean,extraHeaders:Seq[org.http4s.Header]):F[pt.tecnico.dsi.openstack.neutron.models.FloatingIp[com.comcast.ip4s.IpAddress]]", "kind" : "def"}, {"member" : "pt.tecnico.dsi.openstack.neutron.services.FloatingIps#<init>", "error" : "unsupported entity"}, {"label" : "apply", "tail" : "(id: String, update: Update[IpAddress], extraHeaders: Header*): F[FloatingIp[IpAddress]]", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.apply", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/FloatingIps.html#apply(id:String,update:Update,extraHeaders:org.http4s.Header*):F[Model]", "kind" : "def"}, {"label" : "apply", "tail" : "(create: Create[IpAddress], extraHeaders: Header*): F[FloatingIp[IpAddress]]", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.apply", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/FloatingIps.html#apply(create:Create,extraHeaders:org.http4s.Header*):F[Model]", "kind" : "def"}, {"label" : "delete", "tail" : "(id: String, extraHeaders: Header*): F[Unit]", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.delete", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/FloatingIps.html#delete(id:String,extraHeaders:org.http4s.Header*):F[Unit]", "kind" : "def"}, {"label" : "delete", "tail" : "(model: FloatingIp[IpAddress], extraHeaders: Header*): F[Unit]", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.delete", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/FloatingIps.html#delete(model:Model,extraHeaders:org.http4s.Header*):F[Unit]", "kind" : "def"}, {"label" : "update", "tail" : "(id: String, update: Update[IpAddress], extraHeaders: Header*): F[FloatingIp[IpAddress]]", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.update", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/FloatingIps.html#update(id:String,update:Update,extraHeaders:org.http4s.Header*):F[Model]", "kind" : "def"}, {"label" : "apply", "tail" : "(id: String, extraHeaders: Header*): F[FloatingIp[IpAddress]]", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.apply", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/FloatingIps.html#apply(id:String,extraHeaders:org.http4s.Header*):F[Model]", "kind" : "def"}, {"label" : "get", "tail" : "(id: String, extraHeaders: Header*): F[Option[FloatingIp[IpAddress]]]", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.get", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/FloatingIps.html#get(id:String,extraHeaders:org.http4s.Header*):F[Option[Model]]", "kind" : "def"}, {"label" : "createHandleConflictWithError", "tail" : "(create: Create[IpAddress], uri: Uri, extraHeaders: Seq[Header])(onConflict: \/=>[E, F[FloatingIp[IpAddress]]])(arg0: Decoder[E]): F[FloatingIp[IpAddress]]", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.createHandleConflictWithError", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/FloatingIps.html#createHandleConflictWithError[E<:Throwable](create:Create,uri:org.http4s.Uri,extraHeaders:Seq[org.http4s.Header])(onConflict:E\/=>F[Model])(implicitevidence$3:io.circe.Decoder[E]):F[Model]", "kind" : "def"}, {"label" : "createHandleConflict", "tail" : "(create: Create[IpAddress], uri: Uri, extraHeaders: Seq[Header])(onConflict: F[FloatingIp[IpAddress]]): F[FloatingIp[IpAddress]]", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.createHandleConflict", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/FloatingIps.html#createHandleConflict(create:Create,uri:org.http4s.Uri,extraHeaders:Seq[org.http4s.Header])(onConflict:F[Model]):F[Model]", "kind" : "def"}, {"label" : "createOrUpdate", "tail" : "(create: Create[IpAddress], keepExistingElements: Boolean, extraHeaders: Header*): F[FloatingIp[IpAddress]]", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.createOrUpdate", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/FloatingIps.html#createOrUpdate(create:Create,keepExistingElements:Boolean,extraHeaders:org.http4s.Header*):F[Model]", "kind" : "def"}, {"label" : "createOrUpdate", "tail" : "(create: Create[IpAddress], extraHeaders: Header*): F[FloatingIp[IpAddress]]", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.createOrUpdate", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/FloatingIps.html#createOrUpdate(create:Create,extraHeaders:org.http4s.Header*):F[Model]", "kind" : "def"}, {"label" : "create", "tail" : "(create: Create[IpAddress], extraHeaders: Header*): F[FloatingIp[IpAddress]]", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.create", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/FloatingIps.html#create(create:Create,extraHeaders:org.http4s.Header*):F[Model]", "kind" : "def"}, {"label" : "list", "tail" : "(query: Query, extraHeaders: Header*): F[List[FloatingIp[IpAddress]]]", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.list", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/FloatingIps.html#list(query:org.http4s.Query,extraHeaders:org.http4s.Header*):F[List[Model]]", "kind" : "def"}, {"label" : "list", "tail" : "(pairs: (String, String)*): F[List[FloatingIp[IpAddress]]]", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.list", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/FloatingIps.html#list(pairs:(String,String)*):F[List[Model]]", "kind" : "def"}, {"label" : "stream", "tail" : "(query: Query, extraHeaders: Header*): Stream[F, FloatingIp[IpAddress]]", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.stream", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/FloatingIps.html#stream(query:org.http4s.Query,extraHeaders:org.http4s.Header*):fs2.Stream[F,Model]", "kind" : "def"}, {"label" : "stream", "tail" : "(pairs: (String, String)*): Stream[F, FloatingIp[IpAddress]]", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.stream", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/FloatingIps.html#stream(pairs:(String,String)*):fs2.Stream[F,Model]", "kind" : "def"}, {"label" : "wrappedAt", "tail" : ": Option[String]", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.wrappedAt", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/FloatingIps.html#wrappedAt:Option[String]", "kind" : "val"}, {"label" : "uri", "tail" : ": Uri", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.uri", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/FloatingIps.html#uri:org.http4s.Uri", "kind" : "val"}, {"label" : "pluralName", "tail" : ": String", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.pluralName", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/FloatingIps.html#pluralName:String", "kind" : "val"}, {"label" : "updateEncoder", "tail" : ": Encoder[Update[IpAddress]]", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.updateEncoder", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/FloatingIps.html#updateEncoder:io.circe.Encoder[Update]", "kind" : "implicit val"}, {"label" : "createEncoder", "tail" : ": Encoder[Create[IpAddress]]", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.createEncoder", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/FloatingIps.html#createEncoder:io.circe.Encoder[Create]", "kind" : "implicit val"}, {"label" : "modelDecoder", "tail" : ": Decoder[FloatingIp[IpAddress]]", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.modelDecoder", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/FloatingIps.html#modelDecoder:io.circe.Decoder[Model]", "kind" : "implicit val"}, {"label" : "name", "tail" : ": String", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.name", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/FloatingIps.html#name:String", "kind" : "val"}, {"label" : "defaultOnError", "tail" : "(response: Response[F]): F[R]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.defaultOnError", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/FloatingIps.html#defaultOnError[R](response:org.http4s.Response[F]):F[R]", "kind" : "def"}, {"label" : "delete", "tail" : "(uri: Uri, extraHeaders: Header*): F[Unit]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.delete", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/FloatingIps.html#delete(uri:org.http4s.Uri,extraHeaders:org.http4s.Header*):F[Unit]", "kind" : "def"}, {"label" : "list", "tail" : "(wrappedAt: String, uri: Uri, extraHeaders: Header*)(arg0: Decoder[R]): F[List[R]]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.list", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/FloatingIps.html#list[R](wrappedAt:String,uri:org.http4s.Uri,extraHeaders:org.http4s.Header*)(implicitevidence$25:io.circe.Decoder[R]):F[List[R]]", "kind" : "def"}, {"label" : "stream", "tail" : "(wrappedAt: String, uri: Uri, extraHeaders: Header*)(arg0: Decoder[R]): Stream[F, R]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.stream", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/FloatingIps.html#stream[R](wrappedAt:String,uri:org.http4s.Uri,extraHeaders:org.http4s.Header*)(implicitevidence$24:io.circe.Decoder[R]):fs2.Stream[F,R]", "kind" : "def"}, {"label" : "postHandleConflictWithError", "tail" : "(wrappedAt: Option[String], value: V, uri: Uri, extraHeaders: Seq[Header])(onConflict: \/=>[E, F[R]])(arg0: Encoder[V], arg1: Decoder[R], arg2: Decoder[E]): F[R]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.postHandleConflictWithError", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/FloatingIps.html#postHandleConflictWithError[V,R,E<:Throwable](wrappedAt:Option[String],value:V,uri:org.http4s.Uri,extraHeaders:Seq[org.http4s.Header])(onConflict:E\/=>F[R])(implicitevidence$21:io.circe.Encoder[V],implicitevidence$22:io.circe.Decoder[R],implicitevidence$23:io.circe.Decoder[E]):F[R]", "kind" : "def"}, {"label" : "\/=>", "tail" : "", "member" : "pt.tecnico.dsi.openstack.common.services.Service.\/=>", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/FloatingIps.html#\/=>[-T,+R]=PartialFunction[T,R]", "kind" : "type"}, {"label" : "postHandleConflict", "tail" : "(wrappedAt: Option[String], value: V, uri: Uri, extraHeaders: Seq[Header])(onConflict: F[R])(arg0: Encoder[V], arg1: Decoder[R]): F[R]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.postHandleConflict", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/FloatingIps.html#postHandleConflict[V,R](wrappedAt:Option[String],value:V,uri:org.http4s.Uri,extraHeaders:Seq[org.http4s.Header])(onConflict:F[R])(implicitevidence$19:io.circe.Encoder[V],implicitevidence$20:io.circe.Decoder[R]):F[R]", "kind" : "def"}, {"label" : "post", "tail" : "(wrappedAt: Option[String], value: V, uri: Uri, extraHeaders: Header*)(arg0: Encoder[V], arg1: Decoder[R]): F[R]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.post", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/FloatingIps.html#post[V,R](wrappedAt:Option[String],value:V,uri:org.http4s.Uri,extraHeaders:org.http4s.Header*)(implicitevidence$17:io.circe.Encoder[V],implicitevidence$18:io.circe.Decoder[R]):F[R]", "kind" : "def"}, {"label" : "patch", "tail" : "(wrappedAt: Option[String], value: V, uri: Uri, extraHeaders: Header*)(arg0: Encoder[V], arg1: Decoder[R]): F[R]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.patch", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/FloatingIps.html#patch[V,R](wrappedAt:Option[String],value:V,uri:org.http4s.Uri,extraHeaders:org.http4s.Header*)(implicitevidence$15:io.circe.Encoder[V],implicitevidence$16:io.circe.Decoder[R]):F[R]", "kind" : "def"}, {"label" : "put", "tail" : "(wrappedAt: Option[String], value: V, uri: Uri, extraHeaders: Header*)(arg0: Encoder[V], arg1: Decoder[R]): F[R]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.put", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/FloatingIps.html#put[V,R](wrappedAt:Option[String],value:V,uri:org.http4s.Uri,extraHeaders:org.http4s.Header*)(implicitevidence$13:io.circe.Encoder[V],implicitevidence$14:io.circe.Decoder[R]):F[R]", "kind" : "def"}, {"label" : "getOption", "tail" : "(wrappedAt: Option[String], uri: Uri, extraHeaders: Header*)(arg0: Decoder[R]): F[Option[R]]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.getOption", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/FloatingIps.html#getOption[R](wrappedAt:Option[String],uri:org.http4s.Uri,extraHeaders:org.http4s.Header*)(implicitevidence$12:io.circe.Decoder[R]):F[Option[R]]", "kind" : "def"}, {"label" : "get", "tail" : "(wrappedAt: Option[String], uri: Uri, extraHeaders: Header*)(arg0: Decoder[R]): F[R]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.get", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/FloatingIps.html#get[R](wrappedAt:Option[String],uri:org.http4s.Uri,extraHeaders:org.http4s.Header*)(implicitevidence$11:io.circe.Decoder[R]):F[R]", "kind" : "def"}, {"label" : "expectOption", "tail" : "(wrappedAt: Option[String], method: Method, uri: Uri, extraHeaders: Header*)(arg0: Decoder[R]): F[Option[R]]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.expectOption", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/FloatingIps.html#expectOption[R](wrappedAt:Option[String],method:org.http4s.Method,uri:org.http4s.Uri,extraHeaders:org.http4s.Header*)(implicitevidence$10:io.circe.Decoder[R]):F[Option[R]]", "kind" : "def"}, {"label" : "expect", "tail" : "(wrappedAt: Option[String], method: Method, uri: Uri, extraHeaders: Header*)(arg0: Decoder[R]): F[R]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.expect", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/FloatingIps.html#expect[R](wrappedAt:Option[String],method:org.http4s.Method,uri:org.http4s.Uri,extraHeaders:org.http4s.Header*)(implicitevidence$9:io.circe.Decoder[R]):F[R]", "kind" : "def"}, {"label" : "expectOption", "tail" : "(wrappedAt: Option[String], method: Method, value: B, uri: Uri, extraHeaders: Header*)(arg0: Encoder[B], arg1: Decoder[R]): F[Option[R]]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.expectOption", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/FloatingIps.html#expectOption[B,R](wrappedAt:Option[String],method:org.http4s.Method,value:B,uri:org.http4s.Uri,extraHeaders:org.http4s.Header*)(implicitevidence$7:io.circe.Encoder[B],implicitevidence$8:io.circe.Decoder[R]):F[Option[R]]", "kind" : "def"}, {"label" : "expect", "tail" : "(wrappedAt: Option[String], method: Method, value: V, uri: Uri, extraHeaders: Header*)(arg0: Encoder[V], arg1: Decoder[R]): F[R]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.expect", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/FloatingIps.html#expect[V,R](wrappedAt:Option[String],method:org.http4s.Method,value:V,uri:org.http4s.Uri,extraHeaders:org.http4s.Header*)(implicitevidence$5:io.circe.Encoder[V],implicitevidence$6:io.circe.Decoder[R]):F[R]", "kind" : "def"}, {"label" : "expectOptionUnwrapped", "tail" : "(wrappedAt: Option[String], request: F[Request[F]])(arg0: Decoder[R]): F[Option[R]]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.expectOptionUnwrapped", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/FloatingIps.html#expectOptionUnwrapped[R](wrappedAt:Option[String],request:F[org.http4s.Request[F]])(implicitevidence$4:io.circe.Decoder[R]):F[Option[R]]", "kind" : "def"}, {"label" : "expectUnwrapped", "tail" : "(wrappedAt: Option[String], request: F[Request[F]])(arg0: Decoder[R]): F[R]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.expectUnwrapped", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/FloatingIps.html#expectUnwrapped[R](wrappedAt:Option[String],request:F[org.http4s.Request[F]])(implicitevidence$3:io.circe.Decoder[R]):F[R]", "kind" : "def"}, {"label" : "wrapped", "tail" : "(at: Option[String])(encoder: Encoder[R]): EntityEncoder[F, R]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.wrapped", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/FloatingIps.html#wrapped[R](at:Option[String])(implicitencoder:io.circe.Encoder[R]):org.http4s.EntityEncoder[F,R]", "kind" : "def"}, {"label" : "unwrapped", "tail" : "(at: Option[String])(decoder: Decoder[R]): EntityDecoder[F, R]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.unwrapped", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/FloatingIps.html#unwrapped[R](at:Option[String])(implicitdecoder:io.circe.Decoder[R]):org.http4s.EntityDecoder[F,R]", "kind" : "def"}, {"label" : "void", "tail" : ": EntityDecoder[F, Unit]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.void", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/FloatingIps.html#void:org.http4s.EntityDecoder[F,Unit]", "kind" : "implicit val"}, {"label" : "jsonDecoder", "tail" : "(arg0: Decoder[A]): EntityDecoder[F, A]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.jsonDecoder", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/FloatingIps.html#jsonDecoder[A](implicitevidence$2:io.circe.Decoder[A]):org.http4s.EntityDecoder[F,A]", "kind" : "implicit def"}, {"label" : "jsonEncoder", "tail" : "(arg0: Encoder[A]): EntityEncoder[F, A]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.jsonEncoder", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/FloatingIps.html#jsonEncoder[A](implicitevidence$1:io.circe.Encoder[A]):org.http4s.EntityEncoder[F,A]", "kind" : "implicit def"}, {"label" : "jsonPrinter", "tail" : ": Printer", "member" : "pt.tecnico.dsi.openstack.common.services.Service.jsonPrinter", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/FloatingIps.html#jsonPrinter:io.circe.Printer", "kind" : "val"}, {"label" : "dsl", "tail" : ": Http4sClientDsl[F]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.dsl", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/FloatingIps.html#dsl:org.http4s.client.dsl.Http4sClientDsl[F]", "kind" : "val"}, {"label" : "F", "tail" : ": Sync[F]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.F", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/FloatingIps.html#F:cats.effect.Sync[F]", "kind" : "implicit val"}, {"label" : "client", "tail" : ": Client[F]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.client", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/FloatingIps.html#client:org.http4s.client.Client[F]", "kind" : "implicit val"}, {"label" : "authToken", "tail" : ": Header", "member" : "pt.tecnico.dsi.openstack.common.services.Service.authToken", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/FloatingIps.html#authToken:org.http4s.Header", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/FloatingIps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/FloatingIps.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/FloatingIps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/FloatingIps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/FloatingIps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/FloatingIps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/FloatingIps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/FloatingIps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/FloatingIps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/FloatingIps.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/FloatingIps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/FloatingIps.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/FloatingIps.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/FloatingIps.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/FloatingIps.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/FloatingIps.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/FloatingIps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/FloatingIps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/FloatingIps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/FloatingIps.html", "kind" : "class"}, {"name" : "pt.tecnico.dsi.openstack.neutron.services.IpAvailabilities", "shortDescription" : "", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/IpAvailabilities.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/IpAvailabilities.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (IpAvailabilities[F]) => Boolean, msg: => Any): IpAvailabilities[F]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/IpAvailabilities.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (IpAvailabilities[F]) => Boolean): IpAvailabilities[F]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/IpAvailabilities.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): IpAvailabilities[F]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/IpAvailabilities.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): IpAvailabilities[F]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/IpAvailabilities.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (IpAvailabilities[F], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/IpAvailabilities.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (IpAvailabilities[F], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/IpAvailabilities.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "show", "tail" : "(networkId: String): F[IpAvailability]", "member" : "pt.tecnico.dsi.openstack.neutron.services.IpAvailabilities.show", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/IpAvailabilities.html#show(networkId:String):F[pt.tecnico.dsi.openstack.neutron.models.IpAvailability]", "kind" : "def"}, {"label" : "list", "tail" : "(query: Query): F[List[IpAvailability]]", "member" : "pt.tecnico.dsi.openstack.neutron.services.IpAvailabilities.list", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/IpAvailabilities.html#list(query:org.http4s.Query):F[List[pt.tecnico.dsi.openstack.neutron.models.IpAvailability]]", "kind" : "def"}, {"label" : "list", "tail" : "(pairs: (String, String)*): F[List[IpAvailability]]", "member" : "pt.tecnico.dsi.openstack.neutron.services.IpAvailabilities.list", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/IpAvailabilities.html#list(pairs:(String,String)*):F[List[pt.tecnico.dsi.openstack.neutron.models.IpAvailability]]", "kind" : "def"}, {"label" : "stream", "tail" : "(query: Query): Stream[F, IpAvailability]", "member" : "pt.tecnico.dsi.openstack.neutron.services.IpAvailabilities.stream", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/IpAvailabilities.html#stream(query:org.http4s.Query):fs2.Stream[F,pt.tecnico.dsi.openstack.neutron.models.IpAvailability]", "kind" : "def"}, {"label" : "stream", "tail" : "(pairs: (String, String)*): Stream[F, IpAvailability]", "member" : "pt.tecnico.dsi.openstack.neutron.services.IpAvailabilities.stream", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/IpAvailabilities.html#stream(pairs:(String,String)*):fs2.Stream[F,pt.tecnico.dsi.openstack.neutron.models.IpAvailability]", "kind" : "def"}, {"label" : "name", "tail" : ": String", "member" : "pt.tecnico.dsi.openstack.neutron.services.IpAvailabilities.name", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/IpAvailabilities.html#name:String", "kind" : "val"}, {"label" : "uri", "tail" : ": Uri", "member" : "pt.tecnico.dsi.openstack.neutron.services.IpAvailabilities.uri", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/IpAvailabilities.html#uri:org.http4s.Uri", "kind" : "val"}, {"member" : "pt.tecnico.dsi.openstack.neutron.services.IpAvailabilities#<init>", "error" : "unsupported entity"}, {"label" : "defaultOnError", "tail" : "(response: Response[F]): F[R]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.defaultOnError", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/IpAvailabilities.html#defaultOnError[R](response:org.http4s.Response[F]):F[R]", "kind" : "def"}, {"label" : "delete", "tail" : "(uri: Uri, extraHeaders: Header*): F[Unit]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.delete", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/IpAvailabilities.html#delete(uri:org.http4s.Uri,extraHeaders:org.http4s.Header*):F[Unit]", "kind" : "def"}, {"label" : "list", "tail" : "(wrappedAt: String, uri: Uri, extraHeaders: Header*)(arg0: Decoder[R]): F[List[R]]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.list", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/IpAvailabilities.html#list[R](wrappedAt:String,uri:org.http4s.Uri,extraHeaders:org.http4s.Header*)(implicitevidence$25:io.circe.Decoder[R]):F[List[R]]", "kind" : "def"}, {"label" : "stream", "tail" : "(wrappedAt: String, uri: Uri, extraHeaders: Header*)(arg0: Decoder[R]): Stream[F, R]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.stream", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/IpAvailabilities.html#stream[R](wrappedAt:String,uri:org.http4s.Uri,extraHeaders:org.http4s.Header*)(implicitevidence$24:io.circe.Decoder[R]):fs2.Stream[F,R]", "kind" : "def"}, {"label" : "postHandleConflictWithError", "tail" : "(wrappedAt: Option[String], value: V, uri: Uri, extraHeaders: Seq[Header])(onConflict: \/=>[E, F[R]])(arg0: Encoder[V], arg1: Decoder[R], arg2: Decoder[E]): F[R]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.postHandleConflictWithError", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/IpAvailabilities.html#postHandleConflictWithError[V,R,E<:Throwable](wrappedAt:Option[String],value:V,uri:org.http4s.Uri,extraHeaders:Seq[org.http4s.Header])(onConflict:E\/=>F[R])(implicitevidence$21:io.circe.Encoder[V],implicitevidence$22:io.circe.Decoder[R],implicitevidence$23:io.circe.Decoder[E]):F[R]", "kind" : "def"}, {"label" : "\/=>", "tail" : "", "member" : "pt.tecnico.dsi.openstack.common.services.Service.\/=>", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/IpAvailabilities.html#\/=>[-T,+R]=PartialFunction[T,R]", "kind" : "type"}, {"label" : "postHandleConflict", "tail" : "(wrappedAt: Option[String], value: V, uri: Uri, extraHeaders: Seq[Header])(onConflict: F[R])(arg0: Encoder[V], arg1: Decoder[R]): F[R]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.postHandleConflict", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/IpAvailabilities.html#postHandleConflict[V,R](wrappedAt:Option[String],value:V,uri:org.http4s.Uri,extraHeaders:Seq[org.http4s.Header])(onConflict:F[R])(implicitevidence$19:io.circe.Encoder[V],implicitevidence$20:io.circe.Decoder[R]):F[R]", "kind" : "def"}, {"label" : "post", "tail" : "(wrappedAt: Option[String], value: V, uri: Uri, extraHeaders: Header*)(arg0: Encoder[V], arg1: Decoder[R]): F[R]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.post", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/IpAvailabilities.html#post[V,R](wrappedAt:Option[String],value:V,uri:org.http4s.Uri,extraHeaders:org.http4s.Header*)(implicitevidence$17:io.circe.Encoder[V],implicitevidence$18:io.circe.Decoder[R]):F[R]", "kind" : "def"}, {"label" : "patch", "tail" : "(wrappedAt: Option[String], value: V, uri: Uri, extraHeaders: Header*)(arg0: Encoder[V], arg1: Decoder[R]): F[R]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.patch", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/IpAvailabilities.html#patch[V,R](wrappedAt:Option[String],value:V,uri:org.http4s.Uri,extraHeaders:org.http4s.Header*)(implicitevidence$15:io.circe.Encoder[V],implicitevidence$16:io.circe.Decoder[R]):F[R]", "kind" : "def"}, {"label" : "put", "tail" : "(wrappedAt: Option[String], value: V, uri: Uri, extraHeaders: Header*)(arg0: Encoder[V], arg1: Decoder[R]): F[R]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.put", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/IpAvailabilities.html#put[V,R](wrappedAt:Option[String],value:V,uri:org.http4s.Uri,extraHeaders:org.http4s.Header*)(implicitevidence$13:io.circe.Encoder[V],implicitevidence$14:io.circe.Decoder[R]):F[R]", "kind" : "def"}, {"label" : "getOption", "tail" : "(wrappedAt: Option[String], uri: Uri, extraHeaders: Header*)(arg0: Decoder[R]): F[Option[R]]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.getOption", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/IpAvailabilities.html#getOption[R](wrappedAt:Option[String],uri:org.http4s.Uri,extraHeaders:org.http4s.Header*)(implicitevidence$12:io.circe.Decoder[R]):F[Option[R]]", "kind" : "def"}, {"label" : "get", "tail" : "(wrappedAt: Option[String], uri: Uri, extraHeaders: Header*)(arg0: Decoder[R]): F[R]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.get", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/IpAvailabilities.html#get[R](wrappedAt:Option[String],uri:org.http4s.Uri,extraHeaders:org.http4s.Header*)(implicitevidence$11:io.circe.Decoder[R]):F[R]", "kind" : "def"}, {"label" : "expectOption", "tail" : "(wrappedAt: Option[String], method: Method, uri: Uri, extraHeaders: Header*)(arg0: Decoder[R]): F[Option[R]]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.expectOption", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/IpAvailabilities.html#expectOption[R](wrappedAt:Option[String],method:org.http4s.Method,uri:org.http4s.Uri,extraHeaders:org.http4s.Header*)(implicitevidence$10:io.circe.Decoder[R]):F[Option[R]]", "kind" : "def"}, {"label" : "expect", "tail" : "(wrappedAt: Option[String], method: Method, uri: Uri, extraHeaders: Header*)(arg0: Decoder[R]): F[R]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.expect", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/IpAvailabilities.html#expect[R](wrappedAt:Option[String],method:org.http4s.Method,uri:org.http4s.Uri,extraHeaders:org.http4s.Header*)(implicitevidence$9:io.circe.Decoder[R]):F[R]", "kind" : "def"}, {"label" : "expectOption", "tail" : "(wrappedAt: Option[String], method: Method, value: B, uri: Uri, extraHeaders: Header*)(arg0: Encoder[B], arg1: Decoder[R]): F[Option[R]]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.expectOption", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/IpAvailabilities.html#expectOption[B,R](wrappedAt:Option[String],method:org.http4s.Method,value:B,uri:org.http4s.Uri,extraHeaders:org.http4s.Header*)(implicitevidence$7:io.circe.Encoder[B],implicitevidence$8:io.circe.Decoder[R]):F[Option[R]]", "kind" : "def"}, {"label" : "expect", "tail" : "(wrappedAt: Option[String], method: Method, value: V, uri: Uri, extraHeaders: Header*)(arg0: Encoder[V], arg1: Decoder[R]): F[R]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.expect", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/IpAvailabilities.html#expect[V,R](wrappedAt:Option[String],method:org.http4s.Method,value:V,uri:org.http4s.Uri,extraHeaders:org.http4s.Header*)(implicitevidence$5:io.circe.Encoder[V],implicitevidence$6:io.circe.Decoder[R]):F[R]", "kind" : "def"}, {"label" : "expectOptionUnwrapped", "tail" : "(wrappedAt: Option[String], request: F[Request[F]])(arg0: Decoder[R]): F[Option[R]]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.expectOptionUnwrapped", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/IpAvailabilities.html#expectOptionUnwrapped[R](wrappedAt:Option[String],request:F[org.http4s.Request[F]])(implicitevidence$4:io.circe.Decoder[R]):F[Option[R]]", "kind" : "def"}, {"label" : "expectUnwrapped", "tail" : "(wrappedAt: Option[String], request: F[Request[F]])(arg0: Decoder[R]): F[R]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.expectUnwrapped", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/IpAvailabilities.html#expectUnwrapped[R](wrappedAt:Option[String],request:F[org.http4s.Request[F]])(implicitevidence$3:io.circe.Decoder[R]):F[R]", "kind" : "def"}, {"label" : "wrapped", "tail" : "(at: Option[String])(encoder: Encoder[R]): EntityEncoder[F, R]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.wrapped", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/IpAvailabilities.html#wrapped[R](at:Option[String])(implicitencoder:io.circe.Encoder[R]):org.http4s.EntityEncoder[F,R]", "kind" : "def"}, {"label" : "unwrapped", "tail" : "(at: Option[String])(decoder: Decoder[R]): EntityDecoder[F, R]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.unwrapped", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/IpAvailabilities.html#unwrapped[R](at:Option[String])(implicitdecoder:io.circe.Decoder[R]):org.http4s.EntityDecoder[F,R]", "kind" : "def"}, {"label" : "void", "tail" : ": EntityDecoder[F, Unit]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.void", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/IpAvailabilities.html#void:org.http4s.EntityDecoder[F,Unit]", "kind" : "implicit val"}, {"label" : "jsonDecoder", "tail" : "(arg0: Decoder[A]): EntityDecoder[F, A]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.jsonDecoder", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/IpAvailabilities.html#jsonDecoder[A](implicitevidence$2:io.circe.Decoder[A]):org.http4s.EntityDecoder[F,A]", "kind" : "implicit def"}, {"label" : "jsonEncoder", "tail" : "(arg0: Encoder[A]): EntityEncoder[F, A]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.jsonEncoder", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/IpAvailabilities.html#jsonEncoder[A](implicitevidence$1:io.circe.Encoder[A]):org.http4s.EntityEncoder[F,A]", "kind" : "implicit def"}, {"label" : "jsonPrinter", "tail" : ": Printer", "member" : "pt.tecnico.dsi.openstack.common.services.Service.jsonPrinter", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/IpAvailabilities.html#jsonPrinter:io.circe.Printer", "kind" : "val"}, {"label" : "dsl", "tail" : ": Http4sClientDsl[F]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.dsl", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/IpAvailabilities.html#dsl:org.http4s.client.dsl.Http4sClientDsl[F]", "kind" : "val"}, {"label" : "F", "tail" : ": Sync[F]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.F", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/IpAvailabilities.html#F:cats.effect.Sync[F]", "kind" : "implicit val"}, {"label" : "client", "tail" : ": Client[F]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.client", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/IpAvailabilities.html#client:org.http4s.client.Client[F]", "kind" : "implicit val"}, {"label" : "authToken", "tail" : ": Header", "member" : "pt.tecnico.dsi.openstack.common.services.Service.authToken", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/IpAvailabilities.html#authToken:org.http4s.Header", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/IpAvailabilities.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/IpAvailabilities.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/IpAvailabilities.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/IpAvailabilities.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/IpAvailabilities.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/IpAvailabilities.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/IpAvailabilities.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/IpAvailabilities.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/IpAvailabilities.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/IpAvailabilities.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/IpAvailabilities.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/IpAvailabilities.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/IpAvailabilities.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/IpAvailabilities.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/IpAvailabilities.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/IpAvailabilities.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/IpAvailabilities.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/IpAvailabilities.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/IpAvailabilities.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/IpAvailabilities.html", "kind" : "class"}, {"name" : "pt.tecnico.dsi.openstack.neutron.services.Networks", "shortDescription" : "", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Networks.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Networks.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Networks[F]) => Boolean, msg: => Any): Networks[F]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Networks.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Networks[F]) => Boolean): Networks[F]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Networks.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): Networks[F]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Networks.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Networks[F]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Networks.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Networks[F], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Networks.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Networks[F], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Networks.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "firstAvailableSegmentationId", "tail" : "(begin: Int, end: Int): F[Option[Int]]", "member" : "pt.tecnico.dsi.openstack.neutron.services.Networks.firstAvailableSegmentationId", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Networks.html#firstAvailableSegmentationId(begin:Int,end:Int):F[Option[Int]]", "kind" : "def"}, {"label" : "listSegmentationIds", "tail" : ": F[List[Int]]", "member" : "pt.tecnico.dsi.openstack.neutron.services.Networks.listSegmentationIds", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Networks.html#listSegmentationIds:F[List[Int]]", "kind" : "val"}, {"label" : "createOrUpdate", "tail" : "(create: Create, keepExistingElements: Boolean, extraHeaders: Seq[Header])(resolveConflict: (Network, Create) => F[Network]): F[Network]", "member" : "pt.tecnico.dsi.openstack.neutron.services.Networks.createOrUpdate", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Networks.html#createOrUpdate(create:pt.tecnico.dsi.openstack.neutron.models.Network.Create,keepExistingElements:Boolean,extraHeaders:Seq[org.http4s.Header])(resolveConflict:(pt.tecnico.dsi.openstack.neutron.models.Network,pt.tecnico.dsi.openstack.neutron.models.Network.Create)=>F[pt.tecnico.dsi.openstack.neutron.models.Network]):F[pt.tecnico.dsi.openstack.neutron.models.Network]", "kind" : "def"}, {"label" : "defaultResolveConflict", "tail" : "(existing: Network, create: Create, keepExistingElements: Boolean, extraHeaders: Seq[Header]): F[Network]", "member" : "pt.tecnico.dsi.openstack.neutron.services.Networks.defaultResolveConflict", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Networks.html#defaultResolveConflict(existing:pt.tecnico.dsi.openstack.neutron.models.Network,create:pt.tecnico.dsi.openstack.neutron.models.Network.Create,keepExistingElements:Boolean,extraHeaders:Seq[org.http4s.Header]):F[pt.tecnico.dsi.openstack.neutron.models.Network]", "kind" : "def"}, {"member" : "pt.tecnico.dsi.openstack.neutron.services.Networks#<init>", "error" : "unsupported entity"}, {"label" : "create", "tail" : "(values: List[Create], extraHeaders: Header*): F[List[Network]]", "member" : "pt.tecnico.dsi.openstack.neutron.services.BulkCreate.create", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Networks.html#create(values:List[Create],extraHeaders:org.http4s.Header*):F[List[Model]]", "kind" : "def"}, {"label" : "apply", "tail" : "(id: String, update: Update, extraHeaders: Header*): F[Network]", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.apply", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Networks.html#apply(id:String,update:Update,extraHeaders:org.http4s.Header*):F[Model]", "kind" : "def"}, {"label" : "apply", "tail" : "(create: Create, extraHeaders: Header*): F[Network]", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.apply", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Networks.html#apply(create:Create,extraHeaders:org.http4s.Header*):F[Model]", "kind" : "def"}, {"label" : "delete", "tail" : "(id: String, extraHeaders: Header*): F[Unit]", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.delete", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Networks.html#delete(id:String,extraHeaders:org.http4s.Header*):F[Unit]", "kind" : "def"}, {"label" : "delete", "tail" : "(model: Network, extraHeaders: Header*): F[Unit]", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.delete", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Networks.html#delete(model:Model,extraHeaders:org.http4s.Header*):F[Unit]", "kind" : "def"}, {"label" : "update", "tail" : "(id: String, update: Update, extraHeaders: Header*): F[Network]", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.update", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Networks.html#update(id:String,update:Update,extraHeaders:org.http4s.Header*):F[Model]", "kind" : "def"}, {"label" : "apply", "tail" : "(id: String, extraHeaders: Header*): F[Network]", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.apply", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Networks.html#apply(id:String,extraHeaders:org.http4s.Header*):F[Model]", "kind" : "def"}, {"label" : "get", "tail" : "(id: String, extraHeaders: Header*): F[Option[Network]]", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.get", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Networks.html#get(id:String,extraHeaders:org.http4s.Header*):F[Option[Model]]", "kind" : "def"}, {"label" : "createHandleConflictWithError", "tail" : "(create: Create, uri: Uri, extraHeaders: Seq[Header])(onConflict: \/=>[E, F[Network]])(arg0: Decoder[E]): F[Network]", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.createHandleConflictWithError", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Networks.html#createHandleConflictWithError[E<:Throwable](create:Create,uri:org.http4s.Uri,extraHeaders:Seq[org.http4s.Header])(onConflict:E\/=>F[Model])(implicitevidence$3:io.circe.Decoder[E]):F[Model]", "kind" : "def"}, {"label" : "createHandleConflict", "tail" : "(create: Create, uri: Uri, extraHeaders: Seq[Header])(onConflict: F[Network]): F[Network]", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.createHandleConflict", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Networks.html#createHandleConflict(create:Create,uri:org.http4s.Uri,extraHeaders:Seq[org.http4s.Header])(onConflict:F[Model]):F[Model]", "kind" : "def"}, {"label" : "createOrUpdate", "tail" : "(create: Create, keepExistingElements: Boolean, extraHeaders: Header*): F[Network]", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.createOrUpdate", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Networks.html#createOrUpdate(create:Create,keepExistingElements:Boolean,extraHeaders:org.http4s.Header*):F[Model]", "kind" : "def"}, {"label" : "createOrUpdate", "tail" : "(create: Create, extraHeaders: Header*): F[Network]", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.createOrUpdate", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Networks.html#createOrUpdate(create:Create,extraHeaders:org.http4s.Header*):F[Model]", "kind" : "def"}, {"label" : "create", "tail" : "(create: Create, extraHeaders: Header*): F[Network]", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.create", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Networks.html#create(create:Create,extraHeaders:org.http4s.Header*):F[Model]", "kind" : "def"}, {"label" : "list", "tail" : "(query: Query, extraHeaders: Header*): F[List[Network]]", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.list", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Networks.html#list(query:org.http4s.Query,extraHeaders:org.http4s.Header*):F[List[Model]]", "kind" : "def"}, {"label" : "list", "tail" : "(pairs: (String, String)*): F[List[Network]]", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.list", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Networks.html#list(pairs:(String,String)*):F[List[Model]]", "kind" : "def"}, {"label" : "stream", "tail" : "(query: Query, extraHeaders: Header*): Stream[F, Network]", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.stream", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Networks.html#stream(query:org.http4s.Query,extraHeaders:org.http4s.Header*):fs2.Stream[F,Model]", "kind" : "def"}, {"label" : "stream", "tail" : "(pairs: (String, String)*): Stream[F, Network]", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.stream", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Networks.html#stream(pairs:(String,String)*):fs2.Stream[F,Model]", "kind" : "def"}, {"label" : "wrappedAt", "tail" : ": Option[String]", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.wrappedAt", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Networks.html#wrappedAt:Option[String]", "kind" : "val"}, {"label" : "uri", "tail" : ": Uri", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.uri", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Networks.html#uri:org.http4s.Uri", "kind" : "val"}, {"label" : "pluralName", "tail" : ": String", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.pluralName", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Networks.html#pluralName:String", "kind" : "val"}, {"label" : "updateEncoder", "tail" : ": Encoder[Update]", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.updateEncoder", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Networks.html#updateEncoder:io.circe.Encoder[Update]", "kind" : "implicit val"}, {"label" : "createEncoder", "tail" : ": Encoder[Create]", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.createEncoder", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Networks.html#createEncoder:io.circe.Encoder[Create]", "kind" : "implicit val"}, {"label" : "modelDecoder", "tail" : ": Decoder[Network]", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.modelDecoder", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Networks.html#modelDecoder:io.circe.Decoder[Model]", "kind" : "implicit val"}, {"label" : "name", "tail" : ": String", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.name", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Networks.html#name:String", "kind" : "val"}, {"label" : "defaultOnError", "tail" : "(response: Response[F]): F[R]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.defaultOnError", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Networks.html#defaultOnError[R](response:org.http4s.Response[F]):F[R]", "kind" : "def"}, {"label" : "delete", "tail" : "(uri: Uri, extraHeaders: Header*): F[Unit]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.delete", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Networks.html#delete(uri:org.http4s.Uri,extraHeaders:org.http4s.Header*):F[Unit]", "kind" : "def"}, {"label" : "list", "tail" : "(wrappedAt: String, uri: Uri, extraHeaders: Header*)(arg0: Decoder[R]): F[List[R]]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.list", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Networks.html#list[R](wrappedAt:String,uri:org.http4s.Uri,extraHeaders:org.http4s.Header*)(implicitevidence$25:io.circe.Decoder[R]):F[List[R]]", "kind" : "def"}, {"label" : "stream", "tail" : "(wrappedAt: String, uri: Uri, extraHeaders: Header*)(arg0: Decoder[R]): Stream[F, R]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.stream", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Networks.html#stream[R](wrappedAt:String,uri:org.http4s.Uri,extraHeaders:org.http4s.Header*)(implicitevidence$24:io.circe.Decoder[R]):fs2.Stream[F,R]", "kind" : "def"}, {"label" : "postHandleConflictWithError", "tail" : "(wrappedAt: Option[String], value: V, uri: Uri, extraHeaders: Seq[Header])(onConflict: \/=>[E, F[R]])(arg0: Encoder[V], arg1: Decoder[R], arg2: Decoder[E]): F[R]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.postHandleConflictWithError", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Networks.html#postHandleConflictWithError[V,R,E<:Throwable](wrappedAt:Option[String],value:V,uri:org.http4s.Uri,extraHeaders:Seq[org.http4s.Header])(onConflict:E\/=>F[R])(implicitevidence$21:io.circe.Encoder[V],implicitevidence$22:io.circe.Decoder[R],implicitevidence$23:io.circe.Decoder[E]):F[R]", "kind" : "def"}, {"label" : "\/=>", "tail" : "", "member" : "pt.tecnico.dsi.openstack.common.services.Service.\/=>", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Networks.html#\/=>[-T,+R]=PartialFunction[T,R]", "kind" : "type"}, {"label" : "postHandleConflict", "tail" : "(wrappedAt: Option[String], value: V, uri: Uri, extraHeaders: Seq[Header])(onConflict: F[R])(arg0: Encoder[V], arg1: Decoder[R]): F[R]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.postHandleConflict", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Networks.html#postHandleConflict[V,R](wrappedAt:Option[String],value:V,uri:org.http4s.Uri,extraHeaders:Seq[org.http4s.Header])(onConflict:F[R])(implicitevidence$19:io.circe.Encoder[V],implicitevidence$20:io.circe.Decoder[R]):F[R]", "kind" : "def"}, {"label" : "post", "tail" : "(wrappedAt: Option[String], value: V, uri: Uri, extraHeaders: Header*)(arg0: Encoder[V], arg1: Decoder[R]): F[R]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.post", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Networks.html#post[V,R](wrappedAt:Option[String],value:V,uri:org.http4s.Uri,extraHeaders:org.http4s.Header*)(implicitevidence$17:io.circe.Encoder[V],implicitevidence$18:io.circe.Decoder[R]):F[R]", "kind" : "def"}, {"label" : "patch", "tail" : "(wrappedAt: Option[String], value: V, uri: Uri, extraHeaders: Header*)(arg0: Encoder[V], arg1: Decoder[R]): F[R]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.patch", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Networks.html#patch[V,R](wrappedAt:Option[String],value:V,uri:org.http4s.Uri,extraHeaders:org.http4s.Header*)(implicitevidence$15:io.circe.Encoder[V],implicitevidence$16:io.circe.Decoder[R]):F[R]", "kind" : "def"}, {"label" : "put", "tail" : "(wrappedAt: Option[String], value: V, uri: Uri, extraHeaders: Header*)(arg0: Encoder[V], arg1: Decoder[R]): F[R]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.put", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Networks.html#put[V,R](wrappedAt:Option[String],value:V,uri:org.http4s.Uri,extraHeaders:org.http4s.Header*)(implicitevidence$13:io.circe.Encoder[V],implicitevidence$14:io.circe.Decoder[R]):F[R]", "kind" : "def"}, {"label" : "getOption", "tail" : "(wrappedAt: Option[String], uri: Uri, extraHeaders: Header*)(arg0: Decoder[R]): F[Option[R]]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.getOption", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Networks.html#getOption[R](wrappedAt:Option[String],uri:org.http4s.Uri,extraHeaders:org.http4s.Header*)(implicitevidence$12:io.circe.Decoder[R]):F[Option[R]]", "kind" : "def"}, {"label" : "get", "tail" : "(wrappedAt: Option[String], uri: Uri, extraHeaders: Header*)(arg0: Decoder[R]): F[R]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.get", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Networks.html#get[R](wrappedAt:Option[String],uri:org.http4s.Uri,extraHeaders:org.http4s.Header*)(implicitevidence$11:io.circe.Decoder[R]):F[R]", "kind" : "def"}, {"label" : "expectOption", "tail" : "(wrappedAt: Option[String], method: Method, uri: Uri, extraHeaders: Header*)(arg0: Decoder[R]): F[Option[R]]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.expectOption", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Networks.html#expectOption[R](wrappedAt:Option[String],method:org.http4s.Method,uri:org.http4s.Uri,extraHeaders:org.http4s.Header*)(implicitevidence$10:io.circe.Decoder[R]):F[Option[R]]", "kind" : "def"}, {"label" : "expect", "tail" : "(wrappedAt: Option[String], method: Method, uri: Uri, extraHeaders: Header*)(arg0: Decoder[R]): F[R]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.expect", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Networks.html#expect[R](wrappedAt:Option[String],method:org.http4s.Method,uri:org.http4s.Uri,extraHeaders:org.http4s.Header*)(implicitevidence$9:io.circe.Decoder[R]):F[R]", "kind" : "def"}, {"label" : "expectOption", "tail" : "(wrappedAt: Option[String], method: Method, value: B, uri: Uri, extraHeaders: Header*)(arg0: Encoder[B], arg1: Decoder[R]): F[Option[R]]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.expectOption", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Networks.html#expectOption[B,R](wrappedAt:Option[String],method:org.http4s.Method,value:B,uri:org.http4s.Uri,extraHeaders:org.http4s.Header*)(implicitevidence$7:io.circe.Encoder[B],implicitevidence$8:io.circe.Decoder[R]):F[Option[R]]", "kind" : "def"}, {"label" : "expect", "tail" : "(wrappedAt: Option[String], method: Method, value: V, uri: Uri, extraHeaders: Header*)(arg0: Encoder[V], arg1: Decoder[R]): F[R]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.expect", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Networks.html#expect[V,R](wrappedAt:Option[String],method:org.http4s.Method,value:V,uri:org.http4s.Uri,extraHeaders:org.http4s.Header*)(implicitevidence$5:io.circe.Encoder[V],implicitevidence$6:io.circe.Decoder[R]):F[R]", "kind" : "def"}, {"label" : "expectOptionUnwrapped", "tail" : "(wrappedAt: Option[String], request: F[Request[F]])(arg0: Decoder[R]): F[Option[R]]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.expectOptionUnwrapped", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Networks.html#expectOptionUnwrapped[R](wrappedAt:Option[String],request:F[org.http4s.Request[F]])(implicitevidence$4:io.circe.Decoder[R]):F[Option[R]]", "kind" : "def"}, {"label" : "expectUnwrapped", "tail" : "(wrappedAt: Option[String], request: F[Request[F]])(arg0: Decoder[R]): F[R]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.expectUnwrapped", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Networks.html#expectUnwrapped[R](wrappedAt:Option[String],request:F[org.http4s.Request[F]])(implicitevidence$3:io.circe.Decoder[R]):F[R]", "kind" : "def"}, {"label" : "wrapped", "tail" : "(at: Option[String])(encoder: Encoder[R]): EntityEncoder[F, R]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.wrapped", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Networks.html#wrapped[R](at:Option[String])(implicitencoder:io.circe.Encoder[R]):org.http4s.EntityEncoder[F,R]", "kind" : "def"}, {"label" : "unwrapped", "tail" : "(at: Option[String])(decoder: Decoder[R]): EntityDecoder[F, R]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.unwrapped", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Networks.html#unwrapped[R](at:Option[String])(implicitdecoder:io.circe.Decoder[R]):org.http4s.EntityDecoder[F,R]", "kind" : "def"}, {"label" : "void", "tail" : ": EntityDecoder[F, Unit]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.void", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Networks.html#void:org.http4s.EntityDecoder[F,Unit]", "kind" : "implicit val"}, {"label" : "jsonDecoder", "tail" : "(arg0: Decoder[A]): EntityDecoder[F, A]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.jsonDecoder", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Networks.html#jsonDecoder[A](implicitevidence$2:io.circe.Decoder[A]):org.http4s.EntityDecoder[F,A]", "kind" : "implicit def"}, {"label" : "jsonEncoder", "tail" : "(arg0: Encoder[A]): EntityEncoder[F, A]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.jsonEncoder", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Networks.html#jsonEncoder[A](implicitevidence$1:io.circe.Encoder[A]):org.http4s.EntityEncoder[F,A]", "kind" : "implicit def"}, {"label" : "jsonPrinter", "tail" : ": Printer", "member" : "pt.tecnico.dsi.openstack.common.services.Service.jsonPrinter", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Networks.html#jsonPrinter:io.circe.Printer", "kind" : "val"}, {"label" : "dsl", "tail" : ": Http4sClientDsl[F]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.dsl", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Networks.html#dsl:org.http4s.client.dsl.Http4sClientDsl[F]", "kind" : "val"}, {"label" : "F", "tail" : ": Sync[F]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.F", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Networks.html#F:cats.effect.Sync[F]", "kind" : "implicit val"}, {"label" : "client", "tail" : ": Client[F]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.client", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Networks.html#client:org.http4s.client.Client[F]", "kind" : "implicit val"}, {"label" : "authToken", "tail" : ": Header", "member" : "pt.tecnico.dsi.openstack.common.services.Service.authToken", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Networks.html#authToken:org.http4s.Header", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Networks.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Networks.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Networks.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Networks.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Networks.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Networks.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Networks.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Networks.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Networks.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Networks.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Networks.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Networks.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Networks.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Networks.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Networks.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Networks.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Networks.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Networks.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Networks.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Networks.html", "kind" : "class"}, {"name" : "pt.tecnico.dsi.openstack.neutron.services.Quotas", "shortDescription" : "", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Quotas.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Quotas.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Quotas[F]) => Boolean, msg: => Any): Quotas[F]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Quotas.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Quotas[F]) => Boolean): Quotas[F]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Quotas.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): Quotas[F]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Quotas.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Quotas[F]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Quotas.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Quotas[F], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Quotas.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Quotas[F], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Quotas.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "delete", "tail" : "(projectId: String): F[Unit]", "member" : "pt.tecnico.dsi.openstack.neutron.services.Quotas.delete", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Quotas.html#delete(projectId:String):F[Unit]", "kind" : "def"}, {"label" : "update", "tail" : "(projectId: String, quotas: Update)(encoder: Encoder[Update]): F[Quota]", "member" : "pt.tecnico.dsi.openstack.neutron.services.Quotas.update", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Quotas.html#update(projectId:String,quotas:pt.tecnico.dsi.openstack.neutron.models.Quota.Update)(implicitencoder:io.circe.Encoder[pt.tecnico.dsi.openstack.neutron.models.Quota.Update]):F[pt.tecnico.dsi.openstack.neutron.models.Quota]", "kind" : "def"}, {"label" : "getDefaults", "tail" : "(projectId: String): F[Quota]", "member" : "pt.tecnico.dsi.openstack.neutron.services.Quotas.getDefaults", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Quotas.html#getDefaults(projectId:String):F[pt.tecnico.dsi.openstack.neutron.models.Quota]", "kind" : "def"}, {"label" : "get", "tail" : "(projectId: String): F[Quota]", "member" : "pt.tecnico.dsi.openstack.neutron.services.Quotas.get", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Quotas.html#get(projectId:String):F[pt.tecnico.dsi.openstack.neutron.models.Quota]", "kind" : "def"}, {"label" : "list", "tail" : "(): F[List[(String, Quota)]]", "member" : "pt.tecnico.dsi.openstack.neutron.services.Quotas.list", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Quotas.html#list:F[List[(String,pt.tecnico.dsi.openstack.neutron.models.Quota)]]", "kind" : "def"}, {"label" : "stream", "tail" : "(): Stream[F, (String, Quota)]", "member" : "pt.tecnico.dsi.openstack.neutron.services.Quotas.stream", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Quotas.html#stream:fs2.Stream[F,(String,pt.tecnico.dsi.openstack.neutron.models.Quota)]", "kind" : "def"}, {"label" : "name", "tail" : ": String", "member" : "pt.tecnico.dsi.openstack.neutron.services.Quotas.name", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Quotas.html#name:String", "kind" : "val"}, {"label" : "uri", "tail" : ": Uri", "member" : "pt.tecnico.dsi.openstack.neutron.services.Quotas.uri", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Quotas.html#uri:org.http4s.Uri", "kind" : "val"}, {"member" : "pt.tecnico.dsi.openstack.neutron.services.Quotas#<init>", "error" : "unsupported entity"}, {"label" : "defaultOnError", "tail" : "(response: Response[F]): F[R]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.defaultOnError", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Quotas.html#defaultOnError[R](response:org.http4s.Response[F]):F[R]", "kind" : "def"}, {"label" : "delete", "tail" : "(uri: Uri, extraHeaders: Header*): F[Unit]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.delete", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Quotas.html#delete(uri:org.http4s.Uri,extraHeaders:org.http4s.Header*):F[Unit]", "kind" : "def"}, {"label" : "list", "tail" : "(wrappedAt: String, uri: Uri, extraHeaders: Header*)(arg0: Decoder[R]): F[List[R]]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.list", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Quotas.html#list[R](wrappedAt:String,uri:org.http4s.Uri,extraHeaders:org.http4s.Header*)(implicitevidence$25:io.circe.Decoder[R]):F[List[R]]", "kind" : "def"}, {"label" : "stream", "tail" : "(wrappedAt: String, uri: Uri, extraHeaders: Header*)(arg0: Decoder[R]): Stream[F, R]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.stream", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Quotas.html#stream[R](wrappedAt:String,uri:org.http4s.Uri,extraHeaders:org.http4s.Header*)(implicitevidence$24:io.circe.Decoder[R]):fs2.Stream[F,R]", "kind" : "def"}, {"label" : "postHandleConflictWithError", "tail" : "(wrappedAt: Option[String], value: V, uri: Uri, extraHeaders: Seq[Header])(onConflict: \/=>[E, F[R]])(arg0: Encoder[V], arg1: Decoder[R], arg2: Decoder[E]): F[R]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.postHandleConflictWithError", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Quotas.html#postHandleConflictWithError[V,R,E<:Throwable](wrappedAt:Option[String],value:V,uri:org.http4s.Uri,extraHeaders:Seq[org.http4s.Header])(onConflict:E\/=>F[R])(implicitevidence$21:io.circe.Encoder[V],implicitevidence$22:io.circe.Decoder[R],implicitevidence$23:io.circe.Decoder[E]):F[R]", "kind" : "def"}, {"label" : "\/=>", "tail" : "", "member" : "pt.tecnico.dsi.openstack.common.services.Service.\/=>", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Quotas.html#\/=>[-T,+R]=PartialFunction[T,R]", "kind" : "type"}, {"label" : "postHandleConflict", "tail" : "(wrappedAt: Option[String], value: V, uri: Uri, extraHeaders: Seq[Header])(onConflict: F[R])(arg0: Encoder[V], arg1: Decoder[R]): F[R]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.postHandleConflict", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Quotas.html#postHandleConflict[V,R](wrappedAt:Option[String],value:V,uri:org.http4s.Uri,extraHeaders:Seq[org.http4s.Header])(onConflict:F[R])(implicitevidence$19:io.circe.Encoder[V],implicitevidence$20:io.circe.Decoder[R]):F[R]", "kind" : "def"}, {"label" : "post", "tail" : "(wrappedAt: Option[String], value: V, uri: Uri, extraHeaders: Header*)(arg0: Encoder[V], arg1: Decoder[R]): F[R]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.post", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Quotas.html#post[V,R](wrappedAt:Option[String],value:V,uri:org.http4s.Uri,extraHeaders:org.http4s.Header*)(implicitevidence$17:io.circe.Encoder[V],implicitevidence$18:io.circe.Decoder[R]):F[R]", "kind" : "def"}, {"label" : "patch", "tail" : "(wrappedAt: Option[String], value: V, uri: Uri, extraHeaders: Header*)(arg0: Encoder[V], arg1: Decoder[R]): F[R]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.patch", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Quotas.html#patch[V,R](wrappedAt:Option[String],value:V,uri:org.http4s.Uri,extraHeaders:org.http4s.Header*)(implicitevidence$15:io.circe.Encoder[V],implicitevidence$16:io.circe.Decoder[R]):F[R]", "kind" : "def"}, {"label" : "put", "tail" : "(wrappedAt: Option[String], value: V, uri: Uri, extraHeaders: Header*)(arg0: Encoder[V], arg1: Decoder[R]): F[R]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.put", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Quotas.html#put[V,R](wrappedAt:Option[String],value:V,uri:org.http4s.Uri,extraHeaders:org.http4s.Header*)(implicitevidence$13:io.circe.Encoder[V],implicitevidence$14:io.circe.Decoder[R]):F[R]", "kind" : "def"}, {"label" : "getOption", "tail" : "(wrappedAt: Option[String], uri: Uri, extraHeaders: Header*)(arg0: Decoder[R]): F[Option[R]]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.getOption", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Quotas.html#getOption[R](wrappedAt:Option[String],uri:org.http4s.Uri,extraHeaders:org.http4s.Header*)(implicitevidence$12:io.circe.Decoder[R]):F[Option[R]]", "kind" : "def"}, {"label" : "get", "tail" : "(wrappedAt: Option[String], uri: Uri, extraHeaders: Header*)(arg0: Decoder[R]): F[R]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.get", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Quotas.html#get[R](wrappedAt:Option[String],uri:org.http4s.Uri,extraHeaders:org.http4s.Header*)(implicitevidence$11:io.circe.Decoder[R]):F[R]", "kind" : "def"}, {"label" : "expectOption", "tail" : "(wrappedAt: Option[String], method: Method, uri: Uri, extraHeaders: Header*)(arg0: Decoder[R]): F[Option[R]]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.expectOption", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Quotas.html#expectOption[R](wrappedAt:Option[String],method:org.http4s.Method,uri:org.http4s.Uri,extraHeaders:org.http4s.Header*)(implicitevidence$10:io.circe.Decoder[R]):F[Option[R]]", "kind" : "def"}, {"label" : "expect", "tail" : "(wrappedAt: Option[String], method: Method, uri: Uri, extraHeaders: Header*)(arg0: Decoder[R]): F[R]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.expect", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Quotas.html#expect[R](wrappedAt:Option[String],method:org.http4s.Method,uri:org.http4s.Uri,extraHeaders:org.http4s.Header*)(implicitevidence$9:io.circe.Decoder[R]):F[R]", "kind" : "def"}, {"label" : "expectOption", "tail" : "(wrappedAt: Option[String], method: Method, value: B, uri: Uri, extraHeaders: Header*)(arg0: Encoder[B], arg1: Decoder[R]): F[Option[R]]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.expectOption", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Quotas.html#expectOption[B,R](wrappedAt:Option[String],method:org.http4s.Method,value:B,uri:org.http4s.Uri,extraHeaders:org.http4s.Header*)(implicitevidence$7:io.circe.Encoder[B],implicitevidence$8:io.circe.Decoder[R]):F[Option[R]]", "kind" : "def"}, {"label" : "expect", "tail" : "(wrappedAt: Option[String], method: Method, value: V, uri: Uri, extraHeaders: Header*)(arg0: Encoder[V], arg1: Decoder[R]): F[R]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.expect", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Quotas.html#expect[V,R](wrappedAt:Option[String],method:org.http4s.Method,value:V,uri:org.http4s.Uri,extraHeaders:org.http4s.Header*)(implicitevidence$5:io.circe.Encoder[V],implicitevidence$6:io.circe.Decoder[R]):F[R]", "kind" : "def"}, {"label" : "expectOptionUnwrapped", "tail" : "(wrappedAt: Option[String], request: F[Request[F]])(arg0: Decoder[R]): F[Option[R]]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.expectOptionUnwrapped", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Quotas.html#expectOptionUnwrapped[R](wrappedAt:Option[String],request:F[org.http4s.Request[F]])(implicitevidence$4:io.circe.Decoder[R]):F[Option[R]]", "kind" : "def"}, {"label" : "expectUnwrapped", "tail" : "(wrappedAt: Option[String], request: F[Request[F]])(arg0: Decoder[R]): F[R]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.expectUnwrapped", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Quotas.html#expectUnwrapped[R](wrappedAt:Option[String],request:F[org.http4s.Request[F]])(implicitevidence$3:io.circe.Decoder[R]):F[R]", "kind" : "def"}, {"label" : "wrapped", "tail" : "(at: Option[String])(encoder: Encoder[R]): EntityEncoder[F, R]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.wrapped", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Quotas.html#wrapped[R](at:Option[String])(implicitencoder:io.circe.Encoder[R]):org.http4s.EntityEncoder[F,R]", "kind" : "def"}, {"label" : "unwrapped", "tail" : "(at: Option[String])(decoder: Decoder[R]): EntityDecoder[F, R]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.unwrapped", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Quotas.html#unwrapped[R](at:Option[String])(implicitdecoder:io.circe.Decoder[R]):org.http4s.EntityDecoder[F,R]", "kind" : "def"}, {"label" : "void", "tail" : ": EntityDecoder[F, Unit]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.void", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Quotas.html#void:org.http4s.EntityDecoder[F,Unit]", "kind" : "implicit val"}, {"label" : "jsonDecoder", "tail" : "(arg0: Decoder[A]): EntityDecoder[F, A]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.jsonDecoder", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Quotas.html#jsonDecoder[A](implicitevidence$2:io.circe.Decoder[A]):org.http4s.EntityDecoder[F,A]", "kind" : "implicit def"}, {"label" : "jsonEncoder", "tail" : "(arg0: Encoder[A]): EntityEncoder[F, A]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.jsonEncoder", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Quotas.html#jsonEncoder[A](implicitevidence$1:io.circe.Encoder[A]):org.http4s.EntityEncoder[F,A]", "kind" : "implicit def"}, {"label" : "jsonPrinter", "tail" : ": Printer", "member" : "pt.tecnico.dsi.openstack.common.services.Service.jsonPrinter", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Quotas.html#jsonPrinter:io.circe.Printer", "kind" : "val"}, {"label" : "dsl", "tail" : ": Http4sClientDsl[F]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.dsl", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Quotas.html#dsl:org.http4s.client.dsl.Http4sClientDsl[F]", "kind" : "val"}, {"label" : "F", "tail" : ": Sync[F]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.F", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Quotas.html#F:cats.effect.Sync[F]", "kind" : "implicit val"}, {"label" : "client", "tail" : ": Client[F]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.client", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Quotas.html#client:org.http4s.client.Client[F]", "kind" : "implicit val"}, {"label" : "authToken", "tail" : ": Header", "member" : "pt.tecnico.dsi.openstack.common.services.Service.authToken", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Quotas.html#authToken:org.http4s.Header", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Quotas.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Quotas.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Quotas.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Quotas.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Quotas.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Quotas.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Quotas.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Quotas.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Quotas.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Quotas.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Quotas.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Quotas.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Quotas.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Quotas.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Quotas.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Quotas.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Quotas.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Quotas.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Quotas.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Quotas.html", "kind" : "class"}, {"name" : "pt.tecnico.dsi.openstack.neutron.services.Routers", "shortDescription" : "", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Routers.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Routers.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Routers[F]) => Boolean, msg: => Any): Routers[F]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Routers.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Routers[F]) => Boolean): Routers[F]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Routers.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): Routers[F]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Routers.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Routers[F]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Routers.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Routers[F], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Routers.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Routers[F], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Routers.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "on", "tail" : "(router: Router): Operations", "member" : "pt.tecnico.dsi.openstack.neutron.services.Routers.on", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Routers.html#on(router:pt.tecnico.dsi.openstack.neutron.models.Router):Routers.this.Operations", "kind" : "def"}, {"label" : "on", "tail" : "(id: String): Operations", "member" : "pt.tecnico.dsi.openstack.neutron.services.Routers.on", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Routers.html#on(id:String):Routers.this.Operations", "kind" : "def"}, {"label" : "Operations", "tail" : "", "member" : "pt.tecnico.dsi.openstack.neutron.services.Routers.Operations", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Routers.html#OperationsextendsAnyRef", "kind" : "final class"}, {"label" : "createOrUpdate", "tail" : "(create: Create, keepExistingElements: Boolean, extraHeaders: Seq[Header])(resolveConflict: (Router, Create) => F[Router]): F[Router]", "member" : "pt.tecnico.dsi.openstack.neutron.services.Routers.createOrUpdate", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Routers.html#createOrUpdate(create:pt.tecnico.dsi.openstack.neutron.models.Router.Create,keepExistingElements:Boolean,extraHeaders:Seq[org.http4s.Header])(resolveConflict:(pt.tecnico.dsi.openstack.neutron.models.Router,pt.tecnico.dsi.openstack.neutron.models.Router.Create)=>F[pt.tecnico.dsi.openstack.neutron.models.Router]):F[pt.tecnico.dsi.openstack.neutron.models.Router]", "kind" : "def"}, {"label" : "defaultResolveConflict", "tail" : "(existing: Router, create: Create, keepExistingElements: Boolean, extraHeaders: Seq[Header]): F[Router]", "member" : "pt.tecnico.dsi.openstack.neutron.services.Routers.defaultResolveConflict", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Routers.html#defaultResolveConflict(existing:pt.tecnico.dsi.openstack.neutron.models.Router,create:pt.tecnico.dsi.openstack.neutron.models.Router.Create,keepExistingElements:Boolean,extraHeaders:Seq[org.http4s.Header]):F[pt.tecnico.dsi.openstack.neutron.models.Router]", "kind" : "def"}, {"member" : "pt.tecnico.dsi.openstack.neutron.services.Routers#<init>", "error" : "unsupported entity"}, {"label" : "apply", "tail" : "(id: String, update: Update, extraHeaders: Header*): F[Router]", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.apply", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Routers.html#apply(id:String,update:Update,extraHeaders:org.http4s.Header*):F[Model]", "kind" : "def"}, {"label" : "apply", "tail" : "(create: Create, extraHeaders: Header*): F[Router]", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.apply", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Routers.html#apply(create:Create,extraHeaders:org.http4s.Header*):F[Model]", "kind" : "def"}, {"label" : "delete", "tail" : "(id: String, extraHeaders: Header*): F[Unit]", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.delete", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Routers.html#delete(id:String,extraHeaders:org.http4s.Header*):F[Unit]", "kind" : "def"}, {"label" : "delete", "tail" : "(model: Router, extraHeaders: Header*): F[Unit]", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.delete", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Routers.html#delete(model:Model,extraHeaders:org.http4s.Header*):F[Unit]", "kind" : "def"}, {"label" : "update", "tail" : "(id: String, update: Update, extraHeaders: Header*): F[Router]", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.update", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Routers.html#update(id:String,update:Update,extraHeaders:org.http4s.Header*):F[Model]", "kind" : "def"}, {"label" : "apply", "tail" : "(id: String, extraHeaders: Header*): F[Router]", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.apply", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Routers.html#apply(id:String,extraHeaders:org.http4s.Header*):F[Model]", "kind" : "def"}, {"label" : "get", "tail" : "(id: String, extraHeaders: Header*): F[Option[Router]]", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.get", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Routers.html#get(id:String,extraHeaders:org.http4s.Header*):F[Option[Model]]", "kind" : "def"}, {"label" : "createHandleConflictWithError", "tail" : "(create: Create, uri: Uri, extraHeaders: Seq[Header])(onConflict: \/=>[E, F[Router]])(arg0: Decoder[E]): F[Router]", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.createHandleConflictWithError", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Routers.html#createHandleConflictWithError[E<:Throwable](create:Create,uri:org.http4s.Uri,extraHeaders:Seq[org.http4s.Header])(onConflict:E\/=>F[Model])(implicitevidence$3:io.circe.Decoder[E]):F[Model]", "kind" : "def"}, {"label" : "createHandleConflict", "tail" : "(create: Create, uri: Uri, extraHeaders: Seq[Header])(onConflict: F[Router]): F[Router]", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.createHandleConflict", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Routers.html#createHandleConflict(create:Create,uri:org.http4s.Uri,extraHeaders:Seq[org.http4s.Header])(onConflict:F[Model]):F[Model]", "kind" : "def"}, {"label" : "createOrUpdate", "tail" : "(create: Create, keepExistingElements: Boolean, extraHeaders: Header*): F[Router]", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.createOrUpdate", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Routers.html#createOrUpdate(create:Create,keepExistingElements:Boolean,extraHeaders:org.http4s.Header*):F[Model]", "kind" : "def"}, {"label" : "createOrUpdate", "tail" : "(create: Create, extraHeaders: Header*): F[Router]", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.createOrUpdate", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Routers.html#createOrUpdate(create:Create,extraHeaders:org.http4s.Header*):F[Model]", "kind" : "def"}, {"label" : "create", "tail" : "(create: Create, extraHeaders: Header*): F[Router]", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.create", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Routers.html#create(create:Create,extraHeaders:org.http4s.Header*):F[Model]", "kind" : "def"}, {"label" : "list", "tail" : "(query: Query, extraHeaders: Header*): F[List[Router]]", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.list", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Routers.html#list(query:org.http4s.Query,extraHeaders:org.http4s.Header*):F[List[Model]]", "kind" : "def"}, {"label" : "list", "tail" : "(pairs: (String, String)*): F[List[Router]]", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.list", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Routers.html#list(pairs:(String,String)*):F[List[Model]]", "kind" : "def"}, {"label" : "stream", "tail" : "(query: Query, extraHeaders: Header*): Stream[F, Router]", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.stream", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Routers.html#stream(query:org.http4s.Query,extraHeaders:org.http4s.Header*):fs2.Stream[F,Model]", "kind" : "def"}, {"label" : "stream", "tail" : "(pairs: (String, String)*): Stream[F, Router]", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.stream", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Routers.html#stream(pairs:(String,String)*):fs2.Stream[F,Model]", "kind" : "def"}, {"label" : "wrappedAt", "tail" : ": Option[String]", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.wrappedAt", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Routers.html#wrappedAt:Option[String]", "kind" : "val"}, {"label" : "uri", "tail" : ": Uri", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.uri", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Routers.html#uri:org.http4s.Uri", "kind" : "val"}, {"label" : "pluralName", "tail" : ": String", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.pluralName", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Routers.html#pluralName:String", "kind" : "val"}, {"label" : "updateEncoder", "tail" : ": Encoder[Update]", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.updateEncoder", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Routers.html#updateEncoder:io.circe.Encoder[Update]", "kind" : "implicit val"}, {"label" : "createEncoder", "tail" : ": Encoder[Create]", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.createEncoder", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Routers.html#createEncoder:io.circe.Encoder[Create]", "kind" : "implicit val"}, {"label" : "modelDecoder", "tail" : ": Decoder[Router]", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.modelDecoder", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Routers.html#modelDecoder:io.circe.Decoder[Model]", "kind" : "implicit val"}, {"label" : "name", "tail" : ": String", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.name", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Routers.html#name:String", "kind" : "val"}, {"label" : "defaultOnError", "tail" : "(response: Response[F]): F[R]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.defaultOnError", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Routers.html#defaultOnError[R](response:org.http4s.Response[F]):F[R]", "kind" : "def"}, {"label" : "delete", "tail" : "(uri: Uri, extraHeaders: Header*): F[Unit]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.delete", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Routers.html#delete(uri:org.http4s.Uri,extraHeaders:org.http4s.Header*):F[Unit]", "kind" : "def"}, {"label" : "list", "tail" : "(wrappedAt: String, uri: Uri, extraHeaders: Header*)(arg0: Decoder[R]): F[List[R]]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.list", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Routers.html#list[R](wrappedAt:String,uri:org.http4s.Uri,extraHeaders:org.http4s.Header*)(implicitevidence$25:io.circe.Decoder[R]):F[List[R]]", "kind" : "def"}, {"label" : "stream", "tail" : "(wrappedAt: String, uri: Uri, extraHeaders: Header*)(arg0: Decoder[R]): Stream[F, R]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.stream", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Routers.html#stream[R](wrappedAt:String,uri:org.http4s.Uri,extraHeaders:org.http4s.Header*)(implicitevidence$24:io.circe.Decoder[R]):fs2.Stream[F,R]", "kind" : "def"}, {"label" : "postHandleConflictWithError", "tail" : "(wrappedAt: Option[String], value: V, uri: Uri, extraHeaders: Seq[Header])(onConflict: \/=>[E, F[R]])(arg0: Encoder[V], arg1: Decoder[R], arg2: Decoder[E]): F[R]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.postHandleConflictWithError", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Routers.html#postHandleConflictWithError[V,R,E<:Throwable](wrappedAt:Option[String],value:V,uri:org.http4s.Uri,extraHeaders:Seq[org.http4s.Header])(onConflict:E\/=>F[R])(implicitevidence$21:io.circe.Encoder[V],implicitevidence$22:io.circe.Decoder[R],implicitevidence$23:io.circe.Decoder[E]):F[R]", "kind" : "def"}, {"label" : "\/=>", "tail" : "", "member" : "pt.tecnico.dsi.openstack.common.services.Service.\/=>", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Routers.html#\/=>[-T,+R]=PartialFunction[T,R]", "kind" : "type"}, {"label" : "postHandleConflict", "tail" : "(wrappedAt: Option[String], value: V, uri: Uri, extraHeaders: Seq[Header])(onConflict: F[R])(arg0: Encoder[V], arg1: Decoder[R]): F[R]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.postHandleConflict", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Routers.html#postHandleConflict[V,R](wrappedAt:Option[String],value:V,uri:org.http4s.Uri,extraHeaders:Seq[org.http4s.Header])(onConflict:F[R])(implicitevidence$19:io.circe.Encoder[V],implicitevidence$20:io.circe.Decoder[R]):F[R]", "kind" : "def"}, {"label" : "post", "tail" : "(wrappedAt: Option[String], value: V, uri: Uri, extraHeaders: Header*)(arg0: Encoder[V], arg1: Decoder[R]): F[R]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.post", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Routers.html#post[V,R](wrappedAt:Option[String],value:V,uri:org.http4s.Uri,extraHeaders:org.http4s.Header*)(implicitevidence$17:io.circe.Encoder[V],implicitevidence$18:io.circe.Decoder[R]):F[R]", "kind" : "def"}, {"label" : "patch", "tail" : "(wrappedAt: Option[String], value: V, uri: Uri, extraHeaders: Header*)(arg0: Encoder[V], arg1: Decoder[R]): F[R]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.patch", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Routers.html#patch[V,R](wrappedAt:Option[String],value:V,uri:org.http4s.Uri,extraHeaders:org.http4s.Header*)(implicitevidence$15:io.circe.Encoder[V],implicitevidence$16:io.circe.Decoder[R]):F[R]", "kind" : "def"}, {"label" : "put", "tail" : "(wrappedAt: Option[String], value: V, uri: Uri, extraHeaders: Header*)(arg0: Encoder[V], arg1: Decoder[R]): F[R]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.put", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Routers.html#put[V,R](wrappedAt:Option[String],value:V,uri:org.http4s.Uri,extraHeaders:org.http4s.Header*)(implicitevidence$13:io.circe.Encoder[V],implicitevidence$14:io.circe.Decoder[R]):F[R]", "kind" : "def"}, {"label" : "getOption", "tail" : "(wrappedAt: Option[String], uri: Uri, extraHeaders: Header*)(arg0: Decoder[R]): F[Option[R]]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.getOption", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Routers.html#getOption[R](wrappedAt:Option[String],uri:org.http4s.Uri,extraHeaders:org.http4s.Header*)(implicitevidence$12:io.circe.Decoder[R]):F[Option[R]]", "kind" : "def"}, {"label" : "get", "tail" : "(wrappedAt: Option[String], uri: Uri, extraHeaders: Header*)(arg0: Decoder[R]): F[R]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.get", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Routers.html#get[R](wrappedAt:Option[String],uri:org.http4s.Uri,extraHeaders:org.http4s.Header*)(implicitevidence$11:io.circe.Decoder[R]):F[R]", "kind" : "def"}, {"label" : "expectOption", "tail" : "(wrappedAt: Option[String], method: Method, uri: Uri, extraHeaders: Header*)(arg0: Decoder[R]): F[Option[R]]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.expectOption", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Routers.html#expectOption[R](wrappedAt:Option[String],method:org.http4s.Method,uri:org.http4s.Uri,extraHeaders:org.http4s.Header*)(implicitevidence$10:io.circe.Decoder[R]):F[Option[R]]", "kind" : "def"}, {"label" : "expect", "tail" : "(wrappedAt: Option[String], method: Method, uri: Uri, extraHeaders: Header*)(arg0: Decoder[R]): F[R]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.expect", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Routers.html#expect[R](wrappedAt:Option[String],method:org.http4s.Method,uri:org.http4s.Uri,extraHeaders:org.http4s.Header*)(implicitevidence$9:io.circe.Decoder[R]):F[R]", "kind" : "def"}, {"label" : "expectOption", "tail" : "(wrappedAt: Option[String], method: Method, value: B, uri: Uri, extraHeaders: Header*)(arg0: Encoder[B], arg1: Decoder[R]): F[Option[R]]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.expectOption", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Routers.html#expectOption[B,R](wrappedAt:Option[String],method:org.http4s.Method,value:B,uri:org.http4s.Uri,extraHeaders:org.http4s.Header*)(implicitevidence$7:io.circe.Encoder[B],implicitevidence$8:io.circe.Decoder[R]):F[Option[R]]", "kind" : "def"}, {"label" : "expect", "tail" : "(wrappedAt: Option[String], method: Method, value: V, uri: Uri, extraHeaders: Header*)(arg0: Encoder[V], arg1: Decoder[R]): F[R]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.expect", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Routers.html#expect[V,R](wrappedAt:Option[String],method:org.http4s.Method,value:V,uri:org.http4s.Uri,extraHeaders:org.http4s.Header*)(implicitevidence$5:io.circe.Encoder[V],implicitevidence$6:io.circe.Decoder[R]):F[R]", "kind" : "def"}, {"label" : "expectOptionUnwrapped", "tail" : "(wrappedAt: Option[String], request: F[Request[F]])(arg0: Decoder[R]): F[Option[R]]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.expectOptionUnwrapped", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Routers.html#expectOptionUnwrapped[R](wrappedAt:Option[String],request:F[org.http4s.Request[F]])(implicitevidence$4:io.circe.Decoder[R]):F[Option[R]]", "kind" : "def"}, {"label" : "expectUnwrapped", "tail" : "(wrappedAt: Option[String], request: F[Request[F]])(arg0: Decoder[R]): F[R]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.expectUnwrapped", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Routers.html#expectUnwrapped[R](wrappedAt:Option[String],request:F[org.http4s.Request[F]])(implicitevidence$3:io.circe.Decoder[R]):F[R]", "kind" : "def"}, {"label" : "wrapped", "tail" : "(at: Option[String])(encoder: Encoder[R]): EntityEncoder[F, R]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.wrapped", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Routers.html#wrapped[R](at:Option[String])(implicitencoder:io.circe.Encoder[R]):org.http4s.EntityEncoder[F,R]", "kind" : "def"}, {"label" : "unwrapped", "tail" : "(at: Option[String])(decoder: Decoder[R]): EntityDecoder[F, R]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.unwrapped", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Routers.html#unwrapped[R](at:Option[String])(implicitdecoder:io.circe.Decoder[R]):org.http4s.EntityDecoder[F,R]", "kind" : "def"}, {"label" : "void", "tail" : ": EntityDecoder[F, Unit]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.void", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Routers.html#void:org.http4s.EntityDecoder[F,Unit]", "kind" : "implicit val"}, {"label" : "jsonDecoder", "tail" : "(arg0: Decoder[A]): EntityDecoder[F, A]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.jsonDecoder", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Routers.html#jsonDecoder[A](implicitevidence$2:io.circe.Decoder[A]):org.http4s.EntityDecoder[F,A]", "kind" : "implicit def"}, {"label" : "jsonEncoder", "tail" : "(arg0: Encoder[A]): EntityEncoder[F, A]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.jsonEncoder", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Routers.html#jsonEncoder[A](implicitevidence$1:io.circe.Encoder[A]):org.http4s.EntityEncoder[F,A]", "kind" : "implicit def"}, {"label" : "jsonPrinter", "tail" : ": Printer", "member" : "pt.tecnico.dsi.openstack.common.services.Service.jsonPrinter", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Routers.html#jsonPrinter:io.circe.Printer", "kind" : "val"}, {"label" : "dsl", "tail" : ": Http4sClientDsl[F]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.dsl", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Routers.html#dsl:org.http4s.client.dsl.Http4sClientDsl[F]", "kind" : "val"}, {"label" : "F", "tail" : ": Sync[F]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.F", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Routers.html#F:cats.effect.Sync[F]", "kind" : "implicit val"}, {"label" : "client", "tail" : ": Client[F]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.client", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Routers.html#client:org.http4s.client.Client[F]", "kind" : "implicit val"}, {"label" : "authToken", "tail" : ": Header", "member" : "pt.tecnico.dsi.openstack.common.services.Service.authToken", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Routers.html#authToken:org.http4s.Header", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Routers.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Routers.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Routers.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Routers.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Routers.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Routers.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Routers.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Routers.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Routers.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Routers.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Routers.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Routers.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Routers.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Routers.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Routers.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Routers.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Routers.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Routers.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Routers.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Routers.html", "kind" : "class"}, {"name" : "pt.tecnico.dsi.openstack.neutron.services.SecurityGroupRules", "shortDescription" : "", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroupRules.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroupRules.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (SecurityGroupRules[F]) => Boolean, msg: => Any): SecurityGroupRules[F]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroupRules.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (SecurityGroupRules[F]) => Boolean): SecurityGroupRules[F]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroupRules.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): SecurityGroupRules[F]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroupRules.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): SecurityGroupRules[F]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroupRules.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (SecurityGroupRules[F], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroupRules.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (SecurityGroupRules[F], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroupRules.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "delete", "tail" : "(id: String): F[Unit]", "member" : "pt.tecnico.dsi.openstack.neutron.services.SecurityGroupRules.delete", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroupRules.html#delete(id:String):F[Unit]", "kind" : "def"}, {"label" : "delete", "tail" : "(rule: SecurityGroupRule): F[Unit]", "member" : "pt.tecnico.dsi.openstack.neutron.services.SecurityGroupRules.delete", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroupRules.html#delete(rule:pt.tecnico.dsi.openstack.neutron.models.SecurityGroupRule):F[Unit]", "kind" : "def"}, {"label" : "apply", "tail" : "(id: String): F[SecurityGroupRule]", "member" : "pt.tecnico.dsi.openstack.neutron.services.SecurityGroupRules.apply", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroupRules.html#apply(id:String):F[pt.tecnico.dsi.openstack.neutron.models.SecurityGroupRule]", "kind" : "def"}, {"label" : "get", "tail" : "(id: String): F[Option[SecurityGroupRule]]", "member" : "pt.tecnico.dsi.openstack.neutron.services.SecurityGroupRules.get", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroupRules.html#get(id:String):F[Option[pt.tecnico.dsi.openstack.neutron.models.SecurityGroupRule]]", "kind" : "def"}, {"label" : "createWithDeduplication", "tail" : "(create: Create, extraHeaders: Header*): F[SecurityGroupRule]", "member" : "pt.tecnico.dsi.openstack.neutron.services.SecurityGroupRules.createWithDeduplication", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroupRules.html#createWithDeduplication(create:pt.tecnico.dsi.openstack.neutron.models.SecurityGroupRule.Create,extraHeaders:org.http4s.Header*):F[pt.tecnico.dsi.openstack.neutron.models.SecurityGroupRule]", "kind" : "def"}, {"label" : "create", "tail" : "(create: Create, extraHeaders: Header*): F[SecurityGroupRule]", "member" : "pt.tecnico.dsi.openstack.neutron.services.SecurityGroupRules.create", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroupRules.html#create(create:pt.tecnico.dsi.openstack.neutron.models.SecurityGroupRule.Create,extraHeaders:org.http4s.Header*):F[pt.tecnico.dsi.openstack.neutron.models.SecurityGroupRule]", "kind" : "def"}, {"label" : "list", "tail" : "(query: Query): F[List[SecurityGroupRule]]", "member" : "pt.tecnico.dsi.openstack.neutron.services.SecurityGroupRules.list", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroupRules.html#list(query:org.http4s.Query):F[List[pt.tecnico.dsi.openstack.neutron.models.SecurityGroupRule]]", "kind" : "def"}, {"label" : "list", "tail" : "(pairs: (String, String)*): F[List[SecurityGroupRule]]", "member" : "pt.tecnico.dsi.openstack.neutron.services.SecurityGroupRules.list", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroupRules.html#list(pairs:(String,String)*):F[List[pt.tecnico.dsi.openstack.neutron.models.SecurityGroupRule]]", "kind" : "def"}, {"label" : "stream", "tail" : "(query: Query): Stream[F, SecurityGroupRule]", "member" : "pt.tecnico.dsi.openstack.neutron.services.SecurityGroupRules.stream", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroupRules.html#stream(query:org.http4s.Query):fs2.Stream[F,pt.tecnico.dsi.openstack.neutron.models.SecurityGroupRule]", "kind" : "def"}, {"label" : "stream", "tail" : "(pairs: (String, String)*): Stream[F, SecurityGroupRule]", "member" : "pt.tecnico.dsi.openstack.neutron.services.SecurityGroupRules.stream", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroupRules.html#stream(pairs:(String,String)*):fs2.Stream[F,pt.tecnico.dsi.openstack.neutron.models.SecurityGroupRule]", "kind" : "def"}, {"label" : "wrappedAt", "tail" : ": Option[String]", "member" : "pt.tecnico.dsi.openstack.neutron.services.SecurityGroupRules.wrappedAt", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroupRules.html#wrappedAt:Option[String]", "kind" : "val"}, {"label" : "uri", "tail" : ": Uri", "member" : "pt.tecnico.dsi.openstack.neutron.services.SecurityGroupRules.uri", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroupRules.html#uri:org.http4s.Uri", "kind" : "val"}, {"label" : "pluralName", "tail" : ": String", "member" : "pt.tecnico.dsi.openstack.neutron.services.SecurityGroupRules.pluralName", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroupRules.html#pluralName:String", "kind" : "val"}, {"label" : "name", "tail" : ": String", "member" : "pt.tecnico.dsi.openstack.neutron.services.SecurityGroupRules.name", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroupRules.html#name:String", "kind" : "val"}, {"member" : "pt.tecnico.dsi.openstack.neutron.services.SecurityGroupRules#<init>", "error" : "unsupported entity"}, {"label" : "defaultOnError", "tail" : "(response: Response[F]): F[R]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.defaultOnError", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroupRules.html#defaultOnError[R](response:org.http4s.Response[F]):F[R]", "kind" : "def"}, {"label" : "delete", "tail" : "(uri: Uri, extraHeaders: Header*): F[Unit]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.delete", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroupRules.html#delete(uri:org.http4s.Uri,extraHeaders:org.http4s.Header*):F[Unit]", "kind" : "def"}, {"label" : "list", "tail" : "(wrappedAt: String, uri: Uri, extraHeaders: Header*)(arg0: Decoder[R]): F[List[R]]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.list", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroupRules.html#list[R](wrappedAt:String,uri:org.http4s.Uri,extraHeaders:org.http4s.Header*)(implicitevidence$25:io.circe.Decoder[R]):F[List[R]]", "kind" : "def"}, {"label" : "stream", "tail" : "(wrappedAt: String, uri: Uri, extraHeaders: Header*)(arg0: Decoder[R]): Stream[F, R]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.stream", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroupRules.html#stream[R](wrappedAt:String,uri:org.http4s.Uri,extraHeaders:org.http4s.Header*)(implicitevidence$24:io.circe.Decoder[R]):fs2.Stream[F,R]", "kind" : "def"}, {"label" : "postHandleConflictWithError", "tail" : "(wrappedAt: Option[String], value: V, uri: Uri, extraHeaders: Seq[Header])(onConflict: \/=>[E, F[R]])(arg0: Encoder[V], arg1: Decoder[R], arg2: Decoder[E]): F[R]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.postHandleConflictWithError", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroupRules.html#postHandleConflictWithError[V,R,E<:Throwable](wrappedAt:Option[String],value:V,uri:org.http4s.Uri,extraHeaders:Seq[org.http4s.Header])(onConflict:E\/=>F[R])(implicitevidence$21:io.circe.Encoder[V],implicitevidence$22:io.circe.Decoder[R],implicitevidence$23:io.circe.Decoder[E]):F[R]", "kind" : "def"}, {"label" : "\/=>", "tail" : "", "member" : "pt.tecnico.dsi.openstack.common.services.Service.\/=>", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroupRules.html#\/=>[-T,+R]=PartialFunction[T,R]", "kind" : "type"}, {"label" : "postHandleConflict", "tail" : "(wrappedAt: Option[String], value: V, uri: Uri, extraHeaders: Seq[Header])(onConflict: F[R])(arg0: Encoder[V], arg1: Decoder[R]): F[R]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.postHandleConflict", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroupRules.html#postHandleConflict[V,R](wrappedAt:Option[String],value:V,uri:org.http4s.Uri,extraHeaders:Seq[org.http4s.Header])(onConflict:F[R])(implicitevidence$19:io.circe.Encoder[V],implicitevidence$20:io.circe.Decoder[R]):F[R]", "kind" : "def"}, {"label" : "post", "tail" : "(wrappedAt: Option[String], value: V, uri: Uri, extraHeaders: Header*)(arg0: Encoder[V], arg1: Decoder[R]): F[R]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.post", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroupRules.html#post[V,R](wrappedAt:Option[String],value:V,uri:org.http4s.Uri,extraHeaders:org.http4s.Header*)(implicitevidence$17:io.circe.Encoder[V],implicitevidence$18:io.circe.Decoder[R]):F[R]", "kind" : "def"}, {"label" : "patch", "tail" : "(wrappedAt: Option[String], value: V, uri: Uri, extraHeaders: Header*)(arg0: Encoder[V], arg1: Decoder[R]): F[R]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.patch", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroupRules.html#patch[V,R](wrappedAt:Option[String],value:V,uri:org.http4s.Uri,extraHeaders:org.http4s.Header*)(implicitevidence$15:io.circe.Encoder[V],implicitevidence$16:io.circe.Decoder[R]):F[R]", "kind" : "def"}, {"label" : "put", "tail" : "(wrappedAt: Option[String], value: V, uri: Uri, extraHeaders: Header*)(arg0: Encoder[V], arg1: Decoder[R]): F[R]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.put", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroupRules.html#put[V,R](wrappedAt:Option[String],value:V,uri:org.http4s.Uri,extraHeaders:org.http4s.Header*)(implicitevidence$13:io.circe.Encoder[V],implicitevidence$14:io.circe.Decoder[R]):F[R]", "kind" : "def"}, {"label" : "getOption", "tail" : "(wrappedAt: Option[String], uri: Uri, extraHeaders: Header*)(arg0: Decoder[R]): F[Option[R]]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.getOption", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroupRules.html#getOption[R](wrappedAt:Option[String],uri:org.http4s.Uri,extraHeaders:org.http4s.Header*)(implicitevidence$12:io.circe.Decoder[R]):F[Option[R]]", "kind" : "def"}, {"label" : "get", "tail" : "(wrappedAt: Option[String], uri: Uri, extraHeaders: Header*)(arg0: Decoder[R]): F[R]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.get", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroupRules.html#get[R](wrappedAt:Option[String],uri:org.http4s.Uri,extraHeaders:org.http4s.Header*)(implicitevidence$11:io.circe.Decoder[R]):F[R]", "kind" : "def"}, {"label" : "expectOption", "tail" : "(wrappedAt: Option[String], method: Method, uri: Uri, extraHeaders: Header*)(arg0: Decoder[R]): F[Option[R]]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.expectOption", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroupRules.html#expectOption[R](wrappedAt:Option[String],method:org.http4s.Method,uri:org.http4s.Uri,extraHeaders:org.http4s.Header*)(implicitevidence$10:io.circe.Decoder[R]):F[Option[R]]", "kind" : "def"}, {"label" : "expect", "tail" : "(wrappedAt: Option[String], method: Method, uri: Uri, extraHeaders: Header*)(arg0: Decoder[R]): F[R]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.expect", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroupRules.html#expect[R](wrappedAt:Option[String],method:org.http4s.Method,uri:org.http4s.Uri,extraHeaders:org.http4s.Header*)(implicitevidence$9:io.circe.Decoder[R]):F[R]", "kind" : "def"}, {"label" : "expectOption", "tail" : "(wrappedAt: Option[String], method: Method, value: B, uri: Uri, extraHeaders: Header*)(arg0: Encoder[B], arg1: Decoder[R]): F[Option[R]]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.expectOption", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroupRules.html#expectOption[B,R](wrappedAt:Option[String],method:org.http4s.Method,value:B,uri:org.http4s.Uri,extraHeaders:org.http4s.Header*)(implicitevidence$7:io.circe.Encoder[B],implicitevidence$8:io.circe.Decoder[R]):F[Option[R]]", "kind" : "def"}, {"label" : "expect", "tail" : "(wrappedAt: Option[String], method: Method, value: V, uri: Uri, extraHeaders: Header*)(arg0: Encoder[V], arg1: Decoder[R]): F[R]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.expect", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroupRules.html#expect[V,R](wrappedAt:Option[String],method:org.http4s.Method,value:V,uri:org.http4s.Uri,extraHeaders:org.http4s.Header*)(implicitevidence$5:io.circe.Encoder[V],implicitevidence$6:io.circe.Decoder[R]):F[R]", "kind" : "def"}, {"label" : "expectOptionUnwrapped", "tail" : "(wrappedAt: Option[String], request: F[Request[F]])(arg0: Decoder[R]): F[Option[R]]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.expectOptionUnwrapped", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroupRules.html#expectOptionUnwrapped[R](wrappedAt:Option[String],request:F[org.http4s.Request[F]])(implicitevidence$4:io.circe.Decoder[R]):F[Option[R]]", "kind" : "def"}, {"label" : "expectUnwrapped", "tail" : "(wrappedAt: Option[String], request: F[Request[F]])(arg0: Decoder[R]): F[R]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.expectUnwrapped", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroupRules.html#expectUnwrapped[R](wrappedAt:Option[String],request:F[org.http4s.Request[F]])(implicitevidence$3:io.circe.Decoder[R]):F[R]", "kind" : "def"}, {"label" : "wrapped", "tail" : "(at: Option[String])(encoder: Encoder[R]): EntityEncoder[F, R]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.wrapped", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroupRules.html#wrapped[R](at:Option[String])(implicitencoder:io.circe.Encoder[R]):org.http4s.EntityEncoder[F,R]", "kind" : "def"}, {"label" : "unwrapped", "tail" : "(at: Option[String])(decoder: Decoder[R]): EntityDecoder[F, R]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.unwrapped", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroupRules.html#unwrapped[R](at:Option[String])(implicitdecoder:io.circe.Decoder[R]):org.http4s.EntityDecoder[F,R]", "kind" : "def"}, {"label" : "void", "tail" : ": EntityDecoder[F, Unit]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.void", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroupRules.html#void:org.http4s.EntityDecoder[F,Unit]", "kind" : "implicit val"}, {"label" : "jsonDecoder", "tail" : "(arg0: Decoder[A]): EntityDecoder[F, A]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.jsonDecoder", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroupRules.html#jsonDecoder[A](implicitevidence$2:io.circe.Decoder[A]):org.http4s.EntityDecoder[F,A]", "kind" : "implicit def"}, {"label" : "jsonEncoder", "tail" : "(arg0: Encoder[A]): EntityEncoder[F, A]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.jsonEncoder", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroupRules.html#jsonEncoder[A](implicitevidence$1:io.circe.Encoder[A]):org.http4s.EntityEncoder[F,A]", "kind" : "implicit def"}, {"label" : "jsonPrinter", "tail" : ": Printer", "member" : "pt.tecnico.dsi.openstack.common.services.Service.jsonPrinter", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroupRules.html#jsonPrinter:io.circe.Printer", "kind" : "val"}, {"label" : "dsl", "tail" : ": Http4sClientDsl[F]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.dsl", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroupRules.html#dsl:org.http4s.client.dsl.Http4sClientDsl[F]", "kind" : "val"}, {"label" : "F", "tail" : ": Sync[F]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.F", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroupRules.html#F:cats.effect.Sync[F]", "kind" : "implicit val"}, {"label" : "client", "tail" : ": Client[F]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.client", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroupRules.html#client:org.http4s.client.Client[F]", "kind" : "implicit val"}, {"label" : "authToken", "tail" : ": Header", "member" : "pt.tecnico.dsi.openstack.common.services.Service.authToken", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroupRules.html#authToken:org.http4s.Header", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroupRules.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroupRules.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroupRules.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroupRules.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroupRules.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroupRules.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroupRules.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroupRules.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroupRules.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroupRules.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroupRules.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroupRules.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroupRules.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroupRules.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroupRules.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroupRules.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroupRules.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroupRules.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroupRules.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroupRules.html", "kind" : "class"}, {"name" : "pt.tecnico.dsi.openstack.neutron.services.SecurityGroups", "shortDescription" : "", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroups.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroups.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (SecurityGroups[F]) => Boolean, msg: => Any): SecurityGroups[F]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroups.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (SecurityGroups[F]) => Boolean): SecurityGroups[F]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroups.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): SecurityGroups[F]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroups.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): SecurityGroups[F]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroups.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (SecurityGroups[F], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroups.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (SecurityGroups[F], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroups.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "createOrUpdate", "tail" : "(create: Create, keepExistingElements: Boolean, extraHeaders: Seq[Header])(resolveConflict: (SecurityGroup, Create) => F[SecurityGroup]): F[SecurityGroup]", "member" : "pt.tecnico.dsi.openstack.neutron.services.SecurityGroups.createOrUpdate", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroups.html#createOrUpdate(create:pt.tecnico.dsi.openstack.neutron.models.SecurityGroup.Create,keepExistingElements:Boolean,extraHeaders:Seq[org.http4s.Header])(resolveConflict:(pt.tecnico.dsi.openstack.neutron.models.SecurityGroup,pt.tecnico.dsi.openstack.neutron.models.SecurityGroup.Create)=>F[pt.tecnico.dsi.openstack.neutron.models.SecurityGroup]):F[pt.tecnico.dsi.openstack.neutron.models.SecurityGroup]", "kind" : "def"}, {"label" : "defaultResolveConflict", "tail" : "(existing: SecurityGroup, create: Create, keepExistingElements: Boolean, extraHeaders: Seq[Header]): F[SecurityGroup]", "member" : "pt.tecnico.dsi.openstack.neutron.services.SecurityGroups.defaultResolveConflict", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroups.html#defaultResolveConflict(existing:pt.tecnico.dsi.openstack.neutron.models.SecurityGroup,create:pt.tecnico.dsi.openstack.neutron.models.SecurityGroup.Create,keepExistingElements:Boolean,extraHeaders:Seq[org.http4s.Header]):F[pt.tecnico.dsi.openstack.neutron.models.SecurityGroup]", "kind" : "def"}, {"member" : "pt.tecnico.dsi.openstack.neutron.services.SecurityGroups#<init>", "error" : "unsupported entity"}, {"label" : "apply", "tail" : "(id: String, update: Update, extraHeaders: Header*): F[SecurityGroup]", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.apply", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroups.html#apply(id:String,update:Update,extraHeaders:org.http4s.Header*):F[Model]", "kind" : "def"}, {"label" : "apply", "tail" : "(create: Create, extraHeaders: Header*): F[SecurityGroup]", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.apply", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroups.html#apply(create:Create,extraHeaders:org.http4s.Header*):F[Model]", "kind" : "def"}, {"label" : "delete", "tail" : "(id: String, extraHeaders: Header*): F[Unit]", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.delete", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroups.html#delete(id:String,extraHeaders:org.http4s.Header*):F[Unit]", "kind" : "def"}, {"label" : "delete", "tail" : "(model: SecurityGroup, extraHeaders: Header*): F[Unit]", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.delete", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroups.html#delete(model:Model,extraHeaders:org.http4s.Header*):F[Unit]", "kind" : "def"}, {"label" : "update", "tail" : "(id: String, update: Update, extraHeaders: Header*): F[SecurityGroup]", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.update", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroups.html#update(id:String,update:Update,extraHeaders:org.http4s.Header*):F[Model]", "kind" : "def"}, {"label" : "apply", "tail" : "(id: String, extraHeaders: Header*): F[SecurityGroup]", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.apply", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroups.html#apply(id:String,extraHeaders:org.http4s.Header*):F[Model]", "kind" : "def"}, {"label" : "get", "tail" : "(id: String, extraHeaders: Header*): F[Option[SecurityGroup]]", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.get", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroups.html#get(id:String,extraHeaders:org.http4s.Header*):F[Option[Model]]", "kind" : "def"}, {"label" : "createHandleConflictWithError", "tail" : "(create: Create, uri: Uri, extraHeaders: Seq[Header])(onConflict: \/=>[E, F[SecurityGroup]])(arg0: Decoder[E]): F[SecurityGroup]", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.createHandleConflictWithError", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroups.html#createHandleConflictWithError[E<:Throwable](create:Create,uri:org.http4s.Uri,extraHeaders:Seq[org.http4s.Header])(onConflict:E\/=>F[Model])(implicitevidence$3:io.circe.Decoder[E]):F[Model]", "kind" : "def"}, {"label" : "createHandleConflict", "tail" : "(create: Create, uri: Uri, extraHeaders: Seq[Header])(onConflict: F[SecurityGroup]): F[SecurityGroup]", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.createHandleConflict", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroups.html#createHandleConflict(create:Create,uri:org.http4s.Uri,extraHeaders:Seq[org.http4s.Header])(onConflict:F[Model]):F[Model]", "kind" : "def"}, {"label" : "createOrUpdate", "tail" : "(create: Create, keepExistingElements: Boolean, extraHeaders: Header*): F[SecurityGroup]", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.createOrUpdate", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroups.html#createOrUpdate(create:Create,keepExistingElements:Boolean,extraHeaders:org.http4s.Header*):F[Model]", "kind" : "def"}, {"label" : "createOrUpdate", "tail" : "(create: Create, extraHeaders: Header*): F[SecurityGroup]", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.createOrUpdate", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroups.html#createOrUpdate(create:Create,extraHeaders:org.http4s.Header*):F[Model]", "kind" : "def"}, {"label" : "create", "tail" : "(create: Create, extraHeaders: Header*): F[SecurityGroup]", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.create", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroups.html#create(create:Create,extraHeaders:org.http4s.Header*):F[Model]", "kind" : "def"}, {"label" : "list", "tail" : "(query: Query, extraHeaders: Header*): F[List[SecurityGroup]]", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.list", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroups.html#list(query:org.http4s.Query,extraHeaders:org.http4s.Header*):F[List[Model]]", "kind" : "def"}, {"label" : "list", "tail" : "(pairs: (String, String)*): F[List[SecurityGroup]]", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.list", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroups.html#list(pairs:(String,String)*):F[List[Model]]", "kind" : "def"}, {"label" : "stream", "tail" : "(query: Query, extraHeaders: Header*): Stream[F, SecurityGroup]", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.stream", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroups.html#stream(query:org.http4s.Query,extraHeaders:org.http4s.Header*):fs2.Stream[F,Model]", "kind" : "def"}, {"label" : "stream", "tail" : "(pairs: (String, String)*): Stream[F, SecurityGroup]", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.stream", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroups.html#stream(pairs:(String,String)*):fs2.Stream[F,Model]", "kind" : "def"}, {"label" : "wrappedAt", "tail" : ": Option[String]", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.wrappedAt", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroups.html#wrappedAt:Option[String]", "kind" : "val"}, {"label" : "uri", "tail" : ": Uri", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.uri", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroups.html#uri:org.http4s.Uri", "kind" : "val"}, {"label" : "pluralName", "tail" : ": String", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.pluralName", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroups.html#pluralName:String", "kind" : "val"}, {"label" : "updateEncoder", "tail" : ": Encoder[Update]", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.updateEncoder", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroups.html#updateEncoder:io.circe.Encoder[Update]", "kind" : "implicit val"}, {"label" : "createEncoder", "tail" : ": Encoder[Create]", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.createEncoder", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroups.html#createEncoder:io.circe.Encoder[Create]", "kind" : "implicit val"}, {"label" : "modelDecoder", "tail" : ": Decoder[SecurityGroup]", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.modelDecoder", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroups.html#modelDecoder:io.circe.Decoder[Model]", "kind" : "implicit val"}, {"label" : "name", "tail" : ": String", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.name", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroups.html#name:String", "kind" : "val"}, {"label" : "defaultOnError", "tail" : "(response: Response[F]): F[R]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.defaultOnError", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroups.html#defaultOnError[R](response:org.http4s.Response[F]):F[R]", "kind" : "def"}, {"label" : "delete", "tail" : "(uri: Uri, extraHeaders: Header*): F[Unit]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.delete", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroups.html#delete(uri:org.http4s.Uri,extraHeaders:org.http4s.Header*):F[Unit]", "kind" : "def"}, {"label" : "list", "tail" : "(wrappedAt: String, uri: Uri, extraHeaders: Header*)(arg0: Decoder[R]): F[List[R]]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.list", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroups.html#list[R](wrappedAt:String,uri:org.http4s.Uri,extraHeaders:org.http4s.Header*)(implicitevidence$25:io.circe.Decoder[R]):F[List[R]]", "kind" : "def"}, {"label" : "stream", "tail" : "(wrappedAt: String, uri: Uri, extraHeaders: Header*)(arg0: Decoder[R]): Stream[F, R]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.stream", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroups.html#stream[R](wrappedAt:String,uri:org.http4s.Uri,extraHeaders:org.http4s.Header*)(implicitevidence$24:io.circe.Decoder[R]):fs2.Stream[F,R]", "kind" : "def"}, {"label" : "postHandleConflictWithError", "tail" : "(wrappedAt: Option[String], value: V, uri: Uri, extraHeaders: Seq[Header])(onConflict: \/=>[E, F[R]])(arg0: Encoder[V], arg1: Decoder[R], arg2: Decoder[E]): F[R]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.postHandleConflictWithError", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroups.html#postHandleConflictWithError[V,R,E<:Throwable](wrappedAt:Option[String],value:V,uri:org.http4s.Uri,extraHeaders:Seq[org.http4s.Header])(onConflict:E\/=>F[R])(implicitevidence$21:io.circe.Encoder[V],implicitevidence$22:io.circe.Decoder[R],implicitevidence$23:io.circe.Decoder[E]):F[R]", "kind" : "def"}, {"label" : "\/=>", "tail" : "", "member" : "pt.tecnico.dsi.openstack.common.services.Service.\/=>", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroups.html#\/=>[-T,+R]=PartialFunction[T,R]", "kind" : "type"}, {"label" : "postHandleConflict", "tail" : "(wrappedAt: Option[String], value: V, uri: Uri, extraHeaders: Seq[Header])(onConflict: F[R])(arg0: Encoder[V], arg1: Decoder[R]): F[R]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.postHandleConflict", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroups.html#postHandleConflict[V,R](wrappedAt:Option[String],value:V,uri:org.http4s.Uri,extraHeaders:Seq[org.http4s.Header])(onConflict:F[R])(implicitevidence$19:io.circe.Encoder[V],implicitevidence$20:io.circe.Decoder[R]):F[R]", "kind" : "def"}, {"label" : "post", "tail" : "(wrappedAt: Option[String], value: V, uri: Uri, extraHeaders: Header*)(arg0: Encoder[V], arg1: Decoder[R]): F[R]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.post", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroups.html#post[V,R](wrappedAt:Option[String],value:V,uri:org.http4s.Uri,extraHeaders:org.http4s.Header*)(implicitevidence$17:io.circe.Encoder[V],implicitevidence$18:io.circe.Decoder[R]):F[R]", "kind" : "def"}, {"label" : "patch", "tail" : "(wrappedAt: Option[String], value: V, uri: Uri, extraHeaders: Header*)(arg0: Encoder[V], arg1: Decoder[R]): F[R]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.patch", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroups.html#patch[V,R](wrappedAt:Option[String],value:V,uri:org.http4s.Uri,extraHeaders:org.http4s.Header*)(implicitevidence$15:io.circe.Encoder[V],implicitevidence$16:io.circe.Decoder[R]):F[R]", "kind" : "def"}, {"label" : "put", "tail" : "(wrappedAt: Option[String], value: V, uri: Uri, extraHeaders: Header*)(arg0: Encoder[V], arg1: Decoder[R]): F[R]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.put", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroups.html#put[V,R](wrappedAt:Option[String],value:V,uri:org.http4s.Uri,extraHeaders:org.http4s.Header*)(implicitevidence$13:io.circe.Encoder[V],implicitevidence$14:io.circe.Decoder[R]):F[R]", "kind" : "def"}, {"label" : "getOption", "tail" : "(wrappedAt: Option[String], uri: Uri, extraHeaders: Header*)(arg0: Decoder[R]): F[Option[R]]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.getOption", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroups.html#getOption[R](wrappedAt:Option[String],uri:org.http4s.Uri,extraHeaders:org.http4s.Header*)(implicitevidence$12:io.circe.Decoder[R]):F[Option[R]]", "kind" : "def"}, {"label" : "get", "tail" : "(wrappedAt: Option[String], uri: Uri, extraHeaders: Header*)(arg0: Decoder[R]): F[R]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.get", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroups.html#get[R](wrappedAt:Option[String],uri:org.http4s.Uri,extraHeaders:org.http4s.Header*)(implicitevidence$11:io.circe.Decoder[R]):F[R]", "kind" : "def"}, {"label" : "expectOption", "tail" : "(wrappedAt: Option[String], method: Method, uri: Uri, extraHeaders: Header*)(arg0: Decoder[R]): F[Option[R]]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.expectOption", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroups.html#expectOption[R](wrappedAt:Option[String],method:org.http4s.Method,uri:org.http4s.Uri,extraHeaders:org.http4s.Header*)(implicitevidence$10:io.circe.Decoder[R]):F[Option[R]]", "kind" : "def"}, {"label" : "expect", "tail" : "(wrappedAt: Option[String], method: Method, uri: Uri, extraHeaders: Header*)(arg0: Decoder[R]): F[R]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.expect", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroups.html#expect[R](wrappedAt:Option[String],method:org.http4s.Method,uri:org.http4s.Uri,extraHeaders:org.http4s.Header*)(implicitevidence$9:io.circe.Decoder[R]):F[R]", "kind" : "def"}, {"label" : "expectOption", "tail" : "(wrappedAt: Option[String], method: Method, value: B, uri: Uri, extraHeaders: Header*)(arg0: Encoder[B], arg1: Decoder[R]): F[Option[R]]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.expectOption", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroups.html#expectOption[B,R](wrappedAt:Option[String],method:org.http4s.Method,value:B,uri:org.http4s.Uri,extraHeaders:org.http4s.Header*)(implicitevidence$7:io.circe.Encoder[B],implicitevidence$8:io.circe.Decoder[R]):F[Option[R]]", "kind" : "def"}, {"label" : "expect", "tail" : "(wrappedAt: Option[String], method: Method, value: V, uri: Uri, extraHeaders: Header*)(arg0: Encoder[V], arg1: Decoder[R]): F[R]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.expect", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroups.html#expect[V,R](wrappedAt:Option[String],method:org.http4s.Method,value:V,uri:org.http4s.Uri,extraHeaders:org.http4s.Header*)(implicitevidence$5:io.circe.Encoder[V],implicitevidence$6:io.circe.Decoder[R]):F[R]", "kind" : "def"}, {"label" : "expectOptionUnwrapped", "tail" : "(wrappedAt: Option[String], request: F[Request[F]])(arg0: Decoder[R]): F[Option[R]]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.expectOptionUnwrapped", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroups.html#expectOptionUnwrapped[R](wrappedAt:Option[String],request:F[org.http4s.Request[F]])(implicitevidence$4:io.circe.Decoder[R]):F[Option[R]]", "kind" : "def"}, {"label" : "expectUnwrapped", "tail" : "(wrappedAt: Option[String], request: F[Request[F]])(arg0: Decoder[R]): F[R]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.expectUnwrapped", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroups.html#expectUnwrapped[R](wrappedAt:Option[String],request:F[org.http4s.Request[F]])(implicitevidence$3:io.circe.Decoder[R]):F[R]", "kind" : "def"}, {"label" : "wrapped", "tail" : "(at: Option[String])(encoder: Encoder[R]): EntityEncoder[F, R]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.wrapped", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroups.html#wrapped[R](at:Option[String])(implicitencoder:io.circe.Encoder[R]):org.http4s.EntityEncoder[F,R]", "kind" : "def"}, {"label" : "unwrapped", "tail" : "(at: Option[String])(decoder: Decoder[R]): EntityDecoder[F, R]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.unwrapped", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroups.html#unwrapped[R](at:Option[String])(implicitdecoder:io.circe.Decoder[R]):org.http4s.EntityDecoder[F,R]", "kind" : "def"}, {"label" : "void", "tail" : ": EntityDecoder[F, Unit]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.void", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroups.html#void:org.http4s.EntityDecoder[F,Unit]", "kind" : "implicit val"}, {"label" : "jsonDecoder", "tail" : "(arg0: Decoder[A]): EntityDecoder[F, A]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.jsonDecoder", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroups.html#jsonDecoder[A](implicitevidence$2:io.circe.Decoder[A]):org.http4s.EntityDecoder[F,A]", "kind" : "implicit def"}, {"label" : "jsonEncoder", "tail" : "(arg0: Encoder[A]): EntityEncoder[F, A]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.jsonEncoder", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroups.html#jsonEncoder[A](implicitevidence$1:io.circe.Encoder[A]):org.http4s.EntityEncoder[F,A]", "kind" : "implicit def"}, {"label" : "jsonPrinter", "tail" : ": Printer", "member" : "pt.tecnico.dsi.openstack.common.services.Service.jsonPrinter", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroups.html#jsonPrinter:io.circe.Printer", "kind" : "val"}, {"label" : "dsl", "tail" : ": Http4sClientDsl[F]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.dsl", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroups.html#dsl:org.http4s.client.dsl.Http4sClientDsl[F]", "kind" : "val"}, {"label" : "F", "tail" : ": Sync[F]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.F", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroups.html#F:cats.effect.Sync[F]", "kind" : "implicit val"}, {"label" : "client", "tail" : ": Client[F]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.client", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroups.html#client:org.http4s.client.Client[F]", "kind" : "implicit val"}, {"label" : "authToken", "tail" : ": Header", "member" : "pt.tecnico.dsi.openstack.common.services.Service.authToken", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroups.html#authToken:org.http4s.Header", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroups.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroups.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroups.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroups.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroups.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroups.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroups.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroups.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroups.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroups.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroups.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroups.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroups.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroups.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroups.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroups.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroups.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroups.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroups.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/SecurityGroups.html", "kind" : "class"}, {"name" : "pt.tecnico.dsi.openstack.neutron.services.Subnets", "shortDescription" : "", "members_class" : [{"label" : "compareTo", "tail" : "(that: Subnets[F]): Int", "member" : "scala.math.Ordered.orderingToOrdered.compareTo", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Subnets.html#compareTo(that:A):Int", "kind" : "def"}, {"label" : ">=", "tail" : "(that: Subnets[F]): Boolean", "member" : "scala.math.Ordered.orderingToOrdered.>=", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Subnets.html#>=(that:A):Boolean", "kind" : "def"}, {"label" : "<=", "tail" : "(that: Subnets[F]): Boolean", "member" : "scala.math.Ordered.orderingToOrdered.<=", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Subnets.html#<=(that:A):Boolean", "kind" : "def"}, {"label" : ">", "tail" : "(that: Subnets[F]): Boolean", "member" : "scala.math.Ordered.orderingToOrdered.>", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Subnets.html#>(that:A):Boolean", "kind" : "def"}, {"label" : "<", "tail" : "(that: Subnets[F]): Boolean", "member" : "scala.math.Ordered.orderingToOrdered.<", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Subnets.html#<(that:A):Boolean", "kind" : "def"}, {"label" : "compare", "tail" : "(that: Subnets[F]): Int", "member" : "scala.math.Ordered.orderingToOrdered.compare", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Subnets.html#compare(that:A):Int", "kind" : "def"}, {"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Subnets.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Subnets.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Subnets[F]) => Boolean, msg: => Any): Subnets[F]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Subnets.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Subnets[F]) => Boolean): Subnets[F]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Subnets.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): Subnets[F]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Subnets.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Subnets[F]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Subnets.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Subnets[F], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Subnets.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Subnets[F], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Subnets.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "createOrUpdate", "tail" : "(create: Create[IpAddress], keepExistingElements: Boolean, extraHeaders: Seq[Header])(resolveConflict: (Subnet[IpAddress], Create[IpAddress]) => F[Subnet[IpAddress]]): F[Subnet[IpAddress]]", "member" : "pt.tecnico.dsi.openstack.neutron.services.Subnets.createOrUpdate", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Subnets.html#createOrUpdate(create:pt.tecnico.dsi.openstack.neutron.models.Subnet.Create[com.comcast.ip4s.IpAddress],keepExistingElements:Boolean,extraHeaders:Seq[org.http4s.Header])(resolveConflict:(pt.tecnico.dsi.openstack.neutron.models.Subnet[com.comcast.ip4s.IpAddress],pt.tecnico.dsi.openstack.neutron.models.Subnet.Create[com.comcast.ip4s.IpAddress])=>F[pt.tecnico.dsi.openstack.neutron.models.Subnet[com.comcast.ip4s.IpAddress]]):F[pt.tecnico.dsi.openstack.neutron.models.Subnet[com.comcast.ip4s.IpAddress]]", "kind" : "def"}, {"label" : "defaultResolveConflict", "tail" : "(existing: Subnet[IpAddress], create: Create[IpAddress], keepExistingElements: Boolean, extraHeaders: Seq[Header]): F[Subnet[IpAddress]]", "member" : "pt.tecnico.dsi.openstack.neutron.services.Subnets.defaultResolveConflict", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Subnets.html#defaultResolveConflict(existing:pt.tecnico.dsi.openstack.neutron.models.Subnet[com.comcast.ip4s.IpAddress],create:pt.tecnico.dsi.openstack.neutron.models.Subnet.Create[com.comcast.ip4s.IpAddress],keepExistingElements:Boolean,extraHeaders:Seq[org.http4s.Header]):F[pt.tecnico.dsi.openstack.neutron.models.Subnet[com.comcast.ip4s.IpAddress]]", "kind" : "def"}, {"member" : "pt.tecnico.dsi.openstack.neutron.services.Subnets#<init>", "error" : "unsupported entity"}, {"label" : "create", "tail" : "(values: List[Create[IpAddress]], extraHeaders: Header*): F[List[Subnet[IpAddress]]]", "member" : "pt.tecnico.dsi.openstack.neutron.services.BulkCreate.create", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Subnets.html#create(values:List[Create],extraHeaders:org.http4s.Header*):F[List[Model]]", "kind" : "def"}, {"label" : "apply", "tail" : "(id: String, update: Update[IpAddress], extraHeaders: Header*): F[Subnet[IpAddress]]", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.apply", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Subnets.html#apply(id:String,update:Update,extraHeaders:org.http4s.Header*):F[Model]", "kind" : "def"}, {"label" : "apply", "tail" : "(create: Create[IpAddress], extraHeaders: Header*): F[Subnet[IpAddress]]", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.apply", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Subnets.html#apply(create:Create,extraHeaders:org.http4s.Header*):F[Model]", "kind" : "def"}, {"label" : "delete", "tail" : "(id: String, extraHeaders: Header*): F[Unit]", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.delete", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Subnets.html#delete(id:String,extraHeaders:org.http4s.Header*):F[Unit]", "kind" : "def"}, {"label" : "delete", "tail" : "(model: Subnet[IpAddress], extraHeaders: Header*): F[Unit]", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.delete", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Subnets.html#delete(model:Model,extraHeaders:org.http4s.Header*):F[Unit]", "kind" : "def"}, {"label" : "update", "tail" : "(id: String, update: Update[IpAddress], extraHeaders: Header*): F[Subnet[IpAddress]]", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.update", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Subnets.html#update(id:String,update:Update,extraHeaders:org.http4s.Header*):F[Model]", "kind" : "def"}, {"label" : "apply", "tail" : "(id: String, extraHeaders: Header*): F[Subnet[IpAddress]]", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.apply", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Subnets.html#apply(id:String,extraHeaders:org.http4s.Header*):F[Model]", "kind" : "def"}, {"label" : "get", "tail" : "(id: String, extraHeaders: Header*): F[Option[Subnet[IpAddress]]]", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.get", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Subnets.html#get(id:String,extraHeaders:org.http4s.Header*):F[Option[Model]]", "kind" : "def"}, {"label" : "createHandleConflictWithError", "tail" : "(create: Create[IpAddress], uri: Uri, extraHeaders: Seq[Header])(onConflict: \/=>[E, F[Subnet[IpAddress]]])(arg0: Decoder[E]): F[Subnet[IpAddress]]", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.createHandleConflictWithError", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Subnets.html#createHandleConflictWithError[E<:Throwable](create:Create,uri:org.http4s.Uri,extraHeaders:Seq[org.http4s.Header])(onConflict:E\/=>F[Model])(implicitevidence$3:io.circe.Decoder[E]):F[Model]", "kind" : "def"}, {"label" : "createHandleConflict", "tail" : "(create: Create[IpAddress], uri: Uri, extraHeaders: Seq[Header])(onConflict: F[Subnet[IpAddress]]): F[Subnet[IpAddress]]", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.createHandleConflict", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Subnets.html#createHandleConflict(create:Create,uri:org.http4s.Uri,extraHeaders:Seq[org.http4s.Header])(onConflict:F[Model]):F[Model]", "kind" : "def"}, {"label" : "createOrUpdate", "tail" : "(create: Create[IpAddress], keepExistingElements: Boolean, extraHeaders: Header*): F[Subnet[IpAddress]]", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.createOrUpdate", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Subnets.html#createOrUpdate(create:Create,keepExistingElements:Boolean,extraHeaders:org.http4s.Header*):F[Model]", "kind" : "def"}, {"label" : "createOrUpdate", "tail" : "(create: Create[IpAddress], extraHeaders: Header*): F[Subnet[IpAddress]]", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.createOrUpdate", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Subnets.html#createOrUpdate(create:Create,extraHeaders:org.http4s.Header*):F[Model]", "kind" : "def"}, {"label" : "create", "tail" : "(create: Create[IpAddress], extraHeaders: Header*): F[Subnet[IpAddress]]", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.create", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Subnets.html#create(create:Create,extraHeaders:org.http4s.Header*):F[Model]", "kind" : "def"}, {"label" : "list", "tail" : "(query: Query, extraHeaders: Header*): F[List[Subnet[IpAddress]]]", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.list", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Subnets.html#list(query:org.http4s.Query,extraHeaders:org.http4s.Header*):F[List[Model]]", "kind" : "def"}, {"label" : "list", "tail" : "(pairs: (String, String)*): F[List[Subnet[IpAddress]]]", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.list", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Subnets.html#list(pairs:(String,String)*):F[List[Model]]", "kind" : "def"}, {"label" : "stream", "tail" : "(query: Query, extraHeaders: Header*): Stream[F, Subnet[IpAddress]]", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.stream", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Subnets.html#stream(query:org.http4s.Query,extraHeaders:org.http4s.Header*):fs2.Stream[F,Model]", "kind" : "def"}, {"label" : "stream", "tail" : "(pairs: (String, String)*): Stream[F, Subnet[IpAddress]]", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.stream", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Subnets.html#stream(pairs:(String,String)*):fs2.Stream[F,Model]", "kind" : "def"}, {"label" : "wrappedAt", "tail" : ": Option[String]", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.wrappedAt", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Subnets.html#wrappedAt:Option[String]", "kind" : "val"}, {"label" : "uri", "tail" : ": Uri", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.uri", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Subnets.html#uri:org.http4s.Uri", "kind" : "val"}, {"label" : "pluralName", "tail" : ": String", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.pluralName", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Subnets.html#pluralName:String", "kind" : "val"}, {"label" : "updateEncoder", "tail" : ": Encoder[Update[IpAddress]]", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.updateEncoder", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Subnets.html#updateEncoder:io.circe.Encoder[Update]", "kind" : "implicit val"}, {"label" : "createEncoder", "tail" : ": Encoder[Create[IpAddress]]", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.createEncoder", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Subnets.html#createEncoder:io.circe.Encoder[Create]", "kind" : "implicit val"}, {"label" : "modelDecoder", "tail" : ": Decoder[Subnet[IpAddress]]", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.modelDecoder", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Subnets.html#modelDecoder:io.circe.Decoder[Model]", "kind" : "implicit val"}, {"label" : "name", "tail" : ": String", "member" : "pt.tecnico.dsi.openstack.common.services.CrudService.name", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Subnets.html#name:String", "kind" : "val"}, {"label" : "defaultOnError", "tail" : "(response: Response[F]): F[R]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.defaultOnError", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Subnets.html#defaultOnError[R](response:org.http4s.Response[F]):F[R]", "kind" : "def"}, {"label" : "delete", "tail" : "(uri: Uri, extraHeaders: Header*): F[Unit]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.delete", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Subnets.html#delete(uri:org.http4s.Uri,extraHeaders:org.http4s.Header*):F[Unit]", "kind" : "def"}, {"label" : "list", "tail" : "(wrappedAt: String, uri: Uri, extraHeaders: Header*)(arg0: Decoder[R]): F[List[R]]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.list", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Subnets.html#list[R](wrappedAt:String,uri:org.http4s.Uri,extraHeaders:org.http4s.Header*)(implicitevidence$25:io.circe.Decoder[R]):F[List[R]]", "kind" : "def"}, {"label" : "stream", "tail" : "(wrappedAt: String, uri: Uri, extraHeaders: Header*)(arg0: Decoder[R]): Stream[F, R]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.stream", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Subnets.html#stream[R](wrappedAt:String,uri:org.http4s.Uri,extraHeaders:org.http4s.Header*)(implicitevidence$24:io.circe.Decoder[R]):fs2.Stream[F,R]", "kind" : "def"}, {"label" : "postHandleConflictWithError", "tail" : "(wrappedAt: Option[String], value: V, uri: Uri, extraHeaders: Seq[Header])(onConflict: \/=>[E, F[R]])(arg0: Encoder[V], arg1: Decoder[R], arg2: Decoder[E]): F[R]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.postHandleConflictWithError", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Subnets.html#postHandleConflictWithError[V,R,E<:Throwable](wrappedAt:Option[String],value:V,uri:org.http4s.Uri,extraHeaders:Seq[org.http4s.Header])(onConflict:E\/=>F[R])(implicitevidence$21:io.circe.Encoder[V],implicitevidence$22:io.circe.Decoder[R],implicitevidence$23:io.circe.Decoder[E]):F[R]", "kind" : "def"}, {"label" : "\/=>", "tail" : "", "member" : "pt.tecnico.dsi.openstack.common.services.Service.\/=>", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Subnets.html#\/=>[-T,+R]=PartialFunction[T,R]", "kind" : "type"}, {"label" : "postHandleConflict", "tail" : "(wrappedAt: Option[String], value: V, uri: Uri, extraHeaders: Seq[Header])(onConflict: F[R])(arg0: Encoder[V], arg1: Decoder[R]): F[R]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.postHandleConflict", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Subnets.html#postHandleConflict[V,R](wrappedAt:Option[String],value:V,uri:org.http4s.Uri,extraHeaders:Seq[org.http4s.Header])(onConflict:F[R])(implicitevidence$19:io.circe.Encoder[V],implicitevidence$20:io.circe.Decoder[R]):F[R]", "kind" : "def"}, {"label" : "post", "tail" : "(wrappedAt: Option[String], value: V, uri: Uri, extraHeaders: Header*)(arg0: Encoder[V], arg1: Decoder[R]): F[R]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.post", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Subnets.html#post[V,R](wrappedAt:Option[String],value:V,uri:org.http4s.Uri,extraHeaders:org.http4s.Header*)(implicitevidence$17:io.circe.Encoder[V],implicitevidence$18:io.circe.Decoder[R]):F[R]", "kind" : "def"}, {"label" : "patch", "tail" : "(wrappedAt: Option[String], value: V, uri: Uri, extraHeaders: Header*)(arg0: Encoder[V], arg1: Decoder[R]): F[R]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.patch", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Subnets.html#patch[V,R](wrappedAt:Option[String],value:V,uri:org.http4s.Uri,extraHeaders:org.http4s.Header*)(implicitevidence$15:io.circe.Encoder[V],implicitevidence$16:io.circe.Decoder[R]):F[R]", "kind" : "def"}, {"label" : "put", "tail" : "(wrappedAt: Option[String], value: V, uri: Uri, extraHeaders: Header*)(arg0: Encoder[V], arg1: Decoder[R]): F[R]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.put", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Subnets.html#put[V,R](wrappedAt:Option[String],value:V,uri:org.http4s.Uri,extraHeaders:org.http4s.Header*)(implicitevidence$13:io.circe.Encoder[V],implicitevidence$14:io.circe.Decoder[R]):F[R]", "kind" : "def"}, {"label" : "getOption", "tail" : "(wrappedAt: Option[String], uri: Uri, extraHeaders: Header*)(arg0: Decoder[R]): F[Option[R]]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.getOption", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Subnets.html#getOption[R](wrappedAt:Option[String],uri:org.http4s.Uri,extraHeaders:org.http4s.Header*)(implicitevidence$12:io.circe.Decoder[R]):F[Option[R]]", "kind" : "def"}, {"label" : "get", "tail" : "(wrappedAt: Option[String], uri: Uri, extraHeaders: Header*)(arg0: Decoder[R]): F[R]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.get", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Subnets.html#get[R](wrappedAt:Option[String],uri:org.http4s.Uri,extraHeaders:org.http4s.Header*)(implicitevidence$11:io.circe.Decoder[R]):F[R]", "kind" : "def"}, {"label" : "expectOption", "tail" : "(wrappedAt: Option[String], method: Method, uri: Uri, extraHeaders: Header*)(arg0: Decoder[R]): F[Option[R]]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.expectOption", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Subnets.html#expectOption[R](wrappedAt:Option[String],method:org.http4s.Method,uri:org.http4s.Uri,extraHeaders:org.http4s.Header*)(implicitevidence$10:io.circe.Decoder[R]):F[Option[R]]", "kind" : "def"}, {"label" : "expect", "tail" : "(wrappedAt: Option[String], method: Method, uri: Uri, extraHeaders: Header*)(arg0: Decoder[R]): F[R]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.expect", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Subnets.html#expect[R](wrappedAt:Option[String],method:org.http4s.Method,uri:org.http4s.Uri,extraHeaders:org.http4s.Header*)(implicitevidence$9:io.circe.Decoder[R]):F[R]", "kind" : "def"}, {"label" : "expectOption", "tail" : "(wrappedAt: Option[String], method: Method, value: B, uri: Uri, extraHeaders: Header*)(arg0: Encoder[B], arg1: Decoder[R]): F[Option[R]]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.expectOption", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Subnets.html#expectOption[B,R](wrappedAt:Option[String],method:org.http4s.Method,value:B,uri:org.http4s.Uri,extraHeaders:org.http4s.Header*)(implicitevidence$7:io.circe.Encoder[B],implicitevidence$8:io.circe.Decoder[R]):F[Option[R]]", "kind" : "def"}, {"label" : "expect", "tail" : "(wrappedAt: Option[String], method: Method, value: V, uri: Uri, extraHeaders: Header*)(arg0: Encoder[V], arg1: Decoder[R]): F[R]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.expect", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Subnets.html#expect[V,R](wrappedAt:Option[String],method:org.http4s.Method,value:V,uri:org.http4s.Uri,extraHeaders:org.http4s.Header*)(implicitevidence$5:io.circe.Encoder[V],implicitevidence$6:io.circe.Decoder[R]):F[R]", "kind" : "def"}, {"label" : "expectOptionUnwrapped", "tail" : "(wrappedAt: Option[String], request: F[Request[F]])(arg0: Decoder[R]): F[Option[R]]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.expectOptionUnwrapped", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Subnets.html#expectOptionUnwrapped[R](wrappedAt:Option[String],request:F[org.http4s.Request[F]])(implicitevidence$4:io.circe.Decoder[R]):F[Option[R]]", "kind" : "def"}, {"label" : "expectUnwrapped", "tail" : "(wrappedAt: Option[String], request: F[Request[F]])(arg0: Decoder[R]): F[R]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.expectUnwrapped", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Subnets.html#expectUnwrapped[R](wrappedAt:Option[String],request:F[org.http4s.Request[F]])(implicitevidence$3:io.circe.Decoder[R]):F[R]", "kind" : "def"}, {"label" : "wrapped", "tail" : "(at: Option[String])(encoder: Encoder[R]): EntityEncoder[F, R]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.wrapped", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Subnets.html#wrapped[R](at:Option[String])(implicitencoder:io.circe.Encoder[R]):org.http4s.EntityEncoder[F,R]", "kind" : "def"}, {"label" : "unwrapped", "tail" : "(at: Option[String])(decoder: Decoder[R]): EntityDecoder[F, R]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.unwrapped", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Subnets.html#unwrapped[R](at:Option[String])(implicitdecoder:io.circe.Decoder[R]):org.http4s.EntityDecoder[F,R]", "kind" : "def"}, {"label" : "void", "tail" : ": EntityDecoder[F, Unit]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.void", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Subnets.html#void:org.http4s.EntityDecoder[F,Unit]", "kind" : "implicit val"}, {"label" : "jsonDecoder", "tail" : "(arg0: Decoder[A]): EntityDecoder[F, A]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.jsonDecoder", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Subnets.html#jsonDecoder[A](implicitevidence$2:io.circe.Decoder[A]):org.http4s.EntityDecoder[F,A]", "kind" : "implicit def"}, {"label" : "jsonEncoder", "tail" : "(arg0: Encoder[A]): EntityEncoder[F, A]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.jsonEncoder", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Subnets.html#jsonEncoder[A](implicitevidence$1:io.circe.Encoder[A]):org.http4s.EntityEncoder[F,A]", "kind" : "implicit def"}, {"label" : "jsonPrinter", "tail" : ": Printer", "member" : "pt.tecnico.dsi.openstack.common.services.Service.jsonPrinter", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Subnets.html#jsonPrinter:io.circe.Printer", "kind" : "val"}, {"label" : "dsl", "tail" : ": Http4sClientDsl[F]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.dsl", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Subnets.html#dsl:org.http4s.client.dsl.Http4sClientDsl[F]", "kind" : "val"}, {"label" : "F", "tail" : ": Sync[F]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.F", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Subnets.html#F:cats.effect.Sync[F]", "kind" : "implicit val"}, {"label" : "client", "tail" : ": Client[F]", "member" : "pt.tecnico.dsi.openstack.common.services.Service.client", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Subnets.html#client:org.http4s.client.Client[F]", "kind" : "implicit val"}, {"label" : "authToken", "tail" : ": Header", "member" : "pt.tecnico.dsi.openstack.common.services.Service.authToken", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Subnets.html#authToken:org.http4s.Header", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Subnets.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Subnets.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Subnets.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Subnets.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Subnets.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Subnets.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Subnets.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Subnets.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Subnets.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Subnets.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Subnets.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Subnets.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Subnets.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Subnets.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Subnets.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Subnets.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Subnets.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Subnets.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Subnets.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "pt\/tecnico\/dsi\/openstack\/neutron\/services\/Subnets.html", "kind" : "class"}], "pt.tecnico.dsi" : [], "pt.tecnico" : [], "pt.tecnico.dsi.openstack" : [], "pt.tecnico.dsi.openstack.neutron.models" : [{"name" : "pt.tecnico.dsi.openstack.neutron.models.AllocationPool", "shortDescription" : "", "object" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/AllocationPool$.html", "members_object" : [{"label" : "show", "tail" : "(arg0: Show[IP]): Show[AllocationPool[IP]]", "member" : "pt.tecnico.dsi.openstack.neutron.models.AllocationPool.show", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/AllocationPool$.html#show[IP<:com.comcast.ip4s.IpAddress](implicitevidence$4:cats.Show[IP]):cats.Show[pt.tecnico.dsi.openstack.neutron.models.AllocationPool[IP]]", "kind" : "implicit def"}, {"label" : "ordering", "tail" : "(arg0: Ordering[IP]): Ordering[AllocationPool[IP]]", "member" : "pt.tecnico.dsi.openstack.neutron.models.AllocationPool.ordering", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/AllocationPool$.html#ordering[IP<:com.comcast.ip4s.IpAddress](implicitevidence$3:Ordering[IP]):Ordering[pt.tecnico.dsi.openstack.neutron.models.AllocationPool[IP]]", "kind" : "implicit def"}, {"label" : "decoder", "tail" : "(arg0: Decoder[IP]): Decoder[AllocationPool[IP]]", "member" : "pt.tecnico.dsi.openstack.neutron.models.AllocationPool.decoder", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/AllocationPool$.html#decoder[IP<:com.comcast.ip4s.IpAddress](implicitevidence$2:io.circe.Decoder[IP]):io.circe.Decoder[pt.tecnico.dsi.openstack.neutron.models.AllocationPool[IP]]", "kind" : "implicit def"}, {"label" : "encoder", "tail" : "(arg0: Encoder[IP]): Encoder[AllocationPool[IP]]", "member" : "pt.tecnico.dsi.openstack.neutron.models.AllocationPool.encoder", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/AllocationPool$.html#encoder[IP<:com.comcast.ip4s.IpAddress](implicitevidence$1:io.circe.Encoder[IP]):io.circe.Encoder[pt.tecnico.dsi.openstack.neutron.models.AllocationPool[IP]]", "kind" : "implicit def"}, {"label" : "fromCidrAndGateway", "tail" : "(cidr: Cidr[IP], gateway: Option[IP]): Option[(IP, List[AllocationPool[IP]])]", "member" : "pt.tecnico.dsi.openstack.neutron.models.AllocationPool.fromCidrAndGateway", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/AllocationPool$.html#fromCidrAndGateway[IP<:com.comcast.ip4s.IpAddress](cidr:com.comcast.ip4s.Cidr[IP],gateway:Option[IP]):Option[(IP,List[pt.tecnico.dsi.openstack.neutron.models.AllocationPool[IP]])]", "kind" : "def"}, {"label" : "fromCidr", "tail" : "(cidr: Cidr[IP]): AllocationPool[IP]", "member" : "pt.tecnico.dsi.openstack.neutron.models.AllocationPool.fromCidr", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/AllocationPool$.html#fromCidr[IP<:com.comcast.ip4s.IpAddress](cidr:com.comcast.ip4s.Cidr[IP]):pt.tecnico.dsi.openstack.neutron.models.AllocationPool[IP]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/AllocationPool$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/AllocationPool$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/AllocationPool$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/AllocationPool$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/AllocationPool$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/AllocationPool$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/AllocationPool$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/AllocationPool$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/AllocationPool$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/AllocationPool$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/AllocationPool$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/AllocationPool$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/AllocationPool$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/AllocationPool$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/AllocationPool$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/AllocationPool$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/AllocationPool$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/AllocationPool$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/AllocationPool$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/AllocationPool.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/AllocationPool.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (AllocationPool[IP]) => Boolean, msg: => Any): AllocationPool[IP]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/AllocationPool.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (AllocationPool[IP]) => Boolean): AllocationPool[IP]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/AllocationPool.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): AllocationPool[IP]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/AllocationPool.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): AllocationPool[IP]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/AllocationPool.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (AllocationPool[IP], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/AllocationPool.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (AllocationPool[IP], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/AllocationPool.html#->[B](y:B):(A,B)", "kind" : "def"}, {"member" : "pt.tecnico.dsi.openstack.neutron.models.AllocationPool#<init>", "error" : "unsupported entity"}, {"label" : "end", "tail" : ": IP", "member" : "pt.tecnico.dsi.openstack.neutron.models.AllocationPool.end", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/AllocationPool.html#end:IP", "kind" : "val"}, {"label" : "start", "tail" : ": IP", "member" : "pt.tecnico.dsi.openstack.neutron.models.AllocationPool.start", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/AllocationPool.html#start:IP", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/AllocationPool.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/AllocationPool.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/AllocationPool.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/AllocationPool.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/AllocationPool.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/AllocationPool.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/AllocationPool.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/AllocationPool.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/AllocationPool.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/AllocationPool.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/AllocationPool.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/AllocationPool.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/AllocationPool.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/AllocationPool.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/AllocationPool.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/AllocationPool.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/AllocationPool.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/AllocationPool.html", "kind" : "object"}, {"name" : "pt.tecnico.dsi.openstack.neutron.models.Direction", "case object" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Direction$.html", "trait" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Direction.html", "members_case object" : [{"label" : "show", "tail" : ": Show[Direction]", "member" : "pt.tecnico.dsi.openstack.neutron.models.Direction.show", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Direction$.html#show:cats.Show[pt.tecnico.dsi.openstack.neutron.models.Direction]", "kind" : "implicit val"}, {"label" : "values", "tail" : ": IndexedSeq[Direction]", "member" : "pt.tecnico.dsi.openstack.neutron.models.Direction.values", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Direction$.html#values:IndexedSeq[pt.tecnico.dsi.openstack.neutron.models.Direction]", "kind" : "val"}, {"label" : "Egress", "tail" : "", "member" : "pt.tecnico.dsi.openstack.neutron.models.Direction.Egress", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Direction$.html#Egress", "kind" : "case object"}, {"label" : "Ingress", "tail" : "", "member" : "pt.tecnico.dsi.openstack.neutron.models.Direction.Ingress", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Direction$.html#Ingress", "kind" : "case object"}, {"label" : "circeDecoder", "tail" : ": Decoder[Direction]", "member" : "pt.tecnico.dsi.openstack.neutron.models.Direction.circeDecoder", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Direction$.html#circeDecoder:io.circe.Decoder[pt.tecnico.dsi.openstack.neutron.models.Direction]", "kind" : "implicit val"}, {"label" : "circeEncoder", "tail" : ": Encoder[Direction]", "member" : "pt.tecnico.dsi.openstack.neutron.models.Direction.circeEncoder", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Direction$.html#circeEncoder:io.circe.Encoder[pt.tecnico.dsi.openstack.neutron.models.Direction]", "kind" : "implicit val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Direction$.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "productElementName", "tail" : "(n: Int): String", "member" : "scala.Product.productElementName", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Direction$.html#productElementName(n:Int):String", "kind" : "def"}, {"label" : "findValues", "tail" : "(): IndexedSeq[Direction]", "member" : "enumeratum.Enum.findValues", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Direction$.html#findValues:IndexedSeq[A]", "kind" : "macro def"}, {"label" : "indexOf", "tail" : "(member: Direction): Int", "member" : "enumeratum.Enum.indexOf", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Direction$.html#indexOf(member:A):Int", "kind" : "def"}, {"label" : "withNameLowercaseOnlyEither", "tail" : "(name: String): Either[NoSuchMember[Direction], Direction]", "member" : "enumeratum.Enum.withNameLowercaseOnlyEither", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Direction$.html#withNameLowercaseOnlyEither(name:String):Either[enumeratum.NoSuchMember[A],A]", "kind" : "def"}, {"label" : "withNameUppercaseOnlyEither", "tail" : "(name: String): Either[NoSuchMember[Direction], Direction]", "member" : "enumeratum.Enum.withNameUppercaseOnlyEither", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Direction$.html#withNameUppercaseOnlyEither(name:String):Either[enumeratum.NoSuchMember[A],A]", "kind" : "def"}, {"label" : "withNameInsensitiveEither", "tail" : "(name: String): Either[NoSuchMember[Direction], Direction]", "member" : "enumeratum.Enum.withNameInsensitiveEither", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Direction$.html#withNameInsensitiveEither(name:String):Either[enumeratum.NoSuchMember[A],A]", "kind" : "def"}, {"label" : "withNameLowercaseOnlyOption", "tail" : "(name: String): Option[Direction]", "member" : "enumeratum.Enum.withNameLowercaseOnlyOption", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Direction$.html#withNameLowercaseOnlyOption(name:String):Option[A]", "kind" : "def"}, {"label" : "withNameUppercaseOnlyOption", "tail" : "(name: String): Option[Direction]", "member" : "enumeratum.Enum.withNameUppercaseOnlyOption", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Direction$.html#withNameUppercaseOnlyOption(name:String):Option[A]", "kind" : "def"}, {"label" : "withNameInsensitiveOption", "tail" : "(name: String): Option[Direction]", "member" : "enumeratum.Enum.withNameInsensitiveOption", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Direction$.html#withNameInsensitiveOption(name:String):Option[A]", "kind" : "def"}, {"label" : "withNameLowercaseOnly", "tail" : "(name: String): Direction", "member" : "enumeratum.Enum.withNameLowercaseOnly", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Direction$.html#withNameLowercaseOnly(name:String):A", "kind" : "def"}, {"label" : "withNameUppercaseOnly", "tail" : "(name: String): Direction", "member" : "enumeratum.Enum.withNameUppercaseOnly", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Direction$.html#withNameUppercaseOnly(name:String):A", "kind" : "def"}, {"label" : "withNameInsensitive", "tail" : "(name: String): Direction", "member" : "enumeratum.Enum.withNameInsensitive", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Direction$.html#withNameInsensitive(name:String):A", "kind" : "def"}, {"label" : "withNameEither", "tail" : "(name: String): Either[NoSuchMember[Direction], Direction]", "member" : "enumeratum.Enum.withNameEither", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Direction$.html#withNameEither(name:String):Either[enumeratum.NoSuchMember[A],A]", "kind" : "def"}, {"label" : "withNameOption", "tail" : "(name: String): Option[Direction]", "member" : "enumeratum.Enum.withNameOption", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Direction$.html#withNameOption(name:String):Option[A]", "kind" : "def"}, {"label" : "withName", "tail" : "(name: String): Direction", "member" : "enumeratum.Enum.withName", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Direction$.html#withName(name:String):A", "kind" : "def"}, {"label" : "valuesToIndex", "tail" : ": Map[Direction, Int]", "member" : "enumeratum.Enum.valuesToIndex", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Direction$.html#valuesToIndex:scala.collection.immutable.Map[A,Int]", "kind" : "final lazy val"}, {"label" : "upperCaseNameValuesToMap", "tail" : ": Map[String, Direction]", "member" : "enumeratum.Enum.upperCaseNameValuesToMap", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Direction$.html#upperCaseNameValuesToMap:scala.collection.immutable.Map[String,A]", "kind" : "final lazy val"}, {"label" : "lowerCaseNamesToValuesMap", "tail" : ": Map[String, Direction]", "member" : "enumeratum.Enum.lowerCaseNamesToValuesMap", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Direction$.html#lowerCaseNamesToValuesMap:scala.collection.immutable.Map[String,A]", "kind" : "final lazy val"}, {"label" : "namesToValuesMap", "tail" : ": Map[String, Direction]", "member" : "enumeratum.Enum.namesToValuesMap", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Direction$.html#namesToValuesMap:scala.collection.immutable.Map[String,A]", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Direction$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Direction$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Direction$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Direction$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Direction$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Direction$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Direction$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Direction$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Direction$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Direction$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Direction$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Direction$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Direction$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Direction$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Direction$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Direction$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Direction$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "trait", "members_trait" : [{"label" : "in", "tail" : "(entries: Seq[Direction]): Boolean", "member" : "enumeratum.EnumEntry.EnumEntryOps.in", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Direction.html#in(entries:Seq[A]):Boolean", "kind" : "def"}, {"label" : "in", "tail" : "(firstEntry: Direction, otherEnums: Direction*): Boolean", "member" : "enumeratum.EnumEntry.EnumEntryOps.in", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Direction.html#in(firstEntry:A,otherEnums:A*):Boolean", "kind" : "def"}, {"label" : "enumEntry", "tail" : ": Direction", "member" : "enumeratum.EnumEntry.EnumEntryOps.enumEntry", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Direction.html#enumEntry:A", "kind" : "val"}, {"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Direction.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Direction.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Direction) => Boolean, msg: => Any): Direction", "member" : "scala.Predef.Ensuring.ensuring", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Direction.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Direction) => Boolean): Direction", "member" : "scala.Predef.Ensuring.ensuring", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Direction.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): Direction", "member" : "scala.Predef.Ensuring.ensuring", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Direction.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Direction", "member" : "scala.Predef.Ensuring.ensuring", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Direction.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Direction, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Direction.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Direction, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Direction.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "entryName", "tail" : "(): String", "member" : "enumeratum.EnumEntry.entryName", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Direction.html#entryName:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Direction.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Direction.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Direction.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Direction.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Direction.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Direction.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Direction.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Direction.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Direction.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Direction.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Direction.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Direction.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Direction.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Direction.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Direction.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Direction.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Direction.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Direction.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Direction.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "pt.tecnico.dsi.openstack.neutron.models.FloatingIp", "shortDescription" : "", "object" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/FloatingIp$.html", "members_object" : [{"label" : "show", "tail" : "(arg0: Typeable[IP]): ShowPretty[FloatingIp[IP]]", "member" : "pt.tecnico.dsi.openstack.neutron.models.FloatingIp.show", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/FloatingIp$.html#show[IP<:com.comcast.ip4s.IpAddress](implicitevidence$4:shapeless.Typeable[IP]):cats.derived.ShowPretty[pt.tecnico.dsi.openstack.neutron.models.FloatingIp[IP]]", "kind" : "implicit def"}, {"label" : "decoder", "tail" : ": Decoder[FloatingIp[IpAddress]]", "member" : "pt.tecnico.dsi.openstack.neutron.models.FloatingIp.decoder", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/FloatingIp$.html#decoder:io.circe.Decoder[pt.tecnico.dsi.openstack.neutron.models.FloatingIp[com.comcast.ip4s.IpAddress]]", "kind" : "implicit val"}, {"label" : "Update", "tail" : "", "member" : "pt.tecnico.dsi.openstack.neutron.models.FloatingIp.Update", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/FloatingIp$.html#Update[+IP<:com.comcast.ip4s.IpAddress]extendsProductwithSerializable", "kind" : "case class"}, {"label" : "Update", "tail" : "", "member" : "pt.tecnico.dsi.openstack.neutron.models.FloatingIp.Update", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/FloatingIp$.html#Update", "kind" : "object"}, {"label" : "Create", "tail" : "", "member" : "pt.tecnico.dsi.openstack.neutron.models.FloatingIp.Create", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/FloatingIp$.html#Create[+IP<:com.comcast.ip4s.IpAddress]extendsProductwithSerializable", "kind" : "case class"}, {"label" : "Create", "tail" : "", "member" : "pt.tecnico.dsi.openstack.neutron.models.FloatingIp.Create", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/FloatingIp$.html#Create", "kind" : "object"}, {"label" : "PortForwarding", "tail" : "", "member" : "pt.tecnico.dsi.openstack.neutron.models.FloatingIp.PortForwarding", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/FloatingIp$.html#PortForwarding[+IP<:com.comcast.ip4s.IpAddress]extendsProductwithSerializable", "kind" : "case class"}, {"label" : "PortForwarding", "tail" : "", "member" : "pt.tecnico.dsi.openstack.neutron.models.FloatingIp.PortForwarding", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/FloatingIp$.html#PortForwarding", "kind" : "object"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/FloatingIp$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/FloatingIp$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/FloatingIp$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/FloatingIp$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/FloatingIp$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/FloatingIp$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/FloatingIp$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/FloatingIp$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/FloatingIp$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/FloatingIp$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/FloatingIp$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/FloatingIp$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/FloatingIp$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/FloatingIp$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/FloatingIp$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/FloatingIp$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/FloatingIp$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/FloatingIp$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/FloatingIp$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/FloatingIp.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/FloatingIp.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (FloatingIp[IP]) => Boolean, msg: => Any): FloatingIp[IP]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/FloatingIp.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (FloatingIp[IP]) => Boolean): FloatingIp[IP]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/FloatingIp.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): FloatingIp[IP]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/FloatingIp.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): FloatingIp[IP]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/FloatingIp.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (FloatingIp[IP], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/FloatingIp.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (FloatingIp[IP], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/FloatingIp.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "router", "tail" : "(arg0: Sync[F], neutron: NeutronClient[F]): F[Option[Router]]", "member" : "pt.tecnico.dsi.openstack.neutron.models.FloatingIp.router", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/FloatingIp.html#router[F[_]](implicitevidence$7:cats.effect.Sync[F],implicitneutron:pt.tecnico.dsi.openstack.neutron.NeutronClient[F]):F[Option[pt.tecnico.dsi.openstack.neutron.models.Router]]", "kind" : "def"}, {"label" : "floatingNetwork", "tail" : "(arg0: Sync[F], neutron: NeutronClient[F]): F[Network]", "member" : "pt.tecnico.dsi.openstack.neutron.models.FloatingIp.floatingNetwork", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/FloatingIp.html#floatingNetwork[F[_]](implicitevidence$6:cats.effect.Sync[F],implicitneutron:pt.tecnico.dsi.openstack.neutron.NeutronClient[F]):F[pt.tecnico.dsi.openstack.neutron.models.Network]", "kind" : "def"}, {"label" : "project", "tail" : "(arg0: Sync[F], keystone: KeystoneClient[F]): F[Project]", "member" : "pt.tecnico.dsi.openstack.neutron.models.FloatingIp.project", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/FloatingIp.html#project[F[_]](implicitevidence$5:cats.effect.Sync[F],implicitkeystone:pt.tecnico.dsi.openstack.keystone.KeystoneClient[F]):F[pt.tecnico.dsi.openstack.keystone.models.Project]", "kind" : "def"}, {"member" : "pt.tecnico.dsi.openstack.neutron.models.FloatingIp#<init>", "error" : "unsupported entity"}, {"label" : "links", "tail" : ": List[Link]", "member" : "pt.tecnico.dsi.openstack.neutron.models.FloatingIp.links", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/FloatingIp.html#links:List[pt.tecnico.dsi.openstack.common.models.Link]", "kind" : "val"}, {"label" : "tags", "tail" : ": List[String]", "member" : "pt.tecnico.dsi.openstack.neutron.models.FloatingIp.tags", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/FloatingIp.html#tags:List[String]", "kind" : "val"}, {"label" : "updatedAt", "tail" : ": OffsetDateTime", "member" : "pt.tecnico.dsi.openstack.neutron.models.FloatingIp.updatedAt", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/FloatingIp.html#updatedAt:java.time.OffsetDateTime", "kind" : "val"}, {"label" : "createdAt", "tail" : ": OffsetDateTime", "member" : "pt.tecnico.dsi.openstack.neutron.models.FloatingIp.createdAt", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/FloatingIp.html#createdAt:java.time.OffsetDateTime", "kind" : "val"}, {"label" : "revision", "tail" : ": Int", "member" : "pt.tecnico.dsi.openstack.neutron.models.FloatingIp.revision", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/FloatingIp.html#revision:Int", "kind" : "val"}, {"label" : "portForwardings", "tail" : ": List[PortForwarding[IP]]", "member" : "pt.tecnico.dsi.openstack.neutron.models.FloatingIp.portForwardings", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/FloatingIp.html#portForwardings:List[pt.tecnico.dsi.openstack.neutron.models.FloatingIp.PortForwarding[IP]]", "kind" : "val"}, {"label" : "portId", "tail" : ": Option[String]", "member" : "pt.tecnico.dsi.openstack.neutron.models.FloatingIp.portId", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/FloatingIp.html#portId:Option[String]", "kind" : "val"}, {"label" : "routerId", "tail" : ": Option[String]", "member" : "pt.tecnico.dsi.openstack.neutron.models.FloatingIp.routerId", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/FloatingIp.html#routerId:Option[String]", "kind" : "val"}, {"label" : "floatingIpAddress", "tail" : ": IP", "member" : "pt.tecnico.dsi.openstack.neutron.models.FloatingIp.floatingIpAddress", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/FloatingIp.html#floatingIpAddress:IP", "kind" : "val"}, {"label" : "fixedIpAddress", "tail" : ": Option[IP]", "member" : "pt.tecnico.dsi.openstack.neutron.models.FloatingIp.fixedIpAddress", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/FloatingIp.html#fixedIpAddress:Option[IP]", "kind" : "val"}, {"label" : "dnsDomain", "tail" : ": Option[String]", "member" : "pt.tecnico.dsi.openstack.neutron.models.FloatingIp.dnsDomain", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/FloatingIp.html#dnsDomain:Option[String]", "kind" : "val"}, {"label" : "dnsName", "tail" : ": Option[String]", "member" : "pt.tecnico.dsi.openstack.neutron.models.FloatingIp.dnsName", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/FloatingIp.html#dnsName:Option[String]", "kind" : "val"}, {"label" : "floatingNetworkId", "tail" : ": String", "member" : "pt.tecnico.dsi.openstack.neutron.models.FloatingIp.floatingNetworkId", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/FloatingIp.html#floatingNetworkId:String", "kind" : "val"}, {"label" : "status", "tail" : ": String", "member" : "pt.tecnico.dsi.openstack.neutron.models.FloatingIp.status", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/FloatingIp.html#status:String", "kind" : "val"}, {"label" : "projectId", "tail" : ": String", "member" : "pt.tecnico.dsi.openstack.neutron.models.FloatingIp.projectId", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/FloatingIp.html#projectId:String", "kind" : "val"}, {"label" : "description", "tail" : ": Option[String]", "member" : "pt.tecnico.dsi.openstack.neutron.models.FloatingIp.description", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/FloatingIp.html#description:Option[String]", "kind" : "val"}, {"label" : "id", "tail" : ": String", "member" : "pt.tecnico.dsi.openstack.neutron.models.FloatingIp.id", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/FloatingIp.html#id:String", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/FloatingIp.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "linksMap", "tail" : ": Map[String, Uri]", "member" : "pt.tecnico.dsi.openstack.common.models.Identifiable.linksMap", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/FloatingIp.html#linksMap:Map[String,org.http4s.Uri]", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/FloatingIp.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/FloatingIp.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/FloatingIp.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/FloatingIp.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/FloatingIp.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/FloatingIp.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/FloatingIp.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/FloatingIp.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/FloatingIp.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/FloatingIp.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/FloatingIp.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/FloatingIp.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/FloatingIp.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/FloatingIp.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/FloatingIp.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/FloatingIp.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/FloatingIp.html", "kind" : "object"}, {"name" : "pt.tecnico.dsi.openstack.neutron.models.IpAvailability", "shortDescription" : "", "object" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/IpAvailability$.html", "members_object" : [{"label" : "show", "tail" : ": ShowPretty[IpAvailability]", "member" : "pt.tecnico.dsi.openstack.neutron.models.IpAvailability.show", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/IpAvailability$.html#show:cats.derived.ShowPretty[pt.tecnico.dsi.openstack.neutron.models.IpAvailability]", "kind" : "implicit val"}, {"label" : "decoder", "tail" : ": Decoder[IpAvailability]", "member" : "pt.tecnico.dsi.openstack.neutron.models.IpAvailability.decoder", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/IpAvailability$.html#decoder:io.circe.Decoder[pt.tecnico.dsi.openstack.neutron.models.IpAvailability]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/IpAvailability$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/IpAvailability$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/IpAvailability$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/IpAvailability$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/IpAvailability$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/IpAvailability$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/IpAvailability$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/IpAvailability$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/IpAvailability$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/IpAvailability$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/IpAvailability$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/IpAvailability$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/IpAvailability$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/IpAvailability$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/IpAvailability$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/IpAvailability$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/IpAvailability$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/IpAvailability$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/IpAvailability$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/IpAvailability.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/IpAvailability.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (IpAvailability) => Boolean, msg: => Any): IpAvailability", "member" : "scala.Predef.Ensuring.ensuring", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/IpAvailability.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (IpAvailability) => Boolean): IpAvailability", "member" : "scala.Predef.Ensuring.ensuring", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/IpAvailability.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): IpAvailability", "member" : "scala.Predef.Ensuring.ensuring", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/IpAvailability.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): IpAvailability", "member" : "scala.Predef.Ensuring.ensuring", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/IpAvailability.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (IpAvailability, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/IpAvailability.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (IpAvailability, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/IpAvailability.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "project", "tail" : "(arg0: Sync[F], client: KeystoneClient[F]): F[Project]", "member" : "pt.tecnico.dsi.openstack.neutron.models.IpAvailability.project", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/IpAvailability.html#project[F[_]](implicitevidence$3:cats.effect.Sync[F],implicitclient:pt.tecnico.dsi.openstack.keystone.KeystoneClient[F]):F[pt.tecnico.dsi.openstack.keystone.models.Project]", "kind" : "def"}, {"label" : "network", "tail" : "(arg0: Sync[F], neutron: NeutronClient[F]): F[Network]", "member" : "pt.tecnico.dsi.openstack.neutron.models.IpAvailability.network", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/IpAvailability.html#network[F[_]](implicitevidence$2:cats.effect.Sync[F],implicitneutron:pt.tecnico.dsi.openstack.neutron.NeutronClient[F]):F[pt.tecnico.dsi.openstack.neutron.models.Network]", "kind" : "def"}, {"member" : "pt.tecnico.dsi.openstack.neutron.models.IpAvailability#<init>", "error" : "unsupported entity"}, {"label" : "subnetIpAvailability", "tail" : ": List[SubnetIpAvailability]", "member" : "pt.tecnico.dsi.openstack.neutron.models.IpAvailability.subnetIpAvailability", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/IpAvailability.html#subnetIpAvailability:List[pt.tecnico.dsi.openstack.neutron.models.SubnetIpAvailability]", "kind" : "val"}, {"label" : "usedIps", "tail" : ": BigInt", "member" : "pt.tecnico.dsi.openstack.neutron.models.IpAvailability.usedIps", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/IpAvailability.html#usedIps:BigInt", "kind" : "val"}, {"label" : "totalIps", "tail" : ": BigInt", "member" : "pt.tecnico.dsi.openstack.neutron.models.IpAvailability.totalIps", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/IpAvailability.html#totalIps:BigInt", "kind" : "val"}, {"label" : "projectId", "tail" : ": String", "member" : "pt.tecnico.dsi.openstack.neutron.models.IpAvailability.projectId", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/IpAvailability.html#projectId:String", "kind" : "val"}, {"label" : "networkName", "tail" : ": String", "member" : "pt.tecnico.dsi.openstack.neutron.models.IpAvailability.networkName", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/IpAvailability.html#networkName:String", "kind" : "val"}, {"label" : "networkId", "tail" : ": String", "member" : "pt.tecnico.dsi.openstack.neutron.models.IpAvailability.networkId", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/IpAvailability.html#networkId:String", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/IpAvailability.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/IpAvailability.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/IpAvailability.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/IpAvailability.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/IpAvailability.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/IpAvailability.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/IpAvailability.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/IpAvailability.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/IpAvailability.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/IpAvailability.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/IpAvailability.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/IpAvailability.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/IpAvailability.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/IpAvailability.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/IpAvailability.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/IpAvailability.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/IpAvailability.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/IpAvailability.html", "kind" : "object"}, {"name" : "pt.tecnico.dsi.openstack.neutron.models.Ipv6Mode", "case object" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Ipv6Mode$.html", "trait" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Ipv6Mode.html", "members_case object" : [{"label" : "show", "tail" : ": Show[Ipv6Mode]", "member" : "pt.tecnico.dsi.openstack.neutron.models.Ipv6Mode.show", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Ipv6Mode$.html#show:cats.Show[pt.tecnico.dsi.openstack.neutron.models.Ipv6Mode]", "kind" : "implicit val"}, {"label" : "values", "tail" : ": IndexedSeq[Ipv6Mode]", "member" : "pt.tecnico.dsi.openstack.neutron.models.Ipv6Mode.values", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Ipv6Mode$.html#values:IndexedSeq[pt.tecnico.dsi.openstack.neutron.models.Ipv6Mode]", "kind" : "val"}, {"label" : "Dhcpv6Stateless", "tail" : "", "member" : "pt.tecnico.dsi.openstack.neutron.models.Ipv6Mode.Dhcpv6Stateless", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Ipv6Mode$.html#Dhcpv6Stateless", "kind" : "case object"}, {"label" : "Dhcpv6Stateful", "tail" : "", "member" : "pt.tecnico.dsi.openstack.neutron.models.Ipv6Mode.Dhcpv6Stateful", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Ipv6Mode$.html#Dhcpv6Stateful", "kind" : "case object"}, {"label" : "Slaac", "tail" : "", "member" : "pt.tecnico.dsi.openstack.neutron.models.Ipv6Mode.Slaac", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Ipv6Mode$.html#Slaac", "kind" : "case object"}, {"label" : "circeDecoder", "tail" : ": Decoder[Ipv6Mode]", "member" : "pt.tecnico.dsi.openstack.neutron.models.Ipv6Mode.circeDecoder", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Ipv6Mode$.html#circeDecoder:io.circe.Decoder[pt.tecnico.dsi.openstack.neutron.models.Ipv6Mode]", "kind" : "implicit val"}, {"label" : "circeEncoder", "tail" : ": Encoder[Ipv6Mode]", "member" : "pt.tecnico.dsi.openstack.neutron.models.Ipv6Mode.circeEncoder", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Ipv6Mode$.html#circeEncoder:io.circe.Encoder[pt.tecnico.dsi.openstack.neutron.models.Ipv6Mode]", "kind" : "implicit val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Ipv6Mode$.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "productElementName", "tail" : "(n: Int): String", "member" : "scala.Product.productElementName", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Ipv6Mode$.html#productElementName(n:Int):String", "kind" : "def"}, {"label" : "findValues", "tail" : "(): IndexedSeq[Ipv6Mode]", "member" : "enumeratum.Enum.findValues", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Ipv6Mode$.html#findValues:IndexedSeq[A]", "kind" : "macro def"}, {"label" : "indexOf", "tail" : "(member: Ipv6Mode): Int", "member" : "enumeratum.Enum.indexOf", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Ipv6Mode$.html#indexOf(member:A):Int", "kind" : "def"}, {"label" : "withNameLowercaseOnlyEither", "tail" : "(name: String): Either[NoSuchMember[Ipv6Mode], Ipv6Mode]", "member" : "enumeratum.Enum.withNameLowercaseOnlyEither", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Ipv6Mode$.html#withNameLowercaseOnlyEither(name:String):Either[enumeratum.NoSuchMember[A],A]", "kind" : "def"}, {"label" : "withNameUppercaseOnlyEither", "tail" : "(name: String): Either[NoSuchMember[Ipv6Mode], Ipv6Mode]", "member" : "enumeratum.Enum.withNameUppercaseOnlyEither", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Ipv6Mode$.html#withNameUppercaseOnlyEither(name:String):Either[enumeratum.NoSuchMember[A],A]", "kind" : "def"}, {"label" : "withNameInsensitiveEither", "tail" : "(name: String): Either[NoSuchMember[Ipv6Mode], Ipv6Mode]", "member" : "enumeratum.Enum.withNameInsensitiveEither", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Ipv6Mode$.html#withNameInsensitiveEither(name:String):Either[enumeratum.NoSuchMember[A],A]", "kind" : "def"}, {"label" : "withNameLowercaseOnlyOption", "tail" : "(name: String): Option[Ipv6Mode]", "member" : "enumeratum.Enum.withNameLowercaseOnlyOption", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Ipv6Mode$.html#withNameLowercaseOnlyOption(name:String):Option[A]", "kind" : "def"}, {"label" : "withNameUppercaseOnlyOption", "tail" : "(name: String): Option[Ipv6Mode]", "member" : "enumeratum.Enum.withNameUppercaseOnlyOption", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Ipv6Mode$.html#withNameUppercaseOnlyOption(name:String):Option[A]", "kind" : "def"}, {"label" : "withNameInsensitiveOption", "tail" : "(name: String): Option[Ipv6Mode]", "member" : "enumeratum.Enum.withNameInsensitiveOption", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Ipv6Mode$.html#withNameInsensitiveOption(name:String):Option[A]", "kind" : "def"}, {"label" : "withNameLowercaseOnly", "tail" : "(name: String): Ipv6Mode", "member" : "enumeratum.Enum.withNameLowercaseOnly", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Ipv6Mode$.html#withNameLowercaseOnly(name:String):A", "kind" : "def"}, {"label" : "withNameUppercaseOnly", "tail" : "(name: String): Ipv6Mode", "member" : "enumeratum.Enum.withNameUppercaseOnly", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Ipv6Mode$.html#withNameUppercaseOnly(name:String):A", "kind" : "def"}, {"label" : "withNameInsensitive", "tail" : "(name: String): Ipv6Mode", "member" : "enumeratum.Enum.withNameInsensitive", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Ipv6Mode$.html#withNameInsensitive(name:String):A", "kind" : "def"}, {"label" : "withNameEither", "tail" : "(name: String): Either[NoSuchMember[Ipv6Mode], Ipv6Mode]", "member" : "enumeratum.Enum.withNameEither", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Ipv6Mode$.html#withNameEither(name:String):Either[enumeratum.NoSuchMember[A],A]", "kind" : "def"}, {"label" : "withNameOption", "tail" : "(name: String): Option[Ipv6Mode]", "member" : "enumeratum.Enum.withNameOption", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Ipv6Mode$.html#withNameOption(name:String):Option[A]", "kind" : "def"}, {"label" : "withName", "tail" : "(name: String): Ipv6Mode", "member" : "enumeratum.Enum.withName", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Ipv6Mode$.html#withName(name:String):A", "kind" : "def"}, {"label" : "valuesToIndex", "tail" : ": Map[Ipv6Mode, Int]", "member" : "enumeratum.Enum.valuesToIndex", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Ipv6Mode$.html#valuesToIndex:scala.collection.immutable.Map[A,Int]", "kind" : "final lazy val"}, {"label" : "upperCaseNameValuesToMap", "tail" : ": Map[String, Ipv6Mode]", "member" : "enumeratum.Enum.upperCaseNameValuesToMap", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Ipv6Mode$.html#upperCaseNameValuesToMap:scala.collection.immutable.Map[String,A]", "kind" : "final lazy val"}, {"label" : "lowerCaseNamesToValuesMap", "tail" : ": Map[String, Ipv6Mode]", "member" : "enumeratum.Enum.lowerCaseNamesToValuesMap", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Ipv6Mode$.html#lowerCaseNamesToValuesMap:scala.collection.immutable.Map[String,A]", "kind" : "final lazy val"}, {"label" : "namesToValuesMap", "tail" : ": Map[String, Ipv6Mode]", "member" : "enumeratum.Enum.namesToValuesMap", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Ipv6Mode$.html#namesToValuesMap:scala.collection.immutable.Map[String,A]", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Ipv6Mode$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Ipv6Mode$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Ipv6Mode$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Ipv6Mode$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Ipv6Mode$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Ipv6Mode$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Ipv6Mode$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Ipv6Mode$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Ipv6Mode$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Ipv6Mode$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Ipv6Mode$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Ipv6Mode$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Ipv6Mode$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Ipv6Mode$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Ipv6Mode$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Ipv6Mode$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Ipv6Mode$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "trait", "members_trait" : [{"label" : "in", "tail" : "(entries: Seq[Ipv6Mode]): Boolean", "member" : "enumeratum.EnumEntry.EnumEntryOps.in", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Ipv6Mode.html#in(entries:Seq[A]):Boolean", "kind" : "def"}, {"label" : "in", "tail" : "(firstEntry: Ipv6Mode, otherEnums: Ipv6Mode*): Boolean", "member" : "enumeratum.EnumEntry.EnumEntryOps.in", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Ipv6Mode.html#in(firstEntry:A,otherEnums:A*):Boolean", "kind" : "def"}, {"label" : "enumEntry", "tail" : ": Ipv6Mode", "member" : "enumeratum.EnumEntry.EnumEntryOps.enumEntry", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Ipv6Mode.html#enumEntry:A", "kind" : "val"}, {"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Ipv6Mode.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Ipv6Mode.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Ipv6Mode) => Boolean, msg: => Any): Ipv6Mode", "member" : "scala.Predef.Ensuring.ensuring", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Ipv6Mode.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Ipv6Mode) => Boolean): Ipv6Mode", "member" : "scala.Predef.Ensuring.ensuring", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Ipv6Mode.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): Ipv6Mode", "member" : "scala.Predef.Ensuring.ensuring", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Ipv6Mode.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Ipv6Mode", "member" : "scala.Predef.Ensuring.ensuring", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Ipv6Mode.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Ipv6Mode, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Ipv6Mode.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Ipv6Mode, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Ipv6Mode.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "entryName", "tail" : "(): String", "member" : "enumeratum.EnumEntry.entryName", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Ipv6Mode.html#entryName:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Ipv6Mode.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Ipv6Mode.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Ipv6Mode.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Ipv6Mode.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Ipv6Mode.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Ipv6Mode.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Ipv6Mode.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Ipv6Mode.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Ipv6Mode.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Ipv6Mode.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Ipv6Mode.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Ipv6Mode.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Ipv6Mode.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Ipv6Mode.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Ipv6Mode.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Ipv6Mode.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Ipv6Mode.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Ipv6Mode.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Ipv6Mode.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "pt.tecnico.dsi.openstack.neutron.models.Network", "shortDescription" : "", "object" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Network$.html", "members_object" : [{"label" : "show", "tail" : ": ShowPretty[Network]", "member" : "pt.tecnico.dsi.openstack.neutron.models.Network.show", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Network$.html#show:cats.derived.ShowPretty[pt.tecnico.dsi.openstack.neutron.models.Network]", "kind" : "implicit val"}, {"label" : "decoder", "tail" : ": Decoder[Network]", "member" : "pt.tecnico.dsi.openstack.neutron.models.Network.decoder", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Network$.html#decoder:io.circe.Decoder[pt.tecnico.dsi.openstack.neutron.models.Network]", "kind" : "implicit val"}, {"label" : "Update", "tail" : "", "member" : "pt.tecnico.dsi.openstack.neutron.models.Network.Update", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Network$.html#UpdateextendsProductwithSerializable", "kind" : "sealed case class"}, {"label" : "Update", "tail" : "", "member" : "pt.tecnico.dsi.openstack.neutron.models.Network.Update", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Network$.html#Update", "kind" : "object"}, {"label" : "Create", "tail" : "", "member" : "pt.tecnico.dsi.openstack.neutron.models.Network.Create", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Network$.html#CreateextendsProductwithSerializable", "kind" : "case class"}, {"label" : "Create", "tail" : "", "member" : "pt.tecnico.dsi.openstack.neutron.models.Network.Create", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Network$.html#Create", "kind" : "object"}, {"label" : "Segment", "tail" : "", "member" : "pt.tecnico.dsi.openstack.neutron.models.Network.Segment", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Network$.html#SegmentextendsProductwithSerializable", "kind" : "case class"}, {"label" : "Segment", "tail" : "", "member" : "pt.tecnico.dsi.openstack.neutron.models.Network.Segment", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Network$.html#Segment", "kind" : "object"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Network$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Network$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Network$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Network$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Network$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Network$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Network$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Network$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Network$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Network$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Network$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Network$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Network$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Network$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Network$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Network$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Network$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Network$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Network$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Network.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Network.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Network) => Boolean, msg: => Any): Network", "member" : "scala.Predef.Ensuring.ensuring", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Network.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Network) => Boolean): Network", "member" : "scala.Predef.Ensuring.ensuring", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Network.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): Network", "member" : "scala.Predef.Ensuring.ensuring", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Network.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Network", "member" : "scala.Predef.Ensuring.ensuring", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Network.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Network, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Network.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Network, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Network.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "subnets", "tail" : "(arg0: Sync[F], arg1: Parallel[F], neutron: NeutronClient[F]): F[List[Subnet[IpAddress]]]", "member" : "pt.tecnico.dsi.openstack.neutron.models.Network.subnets", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Network.html#subnets[F[_]](implicitevidence$1:cats.effect.Sync[F],implicitevidence$2:cats.Parallel[F],implicitneutron:pt.tecnico.dsi.openstack.neutron.NeutronClient[F]):F[List[pt.tecnico.dsi.openstack.neutron.models.Subnet[com.comcast.ip4s.IpAddress]]]", "kind" : "def"}, {"member" : "pt.tecnico.dsi.openstack.neutron.models.Network#<init>", "error" : "unsupported entity"}, {"label" : "links", "tail" : ": List[Link]", "member" : "pt.tecnico.dsi.openstack.neutron.models.Network.links", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Network.html#links:List[pt.tecnico.dsi.openstack.common.models.Link]", "kind" : "val"}, {"label" : "tags", "tail" : ": List[String]", "member" : "pt.tecnico.dsi.openstack.neutron.models.Network.tags", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Network.html#tags:List[String]", "kind" : "val"}, {"label" : "updatedAt", "tail" : ": OffsetDateTime", "member" : "pt.tecnico.dsi.openstack.neutron.models.Network.updatedAt", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Network.html#updatedAt:java.time.OffsetDateTime", "kind" : "val"}, {"label" : "createdAt", "tail" : ": OffsetDateTime", "member" : "pt.tecnico.dsi.openstack.neutron.models.Network.createdAt", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Network.html#createdAt:java.time.OffsetDateTime", "kind" : "val"}, {"label" : "revision", "tail" : ": Int", "member" : "pt.tecnico.dsi.openstack.neutron.models.Network.revision", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Network.html#revision:Int", "kind" : "val"}, {"label" : "availabilityZones", "tail" : ": List[String]", "member" : "pt.tecnico.dsi.openstack.neutron.models.Network.availabilityZones", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Network.html#availabilityZones:List[String]", "kind" : "val"}, {"label" : "availabilityZoneHints", "tail" : ": List[String]", "member" : "pt.tecnico.dsi.openstack.neutron.models.Network.availabilityZoneHints", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Network.html#availabilityZoneHints:List[String]", "kind" : "val"}, {"label" : "isDefault", "tail" : ": Boolean", "member" : "pt.tecnico.dsi.openstack.neutron.models.Network.isDefault", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Network.html#isDefault:Boolean", "kind" : "val"}, {"label" : "shared", "tail" : ": Boolean", "member" : "pt.tecnico.dsi.openstack.neutron.models.Network.shared", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Network.html#shared:Boolean", "kind" : "val"}, {"label" : "routerExternal", "tail" : ": Boolean", "member" : "pt.tecnico.dsi.openstack.neutron.models.Network.routerExternal", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Network.html#routerExternal:Boolean", "kind" : "val"}, {"label" : "portSecurityEnabled", "tail" : ": Boolean", "member" : "pt.tecnico.dsi.openstack.neutron.models.Network.portSecurityEnabled", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Network.html#portSecurityEnabled:Boolean", "kind" : "val"}, {"label" : "segments", "tail" : ": List[Segment]", "member" : "pt.tecnico.dsi.openstack.neutron.models.Network.segments", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Network.html#segments:List[pt.tecnico.dsi.openstack.neutron.models.Network.Segment]", "kind" : "val"}, {"label" : "ipv6AddressScope", "tail" : ": Option[String]", "member" : "pt.tecnico.dsi.openstack.neutron.models.Network.ipv6AddressScope", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Network.html#ipv6AddressScope:Option[String]", "kind" : "val"}, {"label" : "ipv4AddressScope", "tail" : ": Option[String]", "member" : "pt.tecnico.dsi.openstack.neutron.models.Network.ipv4AddressScope", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Network.html#ipv4AddressScope:Option[String]", "kind" : "val"}, {"label" : "subnetIds", "tail" : ": List[String]", "member" : "pt.tecnico.dsi.openstack.neutron.models.Network.subnetIds", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Network.html#subnetIds:List[String]", "kind" : "val"}, {"label" : "dnsDomain", "tail" : ": Option[String]", "member" : "pt.tecnico.dsi.openstack.neutron.models.Network.dnsDomain", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Network.html#dnsDomain:Option[String]", "kind" : "val"}, {"label" : "mtu", "tail" : ": Int", "member" : "pt.tecnico.dsi.openstack.neutron.models.Network.mtu", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Network.html#mtu:Int", "kind" : "val"}, {"label" : "status", "tail" : ": String", "member" : "pt.tecnico.dsi.openstack.neutron.models.Network.status", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Network.html#status:String", "kind" : "val"}, {"label" : "adminStateUp", "tail" : ": Boolean", "member" : "pt.tecnico.dsi.openstack.neutron.models.Network.adminStateUp", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Network.html#adminStateUp:Boolean", "kind" : "val"}, {"label" : "projectId", "tail" : ": String", "member" : "pt.tecnico.dsi.openstack.neutron.models.Network.projectId", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Network.html#projectId:String", "kind" : "val"}, {"label" : "description", "tail" : ": String", "member" : "pt.tecnico.dsi.openstack.neutron.models.Network.description", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Network.html#description:String", "kind" : "val"}, {"label" : "name", "tail" : ": String", "member" : "pt.tecnico.dsi.openstack.neutron.models.Network.name", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Network.html#name:String", "kind" : "val"}, {"label" : "id", "tail" : ": String", "member" : "pt.tecnico.dsi.openstack.neutron.models.Network.id", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Network.html#id:String", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Network.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "linksMap", "tail" : ": Map[String, Uri]", "member" : "pt.tecnico.dsi.openstack.common.models.Identifiable.linksMap", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Network.html#linksMap:Map[String,org.http4s.Uri]", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Network.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Network.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Network.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Network.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Network.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Network.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Network.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Network.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Network.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Network.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Network.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Network.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Network.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Network.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Network.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Network.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Network.html", "kind" : "object"}, {"name" : "pt.tecnico.dsi.openstack.neutron.models.NeutronError", "shortDescription" : "", "object" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/NeutronError$.html", "members_object" : [{"label" : "decoder", "tail" : ": Decoder[NeutronError]", "member" : "pt.tecnico.dsi.openstack.neutron.models.NeutronError.decoder", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/NeutronError$.html#decoder:io.circe.Decoder[pt.tecnico.dsi.openstack.neutron.models.NeutronError]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/NeutronError$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/NeutronError$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/NeutronError$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/NeutronError$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/NeutronError$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/NeutronError$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/NeutronError$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/NeutronError$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/NeutronError$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/NeutronError$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/NeutronError$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/NeutronError$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/NeutronError$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/NeutronError$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/NeutronError$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/NeutronError$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/NeutronError$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/NeutronError$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/NeutronError$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/NeutronError.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/NeutronError.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (NeutronError) => Boolean, msg: => Any): NeutronError", "member" : "scala.Predef.Ensuring.ensuring", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/NeutronError.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (NeutronError) => Boolean): NeutronError", "member" : "scala.Predef.Ensuring.ensuring", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/NeutronError.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): NeutronError", "member" : "scala.Predef.Ensuring.ensuring", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/NeutronError.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): NeutronError", "member" : "scala.Predef.Ensuring.ensuring", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/NeutronError.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (NeutronError, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/NeutronError.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (NeutronError, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/NeutronError.html#->[B](y:B):(A,B)", "kind" : "def"}, {"member" : "pt.tecnico.dsi.openstack.neutron.models.NeutronError#<init>", "error" : "unsupported entity"}, {"label" : "detail", "tail" : ": String", "member" : "pt.tecnico.dsi.openstack.neutron.models.NeutronError.detail", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/NeutronError.html#detail:String", "kind" : "val"}, {"label" : "message", "tail" : ": String", "member" : "pt.tecnico.dsi.openstack.neutron.models.NeutronError.message", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/NeutronError.html#message:String", "kind" : "val"}, {"label" : "type", "tail" : ": String", "member" : "pt.tecnico.dsi.openstack.neutron.models.NeutronError.type", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/NeutronError.html#type:String", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/NeutronError.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/NeutronError.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/NeutronError.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/NeutronError.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/NeutronError.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/NeutronError.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/NeutronError.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/NeutronError.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/NeutronError.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/NeutronError.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/NeutronError.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/NeutronError.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/NeutronError.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/NeutronError.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/NeutronError.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/NeutronError.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/NeutronError.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/NeutronError.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/NeutronError.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/NeutronError.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/NeutronError.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/NeutronError.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/NeutronError.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/NeutronError.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/NeutronError.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/NeutronError.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/NeutronError.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/NeutronError.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/NeutronError.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/NeutronError.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/NeutronError.html", "kind" : "object"}, {"name" : "pt.tecnico.dsi.openstack.neutron.models.Quota", "shortDescription" : "", "object" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Quota$.html", "members_object" : [{"label" : "show", "tail" : ": ShowPretty[Quota]", "member" : "pt.tecnico.dsi.openstack.neutron.models.Quota.show", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Quota$.html#show:cats.derived.ShowPretty[pt.tecnico.dsi.openstack.neutron.models.Quota]", "kind" : "implicit val"}, {"label" : "decoder", "tail" : ": Decoder[Quota]", "member" : "pt.tecnico.dsi.openstack.neutron.models.Quota.decoder", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Quota$.html#decoder:io.circe.Decoder[pt.tecnico.dsi.openstack.neutron.models.Quota]", "kind" : "implicit val"}, {"label" : "Update", "tail" : "", "member" : "pt.tecnico.dsi.openstack.neutron.models.Quota.Update", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Quota$.html#UpdateextendsProductwithSerializable", "kind" : "case class"}, {"label" : "Update", "tail" : "", "member" : "pt.tecnico.dsi.openstack.neutron.models.Quota.Update", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Quota$.html#Update", "kind" : "object"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Quota$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Quota$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Quota$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Quota$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Quota$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Quota$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Quota$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Quota$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Quota$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Quota$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Quota$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Quota$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Quota$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Quota$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Quota$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Quota$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Quota$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Quota$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Quota$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Quota.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Quota.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Quota) => Boolean, msg: => Any): Quota", "member" : "scala.Predef.Ensuring.ensuring", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Quota.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Quota) => Boolean): Quota", "member" : "scala.Predef.Ensuring.ensuring", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Quota.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): Quota", "member" : "scala.Predef.Ensuring.ensuring", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Quota.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Quota", "member" : "scala.Predef.Ensuring.ensuring", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Quota.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Quota, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Quota.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Quota, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Quota.html#->[B](y:B):(A,B)", "kind" : "def"}, {"member" : "pt.tecnico.dsi.openstack.neutron.models.Quota#<init>", "error" : "unsupported entity"}, {"label" : "subnetpool", "tail" : ": Int", "member" : "pt.tecnico.dsi.openstack.neutron.models.Quota.subnetpool", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Quota.html#subnetpool:Int", "kind" : "val"}, {"label" : "subnet", "tail" : ": Int", "member" : "pt.tecnico.dsi.openstack.neutron.models.Quota.subnet", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Quota.html#subnet:Int", "kind" : "val"}, {"label" : "securityGroupRule", "tail" : ": Int", "member" : "pt.tecnico.dsi.openstack.neutron.models.Quota.securityGroupRule", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Quota.html#securityGroupRule:Int", "kind" : "val"}, {"label" : "securityGroup", "tail" : ": Int", "member" : "pt.tecnico.dsi.openstack.neutron.models.Quota.securityGroup", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Quota.html#securityGroup:Int", "kind" : "val"}, {"label" : "router", "tail" : ": Int", "member" : "pt.tecnico.dsi.openstack.neutron.models.Quota.router", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Quota.html#router:Int", "kind" : "val"}, {"label" : "rbacPolicy", "tail" : ": Int", "member" : "pt.tecnico.dsi.openstack.neutron.models.Quota.rbacPolicy", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Quota.html#rbacPolicy:Int", "kind" : "val"}, {"label" : "port", "tail" : ": Int", "member" : "pt.tecnico.dsi.openstack.neutron.models.Quota.port", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Quota.html#port:Int", "kind" : "val"}, {"label" : "network", "tail" : ": Int", "member" : "pt.tecnico.dsi.openstack.neutron.models.Quota.network", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Quota.html#network:Int", "kind" : "val"}, {"label" : "floatingip", "tail" : ": Int", "member" : "pt.tecnico.dsi.openstack.neutron.models.Quota.floatingip", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Quota.html#floatingip:Int", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Quota.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Quota.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Quota.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Quota.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Quota.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Quota.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Quota.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Quota.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Quota.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Quota.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Quota.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Quota.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Quota.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Quota.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Quota.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Quota.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Quota.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Quota.html", "kind" : "object"}, {"name" : "pt.tecnico.dsi.openstack.neutron.models.Route", "shortDescription" : "", "object" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Route$.html", "members_object" : [{"label" : "show", "tail" : "(arg0: Typeable[IP]): Show[Route[IP]]", "member" : "pt.tecnico.dsi.openstack.neutron.models.Route.show", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Route$.html#show[IP<:com.comcast.ip4s.IpAddress](implicitevidence$4:shapeless.Typeable[IP]):cats.Show[pt.tecnico.dsi.openstack.neutron.models.Route[IP]]", "kind" : "implicit def"}, {"label" : "ordering", "tail" : "(arg0: Ordering[IP]): Ordering[Route[IP]]", "member" : "pt.tecnico.dsi.openstack.neutron.models.Route.ordering", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Route$.html#ordering[IP<:com.comcast.ip4s.IpAddress](implicitevidence$3:Ordering[IP]):Ordering[pt.tecnico.dsi.openstack.neutron.models.Route[IP]]", "kind" : "implicit def"}, {"label" : "decoder", "tail" : "(arg0: Decoder[IP], d: Decoder[Cidr[IP]]): Decoder[Route[IP]]", "member" : "pt.tecnico.dsi.openstack.neutron.models.Route.decoder", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Route$.html#decoder[IP<:com.comcast.ip4s.IpAddress](implicitevidence$2:io.circe.Decoder[IP],implicitd:io.circe.Decoder[com.comcast.ip4s.Cidr[IP]]):io.circe.Decoder[pt.tecnico.dsi.openstack.neutron.models.Route[IP]]", "kind" : "implicit def"}, {"label" : "encoder", "tail" : "(arg0: Encoder[IP]): Encoder[Route[IP]]", "member" : "pt.tecnico.dsi.openstack.neutron.models.Route.encoder", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Route$.html#encoder[IP<:com.comcast.ip4s.IpAddress](implicitevidence$1:io.circe.Encoder[IP]):io.circe.Encoder[pt.tecnico.dsi.openstack.neutron.models.Route[IP]]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Route$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Route$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Route$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Route$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Route$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Route$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Route$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Route$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Route$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Route$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Route$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Route$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Route$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Route$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Route$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Route$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Route$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Route$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Route$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Route.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Route.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Route[IP]) => Boolean, msg: => Any): Route[IP]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Route.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Route[IP]) => Boolean): Route[IP]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Route.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): Route[IP]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Route.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Route[IP]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Route.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Route[IP], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Route.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Route[IP], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Route.html#->[B](y:B):(A,B)", "kind" : "def"}, {"member" : "pt.tecnico.dsi.openstack.neutron.models.Route#<init>", "error" : "unsupported entity"}, {"label" : "nexthop", "tail" : ": IP", "member" : "pt.tecnico.dsi.openstack.neutron.models.Route.nexthop", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Route.html#nexthop:IP", "kind" : "val"}, {"label" : "destination", "tail" : ": Cidr[IP]", "member" : "pt.tecnico.dsi.openstack.neutron.models.Route.destination", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Route.html#destination:com.comcast.ip4s.Cidr[IP]", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Route.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Route.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Route.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Route.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Route.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Route.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Route.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Route.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Route.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Route.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Route.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Route.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Route.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Route.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Route.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Route.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Route.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Route.html", "kind" : "object"}, {"name" : "pt.tecnico.dsi.openstack.neutron.models.Router", "shortDescription" : "", "object" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Router$.html", "members_object" : [{"label" : "show", "tail" : ": ShowPretty[Router]", "member" : "pt.tecnico.dsi.openstack.neutron.models.Router.show", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Router$.html#show:cats.derived.ShowPretty[pt.tecnico.dsi.openstack.neutron.models.Router]", "kind" : "implicit val"}, {"label" : "decoder", "tail" : ": Decoder[Router]", "member" : "pt.tecnico.dsi.openstack.neutron.models.Router.decoder", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Router$.html#decoder:io.circe.Decoder[pt.tecnico.dsi.openstack.neutron.models.Router]", "kind" : "implicit val"}, {"label" : "ExternalGatewayInfo", "tail" : "", "member" : "pt.tecnico.dsi.openstack.neutron.models.Router.ExternalGatewayInfo", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Router$.html#ExternalGatewayInfoextendsProductwithSerializable", "kind" : "case class"}, {"label" : "ExternalGatewayInfo", "tail" : "", "member" : "pt.tecnico.dsi.openstack.neutron.models.Router.ExternalGatewayInfo", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Router$.html#ExternalGatewayInfo", "kind" : "object"}, {"label" : "ExternalIp", "tail" : "", "member" : "pt.tecnico.dsi.openstack.neutron.models.Router.ExternalIp", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Router$.html#ExternalIpextendsProductwithSerializable", "kind" : "case class"}, {"label" : "ExternalIp", "tail" : "", "member" : "pt.tecnico.dsi.openstack.neutron.models.Router.ExternalIp", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Router$.html#ExternalIp", "kind" : "object"}, {"label" : "ConntrackHelper", "tail" : "", "member" : "pt.tecnico.dsi.openstack.neutron.models.Router.ConntrackHelper", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Router$.html#ConntrackHelperextendsProductwithSerializable", "kind" : "case class"}, {"label" : "ConntrackHelper", "tail" : "", "member" : "pt.tecnico.dsi.openstack.neutron.models.Router.ConntrackHelper", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Router$.html#ConntrackHelper", "kind" : "object"}, {"label" : "Update", "tail" : "", "member" : "pt.tecnico.dsi.openstack.neutron.models.Router.Update", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Router$.html#UpdateextendsProductwithSerializable", "kind" : "case class"}, {"label" : "Update", "tail" : "", "member" : "pt.tecnico.dsi.openstack.neutron.models.Router.Update", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Router$.html#Update", "kind" : "object"}, {"label" : "Create", "tail" : "", "member" : "pt.tecnico.dsi.openstack.neutron.models.Router.Create", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Router$.html#CreateextendsProductwithSerializable", "kind" : "case class"}, {"label" : "Create", "tail" : "", "member" : "pt.tecnico.dsi.openstack.neutron.models.Router.Create", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Router$.html#Create", "kind" : "object"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Router$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Router$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Router$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Router$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Router$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Router$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Router$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Router$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Router$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Router$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Router$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Router$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Router$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Router$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Router$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Router$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Router$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Router$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Router$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Router.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Router.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Router) => Boolean, msg: => Any): Router", "member" : "scala.Predef.Ensuring.ensuring", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Router.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Router) => Boolean): Router", "member" : "scala.Predef.Ensuring.ensuring", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Router.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): Router", "member" : "scala.Predef.Ensuring.ensuring", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Router.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Router", "member" : "scala.Predef.Ensuring.ensuring", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Router.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Router, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Router.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Router, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Router.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "project", "tail" : "(arg0: Sync[F], keystone: KeystoneClient[F]): F[Project]", "member" : "pt.tecnico.dsi.openstack.neutron.models.Router.project", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Router.html#project[F[_]](implicitevidence$1:cats.effect.Sync[F],implicitkeystone:pt.tecnico.dsi.openstack.keystone.KeystoneClient[F]):F[pt.tecnico.dsi.openstack.keystone.models.Project]", "kind" : "def"}, {"member" : "pt.tecnico.dsi.openstack.neutron.models.Router#<init>", "error" : "unsupported entity"}, {"label" : "links", "tail" : ": List[Link]", "member" : "pt.tecnico.dsi.openstack.neutron.models.Router.links", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Router.html#links:List[pt.tecnico.dsi.openstack.common.models.Link]", "kind" : "val"}, {"label" : "tags", "tail" : ": List[String]", "member" : "pt.tecnico.dsi.openstack.neutron.models.Router.tags", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Router.html#tags:List[String]", "kind" : "val"}, {"label" : "updatedAt", "tail" : ": OffsetDateTime", "member" : "pt.tecnico.dsi.openstack.neutron.models.Router.updatedAt", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Router.html#updatedAt:java.time.OffsetDateTime", "kind" : "val"}, {"label" : "createdAt", "tail" : ": OffsetDateTime", "member" : "pt.tecnico.dsi.openstack.neutron.models.Router.createdAt", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Router.html#createdAt:java.time.OffsetDateTime", "kind" : "val"}, {"label" : "revision", "tail" : ": Int", "member" : "pt.tecnico.dsi.openstack.neutron.models.Router.revision", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Router.html#revision:Int", "kind" : "val"}, {"label" : "availabilityZones", "tail" : ": List[String]", "member" : "pt.tecnico.dsi.openstack.neutron.models.Router.availabilityZones", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Router.html#availabilityZones:List[String]", "kind" : "val"}, {"label" : "availabilityZoneHints", "tail" : ": List[String]", "member" : "pt.tecnico.dsi.openstack.neutron.models.Router.availabilityZoneHints", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Router.html#availabilityZoneHints:List[String]", "kind" : "val"}, {"label" : "conntrackHelpers", "tail" : ": List[ConntrackHelper]", "member" : "pt.tecnico.dsi.openstack.neutron.models.Router.conntrackHelpers", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Router.html#conntrackHelpers:List[pt.tecnico.dsi.openstack.neutron.models.Router.ConntrackHelper]", "kind" : "val"}, {"label" : "flavorId", "tail" : ": Option[String]", "member" : "pt.tecnico.dsi.openstack.neutron.models.Router.flavorId", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Router.html#flavorId:Option[String]", "kind" : "val"}, {"label" : "ha", "tail" : ": Boolean", "member" : "pt.tecnico.dsi.openstack.neutron.models.Router.ha", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Router.html#ha:Boolean", "kind" : "val"}, {"label" : "distributed", "tail" : ": Boolean", "member" : "pt.tecnico.dsi.openstack.neutron.models.Router.distributed", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Router.html#distributed:Boolean", "kind" : "val"}, {"label" : "routes", "tail" : ": List[Route[IpAddress]]", "member" : "pt.tecnico.dsi.openstack.neutron.models.Router.routes", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Router.html#routes:List[pt.tecnico.dsi.openstack.neutron.models.Route[com.comcast.ip4s.IpAddress]]", "kind" : "val"}, {"label" : "externalGatewayInfo", "tail" : ": Option[ExternalGatewayInfo]", "member" : "pt.tecnico.dsi.openstack.neutron.models.Router.externalGatewayInfo", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Router.html#externalGatewayInfo:Option[pt.tecnico.dsi.openstack.neutron.models.Router.ExternalGatewayInfo]", "kind" : "val"}, {"label" : "status", "tail" : ": String", "member" : "pt.tecnico.dsi.openstack.neutron.models.Router.status", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Router.html#status:String", "kind" : "val"}, {"label" : "adminStateUp", "tail" : ": Boolean", "member" : "pt.tecnico.dsi.openstack.neutron.models.Router.adminStateUp", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Router.html#adminStateUp:Boolean", "kind" : "val"}, {"label" : "projectId", "tail" : ": String", "member" : "pt.tecnico.dsi.openstack.neutron.models.Router.projectId", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Router.html#projectId:String", "kind" : "val"}, {"label" : "description", "tail" : ": String", "member" : "pt.tecnico.dsi.openstack.neutron.models.Router.description", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Router.html#description:String", "kind" : "val"}, {"label" : "name", "tail" : ": String", "member" : "pt.tecnico.dsi.openstack.neutron.models.Router.name", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Router.html#name:String", "kind" : "val"}, {"label" : "id", "tail" : ": String", "member" : "pt.tecnico.dsi.openstack.neutron.models.Router.id", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Router.html#id:String", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Router.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "linksMap", "tail" : ": Map[String, Uri]", "member" : "pt.tecnico.dsi.openstack.common.models.Identifiable.linksMap", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Router.html#linksMap:Map[String,org.http4s.Uri]", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Router.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Router.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Router.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Router.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Router.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Router.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Router.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Router.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Router.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Router.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Router.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Router.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Router.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Router.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Router.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Router.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Router.html", "kind" : "object"}, {"name" : "pt.tecnico.dsi.openstack.neutron.models.RouterInterface", "shortDescription" : "", "object" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/RouterInterface$.html", "members_object" : [{"label" : "show", "tail" : ": ShowPretty[RouterInterface]", "member" : "pt.tecnico.dsi.openstack.neutron.models.RouterInterface.show", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/RouterInterface$.html#show:cats.derived.ShowPretty[pt.tecnico.dsi.openstack.neutron.models.RouterInterface]", "kind" : "implicit val"}, {"label" : "decoder", "tail" : ": Decoder[RouterInterface]", "member" : "pt.tecnico.dsi.openstack.neutron.models.RouterInterface.decoder", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/RouterInterface$.html#decoder:io.circe.Decoder[pt.tecnico.dsi.openstack.neutron.models.RouterInterface]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/RouterInterface$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/RouterInterface$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/RouterInterface$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/RouterInterface$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/RouterInterface$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/RouterInterface$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/RouterInterface$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/RouterInterface$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/RouterInterface$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/RouterInterface$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/RouterInterface$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/RouterInterface$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/RouterInterface$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/RouterInterface$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/RouterInterface$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/RouterInterface$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/RouterInterface$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/RouterInterface$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/RouterInterface$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/RouterInterface.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/RouterInterface.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (RouterInterface) => Boolean, msg: => Any): RouterInterface", "member" : "scala.Predef.Ensuring.ensuring", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/RouterInterface.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (RouterInterface) => Boolean): RouterInterface", "member" : "scala.Predef.Ensuring.ensuring", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/RouterInterface.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): RouterInterface", "member" : "scala.Predef.Ensuring.ensuring", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/RouterInterface.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): RouterInterface", "member" : "scala.Predef.Ensuring.ensuring", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/RouterInterface.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (RouterInterface, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/RouterInterface.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (RouterInterface, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/RouterInterface.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "subnet", "tail" : "(arg0: Sync[F], neutron: NeutronClient[F]): F[Subnet[IpAddress]]", "member" : "pt.tecnico.dsi.openstack.neutron.models.RouterInterface.subnet", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/RouterInterface.html#subnet[F[_]](implicitevidence$4:cats.effect.Sync[F],implicitneutron:pt.tecnico.dsi.openstack.neutron.NeutronClient[F]):F[pt.tecnico.dsi.openstack.neutron.models.Subnet[com.comcast.ip4s.IpAddress]]", "kind" : "def"}, {"label" : "project", "tail" : "(arg0: Sync[F], keystone: KeystoneClient[F]): F[Project]", "member" : "pt.tecnico.dsi.openstack.neutron.models.RouterInterface.project", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/RouterInterface.html#project[F[_]](implicitevidence$3:cats.effect.Sync[F],implicitkeystone:pt.tecnico.dsi.openstack.keystone.KeystoneClient[F]):F[pt.tecnico.dsi.openstack.keystone.models.Project]", "kind" : "def"}, {"label" : "network", "tail" : "(arg0: Sync[F], neutron: NeutronClient[F]): F[Network]", "member" : "pt.tecnico.dsi.openstack.neutron.models.RouterInterface.network", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/RouterInterface.html#network[F[_]](implicitevidence$2:cats.effect.Sync[F],implicitneutron:pt.tecnico.dsi.openstack.neutron.NeutronClient[F]):F[pt.tecnico.dsi.openstack.neutron.models.Network]", "kind" : "def"}, {"label" : "router", "tail" : "(arg0: Sync[F], neutron: NeutronClient[F]): F[Router]", "member" : "pt.tecnico.dsi.openstack.neutron.models.RouterInterface.router", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/RouterInterface.html#router[F[_]](implicitevidence$1:cats.effect.Sync[F],implicitneutron:pt.tecnico.dsi.openstack.neutron.NeutronClient[F]):F[pt.tecnico.dsi.openstack.neutron.models.Router]", "kind" : "def"}, {"member" : "pt.tecnico.dsi.openstack.neutron.models.RouterInterface#<init>", "error" : "unsupported entity"}, {"label" : "tags", "tail" : ": List[String]", "member" : "pt.tecnico.dsi.openstack.neutron.models.RouterInterface.tags", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/RouterInterface.html#tags:List[String]", "kind" : "val"}, {"label" : "portId", "tail" : ": String", "member" : "pt.tecnico.dsi.openstack.neutron.models.RouterInterface.portId", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/RouterInterface.html#portId:String", "kind" : "val"}, {"label" : "subnetId", "tail" : ": String", "member" : "pt.tecnico.dsi.openstack.neutron.models.RouterInterface.subnetId", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/RouterInterface.html#subnetId:String", "kind" : "val"}, {"label" : "projectId", "tail" : ": String", "member" : "pt.tecnico.dsi.openstack.neutron.models.RouterInterface.projectId", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/RouterInterface.html#projectId:String", "kind" : "val"}, {"label" : "networkId", "tail" : ": String", "member" : "pt.tecnico.dsi.openstack.neutron.models.RouterInterface.networkId", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/RouterInterface.html#networkId:String", "kind" : "val"}, {"label" : "routerId", "tail" : ": String", "member" : "pt.tecnico.dsi.openstack.neutron.models.RouterInterface.routerId", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/RouterInterface.html#routerId:String", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/RouterInterface.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/RouterInterface.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/RouterInterface.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/RouterInterface.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/RouterInterface.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/RouterInterface.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/RouterInterface.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/RouterInterface.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/RouterInterface.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/RouterInterface.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/RouterInterface.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/RouterInterface.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/RouterInterface.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/RouterInterface.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/RouterInterface.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/RouterInterface.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/RouterInterface.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/RouterInterface.html", "kind" : "object"}, {"name" : "pt.tecnico.dsi.openstack.neutron.models.SecurityGroup", "shortDescription" : "", "object" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroup$.html", "members_object" : [{"label" : "show", "tail" : ": ShowPretty[SecurityGroup]", "member" : "pt.tecnico.dsi.openstack.neutron.models.SecurityGroup.show", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroup$.html#show:cats.derived.ShowPretty[pt.tecnico.dsi.openstack.neutron.models.SecurityGroup]", "kind" : "implicit val"}, {"label" : "decoder", "tail" : ": Decoder[SecurityGroup]", "member" : "pt.tecnico.dsi.openstack.neutron.models.SecurityGroup.decoder", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroup$.html#decoder:io.circe.Decoder[pt.tecnico.dsi.openstack.neutron.models.SecurityGroup]", "kind" : "implicit val"}, {"label" : "Update", "tail" : "", "member" : "pt.tecnico.dsi.openstack.neutron.models.SecurityGroup.Update", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroup$.html#UpdateextendsProductwithSerializable", "kind" : "case class"}, {"label" : "Update", "tail" : "", "member" : "pt.tecnico.dsi.openstack.neutron.models.SecurityGroup.Update", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroup$.html#Update", "kind" : "object"}, {"label" : "Create", "tail" : "", "member" : "pt.tecnico.dsi.openstack.neutron.models.SecurityGroup.Create", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroup$.html#CreateextendsProductwithSerializable", "kind" : "case class"}, {"label" : "Create", "tail" : "", "member" : "pt.tecnico.dsi.openstack.neutron.models.SecurityGroup.Create", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroup$.html#Create", "kind" : "object"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroup$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroup$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroup$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroup$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroup$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroup$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroup$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroup$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroup$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroup$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroup$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroup$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroup$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroup$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroup$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroup$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroup$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroup$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroup$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroup.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroup.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (SecurityGroup) => Boolean, msg: => Any): SecurityGroup", "member" : "scala.Predef.Ensuring.ensuring", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroup.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (SecurityGroup) => Boolean): SecurityGroup", "member" : "scala.Predef.Ensuring.ensuring", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroup.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): SecurityGroup", "member" : "scala.Predef.Ensuring.ensuring", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroup.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): SecurityGroup", "member" : "scala.Predef.Ensuring.ensuring", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroup.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (SecurityGroup, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroup.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (SecurityGroup, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroup.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "addRule", "tail" : "(rule: (String) => Create)(arg0: Sync[F], neutron: NeutronClient[F]): F[SecurityGroupRule]", "member" : "pt.tecnico.dsi.openstack.neutron.models.SecurityGroup.addRule", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroup.html#addRule[F[_]](rule:String=>pt.tecnico.dsi.openstack.neutron.models.SecurityGroupRule.Create)(implicitevidence$3:cats.effect.Sync[F],implicitneutron:pt.tecnico.dsi.openstack.neutron.NeutronClient[F]):F[pt.tecnico.dsi.openstack.neutron.models.SecurityGroupRule]", "kind" : "def"}, {"label" : "rules", "tail" : "(arg0: Sync[F], neutron: NeutronClient[F]): F[List[SecurityGroupRule]]", "member" : "pt.tecnico.dsi.openstack.neutron.models.SecurityGroup.rules", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroup.html#rules[F[_]](implicitevidence$2:cats.effect.Sync[F],implicitneutron:pt.tecnico.dsi.openstack.neutron.NeutronClient[F]):F[List[pt.tecnico.dsi.openstack.neutron.models.SecurityGroupRule]]", "kind" : "def"}, {"label" : "project", "tail" : "(arg0: Sync[F], keystone: KeystoneClient[F]): F[Project]", "member" : "pt.tecnico.dsi.openstack.neutron.models.SecurityGroup.project", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroup.html#project[F[_]](implicitevidence$1:cats.effect.Sync[F],implicitkeystone:pt.tecnico.dsi.openstack.keystone.KeystoneClient[F]):F[pt.tecnico.dsi.openstack.keystone.models.Project]", "kind" : "def"}, {"member" : "pt.tecnico.dsi.openstack.neutron.models.SecurityGroup#<init>", "error" : "unsupported entity"}, {"label" : "links", "tail" : ": List[Link]", "member" : "pt.tecnico.dsi.openstack.neutron.models.SecurityGroup.links", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroup.html#links:List[pt.tecnico.dsi.openstack.common.models.Link]", "kind" : "val"}, {"label" : "tags", "tail" : ": List[String]", "member" : "pt.tecnico.dsi.openstack.neutron.models.SecurityGroup.tags", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroup.html#tags:List[String]", "kind" : "val"}, {"label" : "updatedAt", "tail" : ": OffsetDateTime", "member" : "pt.tecnico.dsi.openstack.neutron.models.SecurityGroup.updatedAt", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroup.html#updatedAt:java.time.OffsetDateTime", "kind" : "val"}, {"label" : "createdAt", "tail" : ": OffsetDateTime", "member" : "pt.tecnico.dsi.openstack.neutron.models.SecurityGroup.createdAt", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroup.html#createdAt:java.time.OffsetDateTime", "kind" : "val"}, {"label" : "revision", "tail" : ": Int", "member" : "pt.tecnico.dsi.openstack.neutron.models.SecurityGroup.revision", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroup.html#revision:Int", "kind" : "val"}, {"label" : "description", "tail" : ": String", "member" : "pt.tecnico.dsi.openstack.neutron.models.SecurityGroup.description", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroup.html#description:String", "kind" : "val"}, {"label" : "name", "tail" : ": String", "member" : "pt.tecnico.dsi.openstack.neutron.models.SecurityGroup.name", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroup.html#name:String", "kind" : "val"}, {"label" : "projectId", "tail" : ": String", "member" : "pt.tecnico.dsi.openstack.neutron.models.SecurityGroup.projectId", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroup.html#projectId:String", "kind" : "val"}, {"label" : "id", "tail" : ": String", "member" : "pt.tecnico.dsi.openstack.neutron.models.SecurityGroup.id", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroup.html#id:String", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroup.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "linksMap", "tail" : ": Map[String, Uri]", "member" : "pt.tecnico.dsi.openstack.common.models.Identifiable.linksMap", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroup.html#linksMap:Map[String,org.http4s.Uri]", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroup.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroup.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroup.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroup.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroup.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroup.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroup.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroup.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroup.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroup.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroup.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroup.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroup.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroup.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroup.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroup.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroup.html", "kind" : "object"}, {"name" : "pt.tecnico.dsi.openstack.neutron.models.SecurityGroupRule", "shortDescription" : "", "object" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroupRule$.html", "members_object" : [{"label" : "show", "tail" : ": ShowPretty[SecurityGroupRule]", "member" : "pt.tecnico.dsi.openstack.neutron.models.SecurityGroupRule.show", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroupRule$.html#show:cats.derived.ShowPretty[pt.tecnico.dsi.openstack.neutron.models.SecurityGroupRule]", "kind" : "implicit val"}, {"label" : "decoder", "tail" : ": Decoder[SecurityGroupRule]", "member" : "pt.tecnico.dsi.openstack.neutron.models.SecurityGroupRule.decoder", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroupRule$.html#decoder:io.circe.Decoder[pt.tecnico.dsi.openstack.neutron.models.SecurityGroupRule]", "kind" : "implicit val"}, {"label" : "Create", "tail" : "", "member" : "pt.tecnico.dsi.openstack.neutron.models.SecurityGroupRule.Create", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroupRule$.html#CreateextendsProductwithSerializable", "kind" : "case class"}, {"label" : "Create", "tail" : "", "member" : "pt.tecnico.dsi.openstack.neutron.models.SecurityGroupRule.Create", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroupRule$.html#Create", "kind" : "object"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroupRule$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroupRule$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroupRule$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroupRule$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroupRule$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroupRule$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroupRule$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroupRule$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroupRule$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroupRule$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroupRule$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroupRule$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroupRule$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroupRule$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroupRule$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroupRule$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroupRule$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroupRule$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroupRule$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroupRule.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroupRule.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (SecurityGroupRule) => Boolean, msg: => Any): SecurityGroupRule", "member" : "scala.Predef.Ensuring.ensuring", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroupRule.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (SecurityGroupRule) => Boolean): SecurityGroupRule", "member" : "scala.Predef.Ensuring.ensuring", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroupRule.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): SecurityGroupRule", "member" : "scala.Predef.Ensuring.ensuring", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroupRule.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): SecurityGroupRule", "member" : "scala.Predef.Ensuring.ensuring", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroupRule.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (SecurityGroupRule, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroupRule.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (SecurityGroupRule, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroupRule.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "securityGroup", "tail" : "(arg0: Sync[F], neutron: NeutronClient[F]): F[SecurityGroup]", "member" : "pt.tecnico.dsi.openstack.neutron.models.SecurityGroupRule.securityGroup", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroupRule.html#securityGroup[F[_]](implicitevidence$2:cats.effect.Sync[F],implicitneutron:pt.tecnico.dsi.openstack.neutron.NeutronClient[F]):F[pt.tecnico.dsi.openstack.neutron.models.SecurityGroup]", "kind" : "def"}, {"label" : "project", "tail" : "(arg0: Sync[F], keystone: KeystoneClient[F]): F[Project]", "member" : "pt.tecnico.dsi.openstack.neutron.models.SecurityGroupRule.project", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroupRule.html#project[F[_]](implicitevidence$1:cats.effect.Sync[F],implicitkeystone:pt.tecnico.dsi.openstack.keystone.KeystoneClient[F]):F[pt.tecnico.dsi.openstack.keystone.models.Project]", "kind" : "def"}, {"member" : "pt.tecnico.dsi.openstack.neutron.models.SecurityGroupRule#<init>", "error" : "unsupported entity"}, {"label" : "links", "tail" : ": List[Link]", "member" : "pt.tecnico.dsi.openstack.neutron.models.SecurityGroupRule.links", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroupRule.html#links:List[pt.tecnico.dsi.openstack.common.models.Link]", "kind" : "val"}, {"label" : "updatedAt", "tail" : ": OffsetDateTime", "member" : "pt.tecnico.dsi.openstack.neutron.models.SecurityGroupRule.updatedAt", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroupRule.html#updatedAt:java.time.OffsetDateTime", "kind" : "val"}, {"label" : "createdAt", "tail" : ": OffsetDateTime", "member" : "pt.tecnico.dsi.openstack.neutron.models.SecurityGroupRule.createdAt", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroupRule.html#createdAt:java.time.OffsetDateTime", "kind" : "val"}, {"label" : "revision", "tail" : ": Int", "member" : "pt.tecnico.dsi.openstack.neutron.models.SecurityGroupRule.revision", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroupRule.html#revision:Int", "kind" : "val"}, {"label" : "remote", "tail" : ": Option[Either[Cidr[IpAddress], String]]", "member" : "pt.tecnico.dsi.openstack.neutron.models.SecurityGroupRule.remote", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroupRule.html#remote:Option[Either[com.comcast.ip4s.Cidr[com.comcast.ip4s.IpAddress],String]]", "kind" : "val"}, {"label" : "portRangeMax", "tail" : ": Option[Int]", "member" : "pt.tecnico.dsi.openstack.neutron.models.SecurityGroupRule.portRangeMax", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroupRule.html#portRangeMax:Option[Int]", "kind" : "val"}, {"label" : "portRangeMin", "tail" : ": Option[Int]", "member" : "pt.tecnico.dsi.openstack.neutron.models.SecurityGroupRule.portRangeMin", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroupRule.html#portRangeMin:Option[Int]", "kind" : "val"}, {"label" : "protocol", "tail" : ": Option[String]", "member" : "pt.tecnico.dsi.openstack.neutron.models.SecurityGroupRule.protocol", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroupRule.html#protocol:Option[String]", "kind" : "val"}, {"label" : "ipVersion", "tail" : ": IpVersion", "member" : "pt.tecnico.dsi.openstack.neutron.models.SecurityGroupRule.ipVersion", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroupRule.html#ipVersion:com.comcast.ip4s.IpVersion", "kind" : "val"}, {"label" : "direction", "tail" : ": Direction", "member" : "pt.tecnico.dsi.openstack.neutron.models.SecurityGroupRule.direction", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroupRule.html#direction:pt.tecnico.dsi.openstack.neutron.models.Direction", "kind" : "val"}, {"label" : "securityGroupId", "tail" : ": String", "member" : "pt.tecnico.dsi.openstack.neutron.models.SecurityGroupRule.securityGroupId", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroupRule.html#securityGroupId:String", "kind" : "val"}, {"label" : "description", "tail" : ": Option[String]", "member" : "pt.tecnico.dsi.openstack.neutron.models.SecurityGroupRule.description", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroupRule.html#description:Option[String]", "kind" : "val"}, {"label" : "projectId", "tail" : ": String", "member" : "pt.tecnico.dsi.openstack.neutron.models.SecurityGroupRule.projectId", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroupRule.html#projectId:String", "kind" : "val"}, {"label" : "id", "tail" : ": String", "member" : "pt.tecnico.dsi.openstack.neutron.models.SecurityGroupRule.id", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroupRule.html#id:String", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroupRule.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "linksMap", "tail" : ": Map[String, Uri]", "member" : "pt.tecnico.dsi.openstack.common.models.Identifiable.linksMap", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroupRule.html#linksMap:Map[String,org.http4s.Uri]", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroupRule.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroupRule.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroupRule.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroupRule.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroupRule.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroupRule.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroupRule.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroupRule.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroupRule.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroupRule.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroupRule.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroupRule.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroupRule.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroupRule.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroupRule.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroupRule.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SecurityGroupRule.html", "kind" : "object"}, {"name" : "pt.tecnico.dsi.openstack.neutron.models.Subnet", "object" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Subnet$.html", "members_object" : [{"label" : "show", "tail" : "(): ShowPretty[Subnet[IP]]", "member" : "pt.tecnico.dsi.openstack.neutron.models.Subnet.show", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Subnet$.html#show[IP<:com.comcast.ip4s.IpAddress]:cats.derived.ShowPretty[pt.tecnico.dsi.openstack.neutron.models.Subnet[IP]]", "kind" : "implicit def"}, {"label" : "decoder", "tail" : ": Decoder[Subnet[IpAddress]]", "member" : "pt.tecnico.dsi.openstack.neutron.models.Subnet.decoder", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Subnet$.html#decoder:io.circe.Decoder[pt.tecnico.dsi.openstack.neutron.models.Subnet[com.comcast.ip4s.IpAddress]]", "kind" : "implicit val"}, {"label" : "decoderV6", "tail" : ": Decoder[SubnetIpv6]", "member" : "pt.tecnico.dsi.openstack.neutron.models.Subnet.decoderV6", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Subnet$.html#decoderV6:io.circe.Decoder[pt.tecnico.dsi.openstack.neutron.models.SubnetIpv6]", "kind" : "implicit val"}, {"label" : "decoderV4", "tail" : ": Decoder[SubnetIpv4]", "member" : "pt.tecnico.dsi.openstack.neutron.models.Subnet.decoderV4", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Subnet$.html#decoderV4:io.circe.Decoder[pt.tecnico.dsi.openstack.neutron.models.SubnetIpv4]", "kind" : "implicit val"}, {"label" : "Update", "tail" : "", "member" : "pt.tecnico.dsi.openstack.neutron.models.Subnet.Update", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Subnet$.html#Update[+IP<:com.comcast.ip4s.IpAddress]extendsProductwithSerializable", "kind" : "case class"}, {"label" : "Update", "tail" : "", "member" : "pt.tecnico.dsi.openstack.neutron.models.Subnet.Update", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Subnet$.html#Update", "kind" : "object"}, {"label" : "Create", "tail" : "", "member" : "pt.tecnico.dsi.openstack.neutron.models.Subnet.Create", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Subnet$.html#Create[+IP<:com.comcast.ip4s.IpAddress]extendsProductwithSerializable", "kind" : "case class"}, {"label" : "Create", "tail" : "", "member" : "pt.tecnico.dsi.openstack.neutron.models.Subnet.Create", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Subnet$.html#Create", "kind" : "object"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Subnet$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Subnet$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Subnet$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Subnet$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Subnet$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Subnet$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Subnet$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Subnet$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Subnet$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Subnet$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Subnet$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Subnet$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Subnet$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Subnet$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Subnet$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Subnet$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Subnet$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Subnet$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Subnet$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Subnet.html", "kind" : "object", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Subnet.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Subnet.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Subnet[IP]) => Boolean, msg: => Any): Subnet[IP]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Subnet.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Subnet[IP]) => Boolean): Subnet[IP]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Subnet.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): Subnet[IP]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Subnet.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Subnet[IP]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Subnet.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Subnet[IP], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Subnet.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Subnet[IP], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Subnet.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "network", "tail" : "(arg0: Sync[F], neutron: NeutronClient[F]): F[Network]", "member" : "pt.tecnico.dsi.openstack.neutron.models.Subnet.network", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Subnet.html#network[F[_]](implicitevidence$4:cats.effect.Sync[F],implicitneutron:pt.tecnico.dsi.openstack.neutron.NeutronClient[F]):F[pt.tecnico.dsi.openstack.neutron.models.Network]", "kind" : "def"}, {"label" : "project", "tail" : "(arg0: Sync[F], keystone: KeystoneClient[F]): F[Project]", "member" : "pt.tecnico.dsi.openstack.neutron.models.Subnet.project", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Subnet.html#project[F[_]](implicitevidence$3:cats.effect.Sync[F],implicitkeystone:pt.tecnico.dsi.openstack.keystone.KeystoneClient[F]):F[pt.tecnico.dsi.openstack.keystone.models.Project]", "kind" : "def"}, {"label" : "linksMap", "tail" : ": Map[String, Uri]", "member" : "pt.tecnico.dsi.openstack.common.models.Identifiable.linksMap", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Subnet.html#linksMap:Map[String,org.http4s.Uri]", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Subnet.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Subnet.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Subnet.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Subnet.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Subnet.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Subnet.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Subnet.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Subnet.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Subnet.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Subnet.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Subnet.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Subnet.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Subnet.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Subnet.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Subnet.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Subnet.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Subnet.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Subnet.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Subnet.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "tags", "tail" : "(): List[String]", "member" : "pt.tecnico.dsi.openstack.neutron.models.Subnet.tags", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Subnet.html#tags:List[String]", "kind" : "abstract def"}, {"label" : "updatedAt", "tail" : "(): OffsetDateTime", "member" : "pt.tecnico.dsi.openstack.neutron.models.Subnet.updatedAt", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Subnet.html#updatedAt:java.time.OffsetDateTime", "kind" : "abstract def"}, {"label" : "createdAt", "tail" : "(): OffsetDateTime", "member" : "pt.tecnico.dsi.openstack.neutron.models.Subnet.createdAt", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Subnet.html#createdAt:java.time.OffsetDateTime", "kind" : "abstract def"}, {"label" : "revision", "tail" : "(): Int", "member" : "pt.tecnico.dsi.openstack.neutron.models.Subnet.revision", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Subnet.html#revision:Int", "kind" : "abstract def"}, {"label" : "serviceTypes", "tail" : "(): List[String]", "member" : "pt.tecnico.dsi.openstack.neutron.models.Subnet.serviceTypes", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Subnet.html#serviceTypes:List[String]", "kind" : "abstract def"}, {"label" : "segmentId", "tail" : "(): Option[String]", "member" : "pt.tecnico.dsi.openstack.neutron.models.Subnet.segmentId", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Subnet.html#segmentId:Option[String]", "kind" : "abstract def"}, {"label" : "subnetpoolId", "tail" : "(): Option[String]", "member" : "pt.tecnico.dsi.openstack.neutron.models.Subnet.subnetpoolId", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Subnet.html#subnetpoolId:Option[String]", "kind" : "abstract def"}, {"label" : "nameservers", "tail" : "(): List[IP]", "member" : "pt.tecnico.dsi.openstack.neutron.models.Subnet.nameservers", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Subnet.html#nameservers:List[IP]", "kind" : "abstract def"}, {"label" : "enableDhcp", "tail" : "(): Boolean", "member" : "pt.tecnico.dsi.openstack.neutron.models.Subnet.enableDhcp", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Subnet.html#enableDhcp:Boolean", "kind" : "abstract def"}, {"label" : "hostRoutes", "tail" : "(): List[Route[IP]]", "member" : "pt.tecnico.dsi.openstack.neutron.models.Subnet.hostRoutes", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Subnet.html#hostRoutes:List[pt.tecnico.dsi.openstack.neutron.models.Route[IP]]", "kind" : "abstract def"}, {"label" : "allocationPools", "tail" : "(): List[AllocationPool[IP]]", "member" : "pt.tecnico.dsi.openstack.neutron.models.Subnet.allocationPools", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Subnet.html#allocationPools:List[pt.tecnico.dsi.openstack.neutron.models.AllocationPool[IP]]", "kind" : "abstract def"}, {"label" : "gateway", "tail" : "(): Option[IP]", "member" : "pt.tecnico.dsi.openstack.neutron.models.Subnet.gateway", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Subnet.html#gateway:Option[IP]", "kind" : "abstract def"}, {"label" : "cidr", "tail" : "(): Cidr[IP]", "member" : "pt.tecnico.dsi.openstack.neutron.models.Subnet.cidr", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Subnet.html#cidr:com.comcast.ip4s.Cidr[IP]", "kind" : "abstract def"}, {"label" : "networkId", "tail" : "(): String", "member" : "pt.tecnico.dsi.openstack.neutron.models.Subnet.networkId", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Subnet.html#networkId:String", "kind" : "abstract def"}, {"label" : "projectId", "tail" : "(): String", "member" : "pt.tecnico.dsi.openstack.neutron.models.Subnet.projectId", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Subnet.html#projectId:String", "kind" : "abstract def"}, {"label" : "description", "tail" : "(): String", "member" : "pt.tecnico.dsi.openstack.neutron.models.Subnet.description", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Subnet.html#description:String", "kind" : "abstract def"}, {"label" : "name", "tail" : "(): String", "member" : "pt.tecnico.dsi.openstack.neutron.models.Subnet.name", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Subnet.html#name:String", "kind" : "abstract def"}, {"label" : "links", "tail" : "(): List[Link]", "member" : "pt.tecnico.dsi.openstack.common.models.Identifiable.links", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Subnet.html#links:List[pt.tecnico.dsi.openstack.common.models.Link]", "kind" : "abstract def"}, {"label" : "id", "tail" : "(): String", "member" : "pt.tecnico.dsi.openstack.common.models.Identifiable.id", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/Subnet.html#id:String", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "pt.tecnico.dsi.openstack.neutron.models.SubnetIpAvailability", "shortDescription" : "", "object" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpAvailability$.html", "members_object" : [{"label" : "show", "tail" : ": ShowPretty[SubnetIpAvailability]", "member" : "pt.tecnico.dsi.openstack.neutron.models.SubnetIpAvailability.show", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpAvailability$.html#show:cats.derived.ShowPretty[pt.tecnico.dsi.openstack.neutron.models.SubnetIpAvailability]", "kind" : "implicit val"}, {"label" : "decoder", "tail" : ": Decoder[SubnetIpAvailability]", "member" : "pt.tecnico.dsi.openstack.neutron.models.SubnetIpAvailability.decoder", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpAvailability$.html#decoder:io.circe.Decoder[pt.tecnico.dsi.openstack.neutron.models.SubnetIpAvailability]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpAvailability$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpAvailability$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpAvailability$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpAvailability$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpAvailability$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpAvailability$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpAvailability$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpAvailability$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpAvailability$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpAvailability$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpAvailability$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpAvailability$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpAvailability$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpAvailability$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpAvailability$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpAvailability$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpAvailability$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpAvailability$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpAvailability$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpAvailability.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpAvailability.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (SubnetIpAvailability) => Boolean, msg: => Any): SubnetIpAvailability", "member" : "scala.Predef.Ensuring.ensuring", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpAvailability.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (SubnetIpAvailability) => Boolean): SubnetIpAvailability", "member" : "scala.Predef.Ensuring.ensuring", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpAvailability.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): SubnetIpAvailability", "member" : "scala.Predef.Ensuring.ensuring", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpAvailability.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): SubnetIpAvailability", "member" : "scala.Predef.Ensuring.ensuring", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpAvailability.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (SubnetIpAvailability, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpAvailability.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (SubnetIpAvailability, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpAvailability.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "subnet", "tail" : "(arg0: Sync[F], neutron: NeutronClient[F]): F[Subnet[IpAddress]]", "member" : "pt.tecnico.dsi.openstack.neutron.models.SubnetIpAvailability.subnet", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpAvailability.html#subnet[F[_]](implicitevidence$1:cats.effect.Sync[F],implicitneutron:pt.tecnico.dsi.openstack.neutron.NeutronClient[F]):F[pt.tecnico.dsi.openstack.neutron.models.Subnet[com.comcast.ip4s.IpAddress]]", "kind" : "def"}, {"member" : "pt.tecnico.dsi.openstack.neutron.models.SubnetIpAvailability#<init>", "error" : "unsupported entity"}, {"label" : "usedIps", "tail" : ": BigInt", "member" : "pt.tecnico.dsi.openstack.neutron.models.SubnetIpAvailability.usedIps", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpAvailability.html#usedIps:BigInt", "kind" : "val"}, {"label" : "totalIps", "tail" : ": BigInt", "member" : "pt.tecnico.dsi.openstack.neutron.models.SubnetIpAvailability.totalIps", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpAvailability.html#totalIps:BigInt", "kind" : "val"}, {"label" : "subnetName", "tail" : ": String", "member" : "pt.tecnico.dsi.openstack.neutron.models.SubnetIpAvailability.subnetName", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpAvailability.html#subnetName:String", "kind" : "val"}, {"label" : "subnetId", "tail" : ": String", "member" : "pt.tecnico.dsi.openstack.neutron.models.SubnetIpAvailability.subnetId", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpAvailability.html#subnetId:String", "kind" : "val"}, {"label" : "ipVersion", "tail" : ": IpVersion", "member" : "pt.tecnico.dsi.openstack.neutron.models.SubnetIpAvailability.ipVersion", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpAvailability.html#ipVersion:com.comcast.ip4s.IpVersion", "kind" : "val"}, {"label" : "cidr", "tail" : ": Cidr[IpAddress]", "member" : "pt.tecnico.dsi.openstack.neutron.models.SubnetIpAvailability.cidr", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpAvailability.html#cidr:com.comcast.ip4s.Cidr[com.comcast.ip4s.IpAddress]", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpAvailability.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpAvailability.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpAvailability.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpAvailability.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpAvailability.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpAvailability.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpAvailability.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpAvailability.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpAvailability.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpAvailability.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpAvailability.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpAvailability.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpAvailability.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpAvailability.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpAvailability.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpAvailability.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpAvailability.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpAvailability.html", "kind" : "object"}, {"name" : "pt.tecnico.dsi.openstack.neutron.models.SubnetIpv4", "shortDescription" : "", "object" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv4$.html", "members_object" : [{"label" : "show", "tail" : ": ShowPretty[SubnetIpv4]", "member" : "pt.tecnico.dsi.openstack.neutron.models.SubnetIpv4.show", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv4$.html#show:cats.derived.ShowPretty[pt.tecnico.dsi.openstack.neutron.models.SubnetIpv4]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv4$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv4$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv4$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv4$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv4$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv4$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv4$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv4$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv4$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv4$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv4$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv4$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv4$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv4$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv4$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv4$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv4$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv4$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv4$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv4.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv4.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (SubnetIpv4) => Boolean, msg: => Any): SubnetIpv4", "member" : "scala.Predef.Ensuring.ensuring", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv4.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (SubnetIpv4) => Boolean): SubnetIpv4", "member" : "scala.Predef.Ensuring.ensuring", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv4.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): SubnetIpv4", "member" : "scala.Predef.Ensuring.ensuring", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv4.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): SubnetIpv4", "member" : "scala.Predef.Ensuring.ensuring", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv4.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (SubnetIpv4, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv4.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (SubnetIpv4, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv4.html#->[B](y:B):(A,B)", "kind" : "def"}, {"member" : "pt.tecnico.dsi.openstack.neutron.models.SubnetIpv4#<init>", "error" : "unsupported entity"}, {"label" : "links", "tail" : ": List[Link]", "member" : "pt.tecnico.dsi.openstack.neutron.models.SubnetIpv4.links", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv4.html#links:List[pt.tecnico.dsi.openstack.common.models.Link]", "kind" : "val"}, {"label" : "tags", "tail" : ": List[String]", "member" : "pt.tecnico.dsi.openstack.neutron.models.SubnetIpv4.tags", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv4.html#tags:List[String]", "kind" : "val"}, {"label" : "updatedAt", "tail" : ": OffsetDateTime", "member" : "pt.tecnico.dsi.openstack.neutron.models.SubnetIpv4.updatedAt", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv4.html#updatedAt:java.time.OffsetDateTime", "kind" : "val"}, {"label" : "createdAt", "tail" : ": OffsetDateTime", "member" : "pt.tecnico.dsi.openstack.neutron.models.SubnetIpv4.createdAt", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv4.html#createdAt:java.time.OffsetDateTime", "kind" : "val"}, {"label" : "revision", "tail" : ": Int", "member" : "pt.tecnico.dsi.openstack.neutron.models.SubnetIpv4.revision", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv4.html#revision:Int", "kind" : "val"}, {"label" : "serviceTypes", "tail" : ": List[String]", "member" : "pt.tecnico.dsi.openstack.neutron.models.SubnetIpv4.serviceTypes", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv4.html#serviceTypes:List[String]", "kind" : "val"}, {"label" : "segmentId", "tail" : ": Option[String]", "member" : "pt.tecnico.dsi.openstack.neutron.models.SubnetIpv4.segmentId", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv4.html#segmentId:Option[String]", "kind" : "val"}, {"label" : "subnetpoolId", "tail" : ": Option[String]", "member" : "pt.tecnico.dsi.openstack.neutron.models.SubnetIpv4.subnetpoolId", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv4.html#subnetpoolId:Option[String]", "kind" : "val"}, {"label" : "nameservers", "tail" : ": List[Ipv4Address]", "member" : "pt.tecnico.dsi.openstack.neutron.models.SubnetIpv4.nameservers", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv4.html#nameservers:List[com.comcast.ip4s.Ipv4Address]", "kind" : "val"}, {"label" : "enableDhcp", "tail" : ": Boolean", "member" : "pt.tecnico.dsi.openstack.neutron.models.SubnetIpv4.enableDhcp", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv4.html#enableDhcp:Boolean", "kind" : "val"}, {"label" : "hostRoutes", "tail" : ": List[Route[Ipv4Address]]", "member" : "pt.tecnico.dsi.openstack.neutron.models.SubnetIpv4.hostRoutes", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv4.html#hostRoutes:List[pt.tecnico.dsi.openstack.neutron.models.Route[com.comcast.ip4s.Ipv4Address]]", "kind" : "val"}, {"label" : "allocationPools", "tail" : ": List[AllocationPool[Ipv4Address]]", "member" : "pt.tecnico.dsi.openstack.neutron.models.SubnetIpv4.allocationPools", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv4.html#allocationPools:List[pt.tecnico.dsi.openstack.neutron.models.AllocationPool[com.comcast.ip4s.Ipv4Address]]", "kind" : "val"}, {"label" : "gateway", "tail" : ": Option[Ipv4Address]", "member" : "pt.tecnico.dsi.openstack.neutron.models.SubnetIpv4.gateway", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv4.html#gateway:Option[com.comcast.ip4s.Ipv4Address]", "kind" : "val"}, {"label" : "cidr", "tail" : ": Cidr[Ipv4Address]", "member" : "pt.tecnico.dsi.openstack.neutron.models.SubnetIpv4.cidr", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv4.html#cidr:com.comcast.ip4s.Cidr[com.comcast.ip4s.Ipv4Address]", "kind" : "val"}, {"label" : "networkId", "tail" : ": String", "member" : "pt.tecnico.dsi.openstack.neutron.models.SubnetIpv4.networkId", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv4.html#networkId:String", "kind" : "val"}, {"label" : "projectId", "tail" : ": String", "member" : "pt.tecnico.dsi.openstack.neutron.models.SubnetIpv4.projectId", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv4.html#projectId:String", "kind" : "val"}, {"label" : "description", "tail" : ": String", "member" : "pt.tecnico.dsi.openstack.neutron.models.SubnetIpv4.description", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv4.html#description:String", "kind" : "val"}, {"label" : "name", "tail" : ": String", "member" : "pt.tecnico.dsi.openstack.neutron.models.SubnetIpv4.name", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv4.html#name:String", "kind" : "val"}, {"label" : "id", "tail" : ": String", "member" : "pt.tecnico.dsi.openstack.neutron.models.SubnetIpv4.id", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv4.html#id:String", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv4.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "network", "tail" : "(arg0: Sync[F], neutron: NeutronClient[F]): F[Network]", "member" : "pt.tecnico.dsi.openstack.neutron.models.Subnet.network", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv4.html#network[F[_]](implicitevidence$4:cats.effect.Sync[F],implicitneutron:pt.tecnico.dsi.openstack.neutron.NeutronClient[F]):F[pt.tecnico.dsi.openstack.neutron.models.Network]", "kind" : "def"}, {"label" : "project", "tail" : "(arg0: Sync[F], keystone: KeystoneClient[F]): F[Project]", "member" : "pt.tecnico.dsi.openstack.neutron.models.Subnet.project", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv4.html#project[F[_]](implicitevidence$3:cats.effect.Sync[F],implicitkeystone:pt.tecnico.dsi.openstack.keystone.KeystoneClient[F]):F[pt.tecnico.dsi.openstack.keystone.models.Project]", "kind" : "def"}, {"label" : "linksMap", "tail" : ": Map[String, Uri]", "member" : "pt.tecnico.dsi.openstack.common.models.Identifiable.linksMap", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv4.html#linksMap:Map[String,org.http4s.Uri]", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv4.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv4.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv4.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv4.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv4.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv4.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv4.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv4.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv4.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv4.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv4.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv4.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv4.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv4.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv4.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv4.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv4.html", "kind" : "object"}, {"name" : "pt.tecnico.dsi.openstack.neutron.models.SubnetIpv6", "shortDescription" : "", "object" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv6$.html", "members_object" : [{"label" : "show", "tail" : ": ShowPretty[SubnetIpv6]", "member" : "pt.tecnico.dsi.openstack.neutron.models.SubnetIpv6.show", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv6$.html#show:cats.derived.ShowPretty[pt.tecnico.dsi.openstack.neutron.models.SubnetIpv6]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv6$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv6$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv6$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv6$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv6$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv6$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv6$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv6$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv6$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv6$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv6$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv6$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv6$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv6$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv6$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv6$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv6$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv6$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv6$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv6.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv6.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (SubnetIpv6) => Boolean, msg: => Any): SubnetIpv6", "member" : "scala.Predef.Ensuring.ensuring", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv6.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (SubnetIpv6) => Boolean): SubnetIpv6", "member" : "scala.Predef.Ensuring.ensuring", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv6.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): SubnetIpv6", "member" : "scala.Predef.Ensuring.ensuring", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv6.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): SubnetIpv6", "member" : "scala.Predef.Ensuring.ensuring", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv6.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (SubnetIpv6, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv6.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (SubnetIpv6, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv6.html#->[B](y:B):(A,B)", "kind" : "def"}, {"member" : "pt.tecnico.dsi.openstack.neutron.models.SubnetIpv6#<init>", "error" : "unsupported entity"}, {"label" : "links", "tail" : ": List[Link]", "member" : "pt.tecnico.dsi.openstack.neutron.models.SubnetIpv6.links", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv6.html#links:List[pt.tecnico.dsi.openstack.common.models.Link]", "kind" : "val"}, {"label" : "tags", "tail" : ": List[String]", "member" : "pt.tecnico.dsi.openstack.neutron.models.SubnetIpv6.tags", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv6.html#tags:List[String]", "kind" : "val"}, {"label" : "updatedAt", "tail" : ": OffsetDateTime", "member" : "pt.tecnico.dsi.openstack.neutron.models.SubnetIpv6.updatedAt", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv6.html#updatedAt:java.time.OffsetDateTime", "kind" : "val"}, {"label" : "createdAt", "tail" : ": OffsetDateTime", "member" : "pt.tecnico.dsi.openstack.neutron.models.SubnetIpv6.createdAt", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv6.html#createdAt:java.time.OffsetDateTime", "kind" : "val"}, {"label" : "revision", "tail" : ": Int", "member" : "pt.tecnico.dsi.openstack.neutron.models.SubnetIpv6.revision", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv6.html#revision:Int", "kind" : "val"}, {"label" : "routerAdvertisementMode", "tail" : ": Ipv6Mode", "member" : "pt.tecnico.dsi.openstack.neutron.models.SubnetIpv6.routerAdvertisementMode", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv6.html#routerAdvertisementMode:pt.tecnico.dsi.openstack.neutron.models.Ipv6Mode", "kind" : "val"}, {"label" : "mode", "tail" : ": Ipv6Mode", "member" : "pt.tecnico.dsi.openstack.neutron.models.SubnetIpv6.mode", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv6.html#mode:pt.tecnico.dsi.openstack.neutron.models.Ipv6Mode", "kind" : "val"}, {"label" : "serviceTypes", "tail" : ": List[String]", "member" : "pt.tecnico.dsi.openstack.neutron.models.SubnetIpv6.serviceTypes", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv6.html#serviceTypes:List[String]", "kind" : "val"}, {"label" : "segmentId", "tail" : ": Option[String]", "member" : "pt.tecnico.dsi.openstack.neutron.models.SubnetIpv6.segmentId", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv6.html#segmentId:Option[String]", "kind" : "val"}, {"label" : "subnetpoolId", "tail" : ": Option[String]", "member" : "pt.tecnico.dsi.openstack.neutron.models.SubnetIpv6.subnetpoolId", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv6.html#subnetpoolId:Option[String]", "kind" : "val"}, {"label" : "nameservers", "tail" : ": List[Ipv6Address]", "member" : "pt.tecnico.dsi.openstack.neutron.models.SubnetIpv6.nameservers", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv6.html#nameservers:List[com.comcast.ip4s.Ipv6Address]", "kind" : "val"}, {"label" : "enableDhcp", "tail" : ": Boolean", "member" : "pt.tecnico.dsi.openstack.neutron.models.SubnetIpv6.enableDhcp", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv6.html#enableDhcp:Boolean", "kind" : "val"}, {"label" : "hostRoutes", "tail" : ": List[Route[Ipv6Address]]", "member" : "pt.tecnico.dsi.openstack.neutron.models.SubnetIpv6.hostRoutes", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv6.html#hostRoutes:List[pt.tecnico.dsi.openstack.neutron.models.Route[com.comcast.ip4s.Ipv6Address]]", "kind" : "val"}, {"label" : "allocationPools", "tail" : ": List[AllocationPool[Ipv6Address]]", "member" : "pt.tecnico.dsi.openstack.neutron.models.SubnetIpv6.allocationPools", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv6.html#allocationPools:List[pt.tecnico.dsi.openstack.neutron.models.AllocationPool[com.comcast.ip4s.Ipv6Address]]", "kind" : "val"}, {"label" : "gateway", "tail" : ": Option[Ipv6Address]", "member" : "pt.tecnico.dsi.openstack.neutron.models.SubnetIpv6.gateway", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv6.html#gateway:Option[com.comcast.ip4s.Ipv6Address]", "kind" : "val"}, {"label" : "cidr", "tail" : ": Cidr[Ipv6Address]", "member" : "pt.tecnico.dsi.openstack.neutron.models.SubnetIpv6.cidr", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv6.html#cidr:com.comcast.ip4s.Cidr[com.comcast.ip4s.Ipv6Address]", "kind" : "val"}, {"label" : "networkId", "tail" : ": String", "member" : "pt.tecnico.dsi.openstack.neutron.models.SubnetIpv6.networkId", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv6.html#networkId:String", "kind" : "val"}, {"label" : "projectId", "tail" : ": String", "member" : "pt.tecnico.dsi.openstack.neutron.models.SubnetIpv6.projectId", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv6.html#projectId:String", "kind" : "val"}, {"label" : "description", "tail" : ": String", "member" : "pt.tecnico.dsi.openstack.neutron.models.SubnetIpv6.description", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv6.html#description:String", "kind" : "val"}, {"label" : "name", "tail" : ": String", "member" : "pt.tecnico.dsi.openstack.neutron.models.SubnetIpv6.name", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv6.html#name:String", "kind" : "val"}, {"label" : "id", "tail" : ": String", "member" : "pt.tecnico.dsi.openstack.neutron.models.SubnetIpv6.id", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv6.html#id:String", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv6.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "network", "tail" : "(arg0: Sync[F], neutron: NeutronClient[F]): F[Network]", "member" : "pt.tecnico.dsi.openstack.neutron.models.Subnet.network", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv6.html#network[F[_]](implicitevidence$4:cats.effect.Sync[F],implicitneutron:pt.tecnico.dsi.openstack.neutron.NeutronClient[F]):F[pt.tecnico.dsi.openstack.neutron.models.Network]", "kind" : "def"}, {"label" : "project", "tail" : "(arg0: Sync[F], keystone: KeystoneClient[F]): F[Project]", "member" : "pt.tecnico.dsi.openstack.neutron.models.Subnet.project", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv6.html#project[F[_]](implicitevidence$3:cats.effect.Sync[F],implicitkeystone:pt.tecnico.dsi.openstack.keystone.KeystoneClient[F]):F[pt.tecnico.dsi.openstack.keystone.models.Project]", "kind" : "def"}, {"label" : "linksMap", "tail" : ": Map[String, Uri]", "member" : "pt.tecnico.dsi.openstack.common.models.Identifiable.linksMap", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv6.html#linksMap:Map[String,org.http4s.Uri]", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv6.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv6.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv6.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv6.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv6.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv6.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv6.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv6.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv6.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv6.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv6.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv6.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv6.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv6.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv6.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv6.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "pt\/tecnico\/dsi\/openstack\/neutron\/models\/SubnetIpv6.html", "kind" : "object"}], "pt.tecnico.dsi.openstack.neutron" : [{"name" : "pt.tecnico.dsi.openstack.neutron.NeutronClient", "shortDescription" : "", "object" : "pt\/tecnico\/dsi\/openstack\/neutron\/NeutronClient$.html", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/NeutronClient.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/NeutronClient.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (NeutronClient[F]) => Boolean, msg: => Any): NeutronClient[F]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/NeutronClient.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (NeutronClient[F]) => Boolean): NeutronClient[F]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/NeutronClient.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): NeutronClient[F]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/NeutronClient.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): NeutronClient[F]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/NeutronClient.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (NeutronClient[F], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/NeutronClient.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (NeutronClient[F], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/NeutronClient.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "quotas", "tail" : ": Quotas[F]", "member" : "pt.tecnico.dsi.openstack.neutron.NeutronClient.quotas", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/NeutronClient.html#quotas:pt.tecnico.dsi.openstack.neutron.services.Quotas[F]", "kind" : "val"}, {"label" : "subnets", "tail" : ": Subnets[F]", "member" : "pt.tecnico.dsi.openstack.neutron.NeutronClient.subnets", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/NeutronClient.html#subnets:pt.tecnico.dsi.openstack.neutron.services.Subnets[F]", "kind" : "val"}, {"label" : "routers", "tail" : ": Routers[F]", "member" : "pt.tecnico.dsi.openstack.neutron.NeutronClient.routers", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/NeutronClient.html#routers:pt.tecnico.dsi.openstack.neutron.services.Routers[F]", "kind" : "val"}, {"label" : "securityGroupRules", "tail" : ": SecurityGroupRules[F]", "member" : "pt.tecnico.dsi.openstack.neutron.NeutronClient.securityGroupRules", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/NeutronClient.html#securityGroupRules:pt.tecnico.dsi.openstack.neutron.services.SecurityGroupRules[F]", "kind" : "val"}, {"label" : "securityGroups", "tail" : ": SecurityGroups[F]", "member" : "pt.tecnico.dsi.openstack.neutron.NeutronClient.securityGroups", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/NeutronClient.html#securityGroups:pt.tecnico.dsi.openstack.neutron.services.SecurityGroups[F]", "kind" : "val"}, {"label" : "floatingIps", "tail" : ": FloatingIps[F]", "member" : "pt.tecnico.dsi.openstack.neutron.NeutronClient.floatingIps", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/NeutronClient.html#floatingIps:pt.tecnico.dsi.openstack.neutron.services.FloatingIps[F]", "kind" : "val"}, {"label" : "ipAvailabilities", "tail" : ": IpAvailabilities[F]", "member" : "pt.tecnico.dsi.openstack.neutron.NeutronClient.ipAvailabilities", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/NeutronClient.html#ipAvailabilities:pt.tecnico.dsi.openstack.neutron.services.IpAvailabilities[F]", "kind" : "val"}, {"label" : "networks", "tail" : ": Networks[F]", "member" : "pt.tecnico.dsi.openstack.neutron.NeutronClient.networks", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/NeutronClient.html#networks:pt.tecnico.dsi.openstack.neutron.services.Networks[F]", "kind" : "val"}, {"label" : "uri", "tail" : ": Uri", "member" : "pt.tecnico.dsi.openstack.neutron.NeutronClient.uri", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/NeutronClient.html#uri:org.http4s.Uri", "kind" : "val"}, {"member" : "pt.tecnico.dsi.openstack.neutron.NeutronClient#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/NeutronClient.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/NeutronClient.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/NeutronClient.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/NeutronClient.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/NeutronClient.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/NeutronClient.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/NeutronClient.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/NeutronClient.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/NeutronClient.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/NeutronClient.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/NeutronClient.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/NeutronClient.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/NeutronClient.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/NeutronClient.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/NeutronClient.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/NeutronClient.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/NeutronClient.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/NeutronClient.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/NeutronClient.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(baseUri: Uri, session: Session)(arg0: Sync[F], arg1: Client[F]): NeutronClient[F]", "member" : "pt.tecnico.dsi.openstack.neutron.NeutronClient.apply", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/NeutronClient$.html#apply[F[_]](baseUri:org.http4s.Uri,session:pt.tecnico.dsi.openstack.keystone.models.Session)(implicitevidence$1:cats.effect.Sync[F],implicitevidence$2:org.http4s.client.Client[F]):pt.tecnico.dsi.openstack.neutron.NeutronClient[F]", "kind" : "def"}, {"label" : "type", "tail" : ": String", "member" : "pt.tecnico.dsi.openstack.neutron.NeutronClient.type", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/NeutronClient$.html#type:String", "kind" : "final val"}, {"label" : "OpenstackClient", "tail" : "", "member" : "pt.tecnico.dsi.openstack.neutron.NeutronClient.OpenstackClient", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/NeutronClient$.html#OpenstackClient[F[_]]=pt.tecnico.dsi.openstack.neutron.NeutronClient[F]", "kind" : "final type"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/NeutronClient$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/NeutronClient$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/NeutronClient$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/NeutronClient$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/NeutronClient$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/NeutronClient$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/NeutronClient$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/NeutronClient$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/NeutronClient$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/NeutronClient$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/NeutronClient$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/NeutronClient$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/NeutronClient$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/NeutronClient$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/NeutronClient$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/NeutronClient$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/NeutronClient$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/NeutronClient$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "pt\/tecnico\/dsi\/openstack\/neutron\/NeutronClient$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "pt\/tecnico\/dsi\/openstack\/neutron\/NeutronClient.html", "kind" : "object"}]};